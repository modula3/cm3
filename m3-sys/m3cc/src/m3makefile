%
% Copyright (C) 1994, Digital Equipment Corporation
% All rights reserved.
% See the file COPYRIGHT for a full description.
%

%
% user can say cm3 -DM3CC_TARGET=FreeBSD4, for example.
% -DM3CC_GCC_VERSION=47
% -DGCC45
%

% current default is gcc 4.7 for most platforms
% available: 4.2 (apple), 4.3, 4.5, 4.6, 4.7.
DefaultGccVersion = "47"

% NOTE: gcc 4.3, 4.5, 4.6 have been deleted to save space.
% 4.2 (apple) should be deleted too.
% gmp can be deleted but has not been.

readonly TargeDefaultGccVersion = {
       "ARM_DARWIN" : "42",
}

include("platforms.quake")

%
% fs_exists is deliberately not used here, in order to build
% starting with versions of cm3 that do not have it.
%
proc FileExists (a) is
    return not stale (a, a)
end

readonly proc HostIsNT () is
  return equal ($OS, "Windows_NT")
end

local DevNull1 = "1>/dev/null"
local DevNull2 = "2>/dev/null"
if HostIsNT ()
  DevNull1 = "1>nul:"
  DevNull2 = "2>nul:"
end

readonly proc GNU_platform (x) is
  if Platform_info contains x
    return Platform_info{x}
  else
    error ("GNU platform is not known for \"" & x & "\"")
    return "unknown-unknown-unknown"
  end
end

readonly m3cc_config = {
%
% Note about configuring which assembler to use:
%  When building m3cg and not gcc driver, the configured assembler is never
%  going to be run (by m3cg) but it does matter.
%  Configuration in the "gcc/gcc" directory, which is done as part of
%  building m3cg, does locate and test an assembler. Building on HP-UX will
%  fail and say the GNU assembler is required, if it is not the one found.
%
% TODO: check of platform ends with _LINUX and then add -with-gnu-as -with-gnu-ld
% maybe on config.gcc
  "I386_LINUX"   : "-with-gnu-as -with-gnu-ld",
  "AMD64_LINUX"  : "-with-gnu-as -with-gnu-ld",
  "PPC_LINUX"    : "-with-gnu-as -with-gnu-ld",
  "PPC32_LINUX"  : "-with-gnu-as -with-gnu-ld",
  "PPC64_LINUX"  : "-with-gnu-as -with-gnu-ld",
  "SPARC32_LINUX": "-with-gnu-as -with-gnu-ld",
  "SPARC64_LINUX": "-with-gnu-as -with-gnu-ld",
  "LINUXLIBC6"   : "-with-gnu-as -with-gnu-ld",
  "ARM_LINUX"    : "-with-gnu-as -with-gnu-ld -with-arch=armv6 -with-fpu=vfp -with-float=hard ",
                   % maybe for ARM*_LINUX:
                   % & "-enable-target-optspace -enable-threads -enable-shared",
  "ARMEL_LINUX"  : "-with-gnu-as -with-gnu-ld -with-arch=armv6 -with-fpu=vfp -with-float=hard ",
  "ARM6_LINUX"   : "-with-gnu-as -with-gnu-ld -with-arch=armv6 -with-fpu=vfp -with-float=hard ",
  "ARMV6_LINUX"  : "-with-gnu-as -with-gnu-ld -with-arch=armv6 -with-fpu=vfp -with-float=hard ",
  % REVIEW: vfp?
  "ARM7_LINUX"   : "-with-gnu-as -with-gnu-ld -with-arch=armv7 -with-fpu=vfp -with-float=hard ",
  "ARMV7_LINUX"  : "-with-gnu-as -with-gnu-ld -with-arch=armv7 -with-fpu=vfp -with-float=hard ",
 
  %
  % AIX usually requires native as and ld -- cross builds are not possible.
  % Not all of this is relevant to m3cg?, but user can build gcc/cc1 here.
  %
  "PPC32_AIX" : "-without-gnu-as -without-gnu-ld",
  "PPC64_AIX" : "-without-gnu-as -without-gnu-ld",
  % If buiding native gcc driver, add:
  % -with-as=/usr/bin/as -with-ld=/us/bin/ld

  %
  % Irix requires GNU as and GNU ld should work but presently does not.
  % Irix native ld works.
  %
  "MIPS32_IRIX" : "-with-gnu-as -without-gnu-ld", 
  "MIPS64_IRIX" : "-with-gnu-as -without-gnu-ld",
  % If buiding native gcc driver, add:
  % -with-ld=/usr/bin/ld 

  %
  % I thought this was just about what assembler/linker the gcc driver runs,
  % but it also affect the contents of the assembly.
  % For example, SPARC64_SOLARIS output is not being accepted by SUN as..
  % #ifdef HAVE_AS_REGISTER_PSEUDO_OP
  % D:\dev2\cm3.2\m3-sys\m3cc\gcc\gcc\config\sparc\sparc.c(3842):
  %   fprintf (file, "\t.register\t%%g%d, #%s\n", i,
  %
  % "SPARC64_SOLARIS" : "-without-gnu-ld -without-gnu-as",
  %
  % I patched config.h manually, but this should be equivalent.
  % Native builds robably just figure it out. This is needed for cross builds,
  % unless perhaps building binutils along with m3cg.
  % If m3cg omits the .register psuedo ops, assembly completely fails,
  % with many errors.
  %

  "SPARC64_SOLARIS" : "-without-gnu-as -without-gnu-ld",
  % If buiding native gcc driver, add:
  % -with-as=/usr/ccs/bin/as -with-ld=/usr/ccs/bin/ld 
  
  "I386_SOLARIS" :  "-without-gnu-as -without-gnu-ld",
  "AMD64_SOLARIS" : "-without-gnu-as -without-gnu-ld",
  % see: http://gcc.gnu.org/install/specific.html#ix86-x-solaris210
  %      http://gcc.gnu.org/ml/gcc/2010-05/msg00155.html
  % GNU assembler is ok with .stabd.
  % Sun assembler does not like .stabd.
  % Sun assembler does not like cross section subtraction, as occurs
  % with -fPIC -funwind-table -m64, but gcc 4.4.0 fix backported.
  % GNU assembler moves around: /usr/sfw/bin/gas vs. /opt/csw/gnu/as
  % If buiding native gcc driver, add:
  % -with-as=/usr/ccs/bin/as -with-ld=/usr/ccs/bin/ld 
  % or -with-as=/usr/sfw/bin/gas -with-ld=/usr/ccs/bin/ld
  % or /opt/csw/gnu/as, or /opt/csw/bin/gas, or gas

  "SOLgnu" : "-without-gnu-ld -without-gnu-as -with-cpu=v9", % v9 for atomics
  "SOLsun" : "-without-gnu-ld -without-gnu-as -with-cpu=v9", % v9 for atomics
  % If buiding native gcc driver, add:
  % -with-as=/usr/ccs/bin/as -with-ld=/usr/ccs/bin/ld

  %
  % Bootstrap procedure for gcc on HPPA{64}-HPUX:
  % See http://gcc.gnu.org/install/specific.html.
  % Lots of caveats for GNU ld, so use vendor ld.
  %  Build gcc 3.3.6 with bundled cc.
  %    32bit: CC="cc       -Wp,-H16376 -D_CLASSIC_TYPES -D_HPUX_SOURCE"
  %    64bit: CC="cc +DD64 -Wp,-H16376 -D_CLASSIC_TYPES -D_HPUX_SOURCE"
  %  Getting patches for ld can help, esp. if building libstdc++.
  %  This gcc will not support -g.
  %  Build current binutils with gcc -- just gas.
  %     http://gcc.gnu.org/install/specific.html offers building
  %     binutils first but current binutils does not work that way.
  %  Rebuild gcc 3.3.6 with -with-as=path -with-gnu-as.
  %  Build current gcc also with -with-as=path -with-gnu-as.
  %  32bit and 64bit HPPA-HPUX require separate -prefix.
  %    -program-suffix=32 does not suffice.
  %  I use /usr/local/32 and /usr/local/64.
  %  Also, vendor tar often can not extract all of gcc, e.g. libstdc++,
  %  so use GNU tar. And vendor make often can not build gcc, get GNU make.
  %
  % m3cg is not actually ever going to run as, only the gcc driver does,
  % but build/configure is still picky about it -- it affects
  % the generated assembly for SPARC64, whether or not some versions
  % of gcc will support -g on HP-UX, and I think whether or not
  % configure will even succeed on HP-UX (with newer gcc).
  %
  "PA32_HPUX"  : "-with-gnu-as",
  "PA64_HPUX"  : "-with-gnu-as",
  % If buiding native gcc driver, add:
  %    -with-as=/usr/local/32/bin/gas
  % or -with-as=/usr/local/64/bin/gas
  
  "HPPA"  : "-with-gnu-as",
  % The HP assembler does not understand inline debugger info.

  "IRIX5" : "-with-stabs -with-gnu-as"
  % mips-sgi-irix5 does not support debugging using the native
  % assembler.  If you do not have gas, delete the config options above.
  % You will need the latest version of gas (binutils-2.5 or better).
  % -with-stabs is necessary because Modula-3 v3.3 generates funny
  % symbol names that can not be parsed by the ECOFF debugging
  % directives.  [Modula-3 v3.4 and later do not generate funny
  % symbol names. -- Bill Kalsow 1/13/94]

} % m3cc_config

sparc64_assembler_config = "gcc_cv_as_sparc_register_op=yes"
solaris_assembler_config = "gcc_cv_as_sparc_register_op=yes gcc_cv_as_weak=yes gcc_cv_as_hidden=yes gcc_cv_ld_hidden=yes"

readonly m3cc_env = {
  "SPARC64_FREEBSD" : sparc64_assembler_config,
  "SPARC64_LINUX"   : sparc64_assembler_config,
  "SPARC64_NETBSD"  : sparc64_assembler_config,
  "SPARC64_OPENBSD" : sparc64_assembler_config,
  "SPARC64_SOLARIS" : solaris_assembler_config,
  "SOLsun"          : solaris_assembler_config,
  "SOLgnu"          : solaris_assembler_config,
  "SPARC32_SOLARIS" : solaris_assembler_config,
  "I386_SOLARIS"    : solaris_assembler_config,
  % workaround http://gcc.gnu.org/bugzilla/show_bug.cgi?id=45927
  "AMD64_SOLARIS"   : solaris_assembler_config & " gcc_cv_as_ix86_quad=yes",
} % m3cc_env

readonly proc get_config (target) is
  if m3cc_config contains target
    return m3cc_config {target}
  else
    return ""
  end
end

readonly proc get_env (target) is
  if m3cc_env contains target
    return m3cc_env {target}
  else
    return ""
  end
end

readonly proc get_overrides (nm, ov) is
  if equal (ov, "*")
    return ""
  else
    return format ("%s=\"%s\" ", nm, ov)
  end
end

env = ""

include ("../../m3cc/src/gnumake.common")
include ("../../m3cc/src/gnucc.common")

% check for overrides, otherwise use the defaults from the configuration file
if not defined ("M3CC_MAKE")    M3CC_MAKE   = GNU_MAKE   end
if not defined ("M3CC_CONFIG")  M3CC_CONFIG = get_config (M3CC_TARGET) end

if defined("M3CC_GCC_VERSION")
  GccVersion = M3CC_GCC_VERSION
end

% translate old/simple command line option to new enum/string
if defined("GCC42") GccVersion = "42" end
if defined("GCC43") GccVersion = "43" end
if defined("GCC44") GccVersion = "44" end
if defined("GCC45") GccVersion = "45" end
if defined("GCC46") GccVersion = "46" end
if defined("GCC47") GccVersion = "47" end

if not defined("GccVersion")
  if TargeDefaultGccVersion contains M3CC_TARGET
    DefaultGccVersion = TargeDefaultGccVersion{M3CC_TARGET}
  end
  GccVersion = DefaultGccVersion
end

% translate enum/string to simple booleans
GCC42 = equal(GccVersion, "42")
GCC43 = equal(GccVersion, "43")
GCC44 = equal(GccVersion, "44")
GCC45 = equal(GccVersion, "45")
GCC46 = equal(GccVersion, "46")
GCC47 = equal(GccVersion, "47")

readonly GccBackendVersionData = {
  % 0: SourceDir we symlink out of gcc/gcc/m3cg to SourceDir/gcc/m3cg
  % 1: m3gty garbage collection syntax changed, need two versions
  % 2: #defines to guide gcc/gcc/m3cg/parse.c
  % 3: extra targets or empty (e.g. all-libdecnumber)

  "42": [ "../gcc-apple", "m3gty43.h", "#define GCC_APPLE 1\n#define GCC42 1\n", " all-libdecnumber " ],
  "43": [ "../gcc", "m3gty43.h", "", " all-libdecnumber all-gmp " ],
  % "44" skipped
  "45": [ "../gcc-4.5", "m3gty45.h", "#define GCC45 1\n", " " ],
  "46": [ "../gcc-4.6", "m3gty45.h", "#define GCC45 1\n#define GCC46 1\n", " " ],
  "47": [ "../gcc-4.7", "m3gty45.h", "#define GCC45 1\n#define GCC46 1\n#define GCC47 1\n", " " ],
}

local SourceDir = GccBackendVersionData{GccVersion}[0]
local extra_targets = GccBackendVersionData{GccVersion}[3]

if not GCC43
  local m3gty = GccBackendVersionData{GccVersion}[1]
  local Defines = GccBackendVersionData{GccVersion}[2]
  fs_mkdir(SourceDir & "/gcc/m3cg")
  local files = ["config-lang.in", "m3-def.h", "m3-parse.h", "lang-options.h",
                 "lang.opt", "m3cg.h", "Make-lang.in"]
  if not GCC46
    files += "lang-specs.h"
  end
  foreach a in files
    cp_if("../gcc/gcc/m3cg/" & a, SourceDir & "/gcc/m3cg/" & a)
  end
  cp_if("../gcc/gcc/m3cg/" & m3gty, SourceDir & "/gcc/m3cg/m3gty43.h")
  local a = Defines & fs_contents("../gcc/gcc/m3cg/parse.c")
  local b = SourceDir & "/gcc/m3cg/parse.c"
  > b & ".temp" in
    write(a)
  end
  cp_if(b & ".temp", b)
end
foreach a in ["gmp", "mpfr", "mpc"]
  delete_file (SourceDir & "/" & a)
end
if GCC43
  link_file("../gmp-4.3.2", SourceDir & "/gmp")
end
%link_file("/src/mpfr-2.4.2", SourceDir & "/mpfr")
%link_file("/src/mpc-0.8.2", SourceDir & "/mpc")

% figure out where we are going to build gcc
build_dir = "../" & BUILD_DIR

if not Native build_dir = "../" & HOST & "-" & M3CC_TARGET end

if not equal(GccVersion, DefaultGccVersion)
  build_dir = build_dir & "-gcc" & GccVersion
end
Log = subst_chars(path() & "/" & build_dir & "/_m3.log", "\\", "/")

fs_mkdir (build_dir)

m3cc_ResponseFileCounter = 0
include("Math.quake")

readonly proc m3cc_Run (x) is
    if not FileExists(Log) > Log in write("") end end
    >> Log in write(x & "\n") end
    if not HostIsNT()
        write(x & "\n")
        exec(x)
        return
    end
    InitMath()
    m3cc_ResponseFileCounter = Add(m3cc_ResponseFileCounter, 1)
    local ShLeaf = "_m3" & m3cc_ResponseFileCounter & ".sh"
    local Sh = build_dir & "/" & ShLeaf
    write(ShLeaf & ":" & x & "\n")
    > Sh in
        write(x & "\n")
    end
    local a = try_exec("@chmod +x " & Sh)
    exec("@sh -exc " & Sh)
end

readonly proc ProbeExeExtension (a) is
  return equal (TARGET, "NT386") or FileExists (a & ".exe")
end

readonly proc AppendExeExtension (a) is
  if ProbeExeExtension (a)
    return a & ".exe"
  end
  return a
end

DoMipsTfile = Native and (equal (M3CC_TARGET, "DS3100") or equal (M3CC_TARGET, "ALPHA_OSF"))

readonly proc postcp() is
  pSrc  = build_dir & "/gcc/m3cgc1"
  pDest = build_dir & "/cm3cg"
  if ProbeExeExtension (pSrc)
    pSrc = pSrc & ".exe"
    pDest = pDest & ".exe"
  end
  if stale(pDest, pSrc)
    cp_if(pSrc, pDest)
  end
  if DoMipsTfile
    pSrc = build_dir & "/gcc/mips-tfile"
    pDest = build_dir & "/mips-tfile"
    if stale(pDest, pSrc)
      cp_if(pSrc, pDest)
    end
  end
  if Native
    % Some platforms do not allow overwriting binaries that are currently
    % executed, hence the default is not to install the cm3cg binary in place.
    % This also saves the user from accidentally overwriting the currently
    % used compiler. To install the binary, you can either use the
    % install-cm3-compiler script from the scripts/ directory or set the
    % INSTALL_CM3_IN_BIN environment variable to "yes".
    if equal($INSTALL_CM3_IN_BIN, "yes")
      deriveds("", ["cm3cg", "cm3cg.exe"])
      write ( "Forced ship of cm3cg." & CR) 
      BindExport (AppendExeExtension ("cm3cg"))
      if DoMipsTfile
	BindExport ("mips-tfile")
      end
    else 
      write ( "Not shipping cm3cg." & CR) 
    end 
  end
end

% Omit unnecessary builds during regression testing.

PREBUILT_CM3CG = $PREBUILT_CM3CG
if ($WORKSPACE or equal($USER, "jay")) and PREBUILT_CM3CG
  CM3CG = AppendExeExtension (build_dir & "/cm3cg")
  if equal(M3_MODE, "build")
    write( "copying pre-built backend ", PREBUILT_CM3CG, " => ", CM3CG, CR )
    cp_if( PREBUILT_CM3CG, CM3CG )
  end
else

%
% configure
%

done0 = build_dir & "/.configure-done" % old version
done = build_dir & "/Makefile"

if (stale(build_dir & "/clean_marker.txt", "../src/clean_marker.txt") or defined ("FORCE"))
  foreach a in fs_lsfiles (build_dir, FALSE)
    write("rm ", a, CR)
    delete_file(a)
  end
  foreach a in fs_lsdirs (build_dir, FALSE)
    write("rm -rf ", a, CR)
    exec("rm -rf " & a)
    fs_rmrec(a)
  end
  cp_if("../src/clean_marker.txt", build_dir & "/clean_marker.txt")
end

% configure the sources
% check for non-default flags

Configure = "  "
%Configure = " -enable-build-with-cxx -enable-obsolete "

if not equal (HOST, M3CC_TARGET)
  Configure = Configure & " -with-sysroot" % should not matter
    
  %
  % This is the essential cross build step.
  %
  Configure = Configure & " -target=" & GNU_platform (M3CC_TARGET)
end

if Native % host == target == build

  %
  % Config.guess on SPARC32_LINUX yields sparc64 and m3cg
  % then just always fails with internal errors, so be explicit.
  % This is reasonable in all builds, but let us not upset that apple cart.
  % We still let host and build be guessed, leading to a typically
  % sparc64 hosted cm3cg. Actual sparc32 systems (vs. sparc64) are rare
  % (Linux kernel no longer supports such hardware) so this should be ok.
  % If we really wanted sparc32 cm3 to produce a sparc32 hosted cm3cg,
  % we could be explicit about host and/or build.
  %
 
  if {"SPARC32_LINUX","SPARC64_SOLARIS"} contains HOST
    Configure = Configure & " -target=" & GNU_platform (M3CC_TARGET)
    %Configure = Configure & " -host=" & GNU_platform (M3CC_TARGET)
    %Configure = Configure & " -build=" & GNU_platform (M3CC_TARGET)
  end
end

Configure = Configure & " -srcdir=" & SourceDir
Configure = Configure & " -disable-bootstrap"
Configure = Configure & " -disable-intl"
Configure = Configure & " -disable-libgomp"
Configure = Configure & " -disable-libmudflap"
Configure = Configure & " -disable-libssp"
Configure = Configure & " -disable-nls"
Configure = Configure & " -enable-languages=m3cg"
% less memory, old compiler
%if not {"FreeBSD4","I386_FREEBSD","PPC_DARWIN"} contains HOST
%  Configure = Configure & " -enable-checking=assert,df,fold,misc,rtl,rtlflag,runtime,tree"
%end
%if {"I386_DARWIN","AMD64_DARWIN","AMD64_LINUX","LINUXLIBC6","I386_LINUX","I386_OPENBSD"} contains HOST
%if GCC42
%   Configure = Configure & " -enable-checking=assert,fold,misc,rtl,rtlflag,runtime,tree"
%else
%   Configure = Configure & " -enable-checking=assert,df,fold,misc,rtl,rtlflag,runtime,tree,types"
%end end
% These are compatible with just building m3cg, but user might
% build gcc/cc1/libgcc here.
Configure = Configure & " -disable-fixincludes"
Configure = Configure & " -disable-libgcc"
Configure = Configure & " -disable-decimal-float"
Configure = Configure & " -disable-fixed-point"

%
% host=NT386GNU target=SPARC64_OPENBSD works.
% Native SPARC64_OPENBSD does not. -disable-tls reduces noise in comparing
% them, and we never use TLS anyway, so just disable it across the board.
%
Configure = Configure & " -disable-tls"

%
% Configure does not ferry environment variables from itself to make,
% so these must be specified on both the configure command and the make command.
%
if not Native
  env = env & " " & get_env(M3CC_TARGET)
end


ConfigureGNUMake()
write("GNU_MAKE is " & GNU_MAKE & CR)

%to get rid of most of the annoying warnings pass CFLAGS=-w to make
local MAKE_PARALLEL = " CFLAGS=-w -j4 "
%local MAKE_PARALLEL = ""

env = env & " MAKE=\"" & GNU_MAKE & MAKE_PARALLEL & " \" "

%
% Problems building gmp/mpfr:
%   Documentation is built into the source tree, leading cvs diff
%   to slowly output a LOT of extra content, not good, avoid that.
%   Automake and autoconf are causing problems building on NT, even when they are installed.
%   We do not need their results usually. Libtool is also a problem, possibly a cascade.
%
env = env & " AUTOCONF=:"
env = env & " AUTOMAKE=:"
env = env & " LEX='touch lex.yy.c'"
env = env & " MAKEINFO=:"
% so depcomp can detect Sun cc -xM as working
% seems dangerous? so we set am_cv_CC_dependencies_compiler_type instead
% env = env & " MAKE=" & M3CC_MAKE
M3CC_MAKE = M3CC_MAKE & " " & env

if not defined ("no_config")
  if not FileExists (done)
    m3cc_Run (["cd", build_dir, "&&", env, SourceDir & "/configure", M3CC_CONFIG, Configure])
  end
end

proc Sed (file0, find, replace) is
  if FileExists (file0)
    local file1 = file0 & ".1"
    m3cc_Run (["sed", "-e", "'s/" & find & "/" & replace & "/'", "<", file0, ">", file1])
    m3cc_Run (["../gcc/move-if-change", file1, file0])
  end
end


m3cc_Run (["cd " & build_dir & " && " & M3CC_MAKE & " configure-host"
  % & " | tee -a " & Log
  ])

%
% Configure is for some reason unable to find Cygwin /usr/bin/libtool?
%

if HostIsNT()
  foreach dir in ["gcc", "libcpp"]
    Sed(build_dir & "/" & dir & "/Makefile", "@LIBTOOL@", "libtool")
  end
end

if GCC47
  % remove libiconv dependency
  % after make configure-host, so as to not require patching gcc
  foreach a in ["libcpp/config.h", "gcc/auto-host.h"]
    Sed (build_dir & "/" & a, "#define HAVE_ICONV 1", "#define HAVE_ICONV 0")
  end
  foreach dir in ["libcpp", "gcc"]
    Sed (build_dir & "/" & dir & "/Makefile", "LIBICONV = -liconv", "LIBICONV = ")
  end
end

%
% Build only what is needed to build m3 backend, e.g. not the C frontend.
% User can still cd into build directory and run make to get gcc/cc1/libgcc.
%

m3cc_Run (["cd " & build_dir & " && " & M3CC_MAKE & MAKE_PARALLEL & " all-build-libiberty all-libiberty " &  extra_targets
           % & " | tee -a " & Log
          ])
%
% make just libcpp.a, do not bother with makedepend.exe
%
m3cc_Run (["cd " & build_dir & " && cd libcpp && " & M3CC_MAKE & MAKE_PARALLEL & " libcpp.a"
          % & " | tee -a " & Log
          ])
m3cc_Run (["cd " & build_dir & " && cd gcc && " & M3CC_MAKE & MAKE_PARALLEL & " s-modes insn-config.h m3cg"
          % & " | tee -a " & Log
          ])

if DoMipsTfile
  m3cc_Run (["cd " & build_dir & " && cd gcc && " & M3CC_MAKE & MAKE_PARALLEL & " mips-tfile"
            % & " | tee -a " & Log
            ])
end

postcp ()

end % prebuild
