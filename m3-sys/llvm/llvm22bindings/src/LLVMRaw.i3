(*******************************************************************************
 * This file was automatically generated by SWIG (https://www.swig.org).
 * Version 4.4.0
 *
 * Do not make changes to this file unless you know what you are doing - modify
 * the SWIG interface file instead.
*******************************************************************************)

INTERFACE LLVMRaw;


IMPORT Ctypes AS C;


IMPORT Word;


<* EXTERNAL LLVMShutdown *>
PROCEDURE Shutdown ();

<* EXTERNAL LLVMGetVersion *>
PROCEDURE GetVersion (VAR Major, Minor, Patch: C.unsigned_int; );

<* EXTERNAL LLVMCreateMessage *>
PROCEDURE CreateMessage (Message: C.char_star; ): C.char_star;

<* EXTERNAL LLVMDisposeMessage *>
PROCEDURE DisposeMessage (Message: C.char_star; );

<* EXTERNAL LLVMContextCreate *>
PROCEDURE ContextCreate (): ADDRESS;

<* EXTERNAL LLVMGetGlobalContext *>
PROCEDURE GetGlobalContext (): ADDRESS;

<* EXTERNAL LLVMContextSetDiagnosticHandler *>
PROCEDURE ContextSetDiagnosticHandler
  (C: ADDRESS; VAR Handler: ADDRESS; DiagnosticContext: ADDRESS; );

<* EXTERNAL LLVMContextGetDiagnosticHandler *>
PROCEDURE ContextGetDiagnosticHandler (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMContextGetDiagnosticContext *>
PROCEDURE ContextGetDiagnosticContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMContextSetYieldCallback *>
PROCEDURE ContextSetYieldCallback
  (C: ADDRESS; VAR Callback: ADDRESS; OpaqueHandle: ADDRESS; );

<* EXTERNAL LLVMContextShouldDiscardValueNames *>
PROCEDURE ContextShouldDiscardValueNames (C: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMContextSetDiscardValueNames *>
PROCEDURE ContextSetDiscardValueNames (C: ADDRESS; Discard: BOOLEAN; );

<* EXTERNAL LLVMContextDispose *>
PROCEDURE ContextDispose (C: ADDRESS; );

<* EXTERNAL LLVMGetDiagInfoDescription *>
PROCEDURE GetDiagInfoDescription (DI: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMGetDiagInfoSeverity *>
PROCEDURE GetDiagInfoSeverity (DI: ADDRESS; ): C.int;

<* EXTERNAL LLVMGetMDKindIDInContext *>
PROCEDURE GetMDKindIDInContext
  (C: ADDRESS; Name: C.char_star; SLen: C.unsigned_int; ): C.unsigned_int;

<* EXTERNAL LLVMGetMDKindID *>
PROCEDURE GetMDKindID (Name: C.char_star; SLen: C.unsigned_int; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetSyncScopeID *>
PROCEDURE GetSyncScopeID (C: ADDRESS; Name: C.char_star; SLen: Word.T; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetEnumAttributeKindForName *>
PROCEDURE GetEnumAttributeKindForName (Name: C.char_star; SLen: Word.T; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetLastEnumAttributeKind *>
PROCEDURE GetLastEnumAttributeKind (): C.unsigned_int;

<* EXTERNAL LLVMCreateEnumAttribute *>
PROCEDURE CreateEnumAttribute
  (C: ADDRESS; KindID: C.unsigned_int; Val: C.unsigned_long_long; ):
  ADDRESS;

<* EXTERNAL LLVMGetEnumAttributeKind *>
PROCEDURE GetEnumAttributeKind (A: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetEnumAttributeValue *>
PROCEDURE GetEnumAttributeValue (A: ADDRESS; ): C.unsigned_long_long;

<* EXTERNAL LLVMCreateTypeAttribute *>
PROCEDURE CreateTypeAttribute
  (C: ADDRESS; KindID: C.unsigned_int; type_ref: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetTypeAttributeValue *>
PROCEDURE GetTypeAttributeValue (A: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMCreateConstantRangeAttribute *>
PROCEDURE CreateConstantRangeAttribute
  (C                     : ADDRESS;
   KindID, NumBits       : C.unsigned_int;
   LowerWords, UpperWords: REF ARRAY OF C.unsigned_long_long; ): ADDRESS;

<* EXTERNAL LLVMCreateStringAttribute *>
PROCEDURE CreateStringAttribute (C      : ADDRESS;
                                 K      : C.char_star;
                                 KLength: C.unsigned_int;
                                 V      : C.char_star;
                                 VLength: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetStringAttributeKind *>
PROCEDURE GetStringAttributeKind
  (A: ADDRESS; VAR Length: C.unsigned_int; ): C.char_star;

<* EXTERNAL LLVMGetStringAttributeValue *>
PROCEDURE GetStringAttributeValue
  (A: ADDRESS; VAR Length: C.unsigned_int; ): C.char_star;

<* EXTERNAL LLVMIsEnumAttribute *>
PROCEDURE IsEnumAttribute (A: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMIsStringAttribute *>
PROCEDURE IsStringAttribute (A: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMIsTypeAttribute *>
PROCEDURE IsTypeAttribute (A: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetTypeByName2 *>
PROCEDURE GetTypeByName2 (C: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMModuleCreateWithName *>
PROCEDURE ModuleCreateWithName (ModuleID: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMModuleCreateWithNameInContext *>
PROCEDURE ModuleCreateWithNameInContext
  (ModuleID: C.char_star; C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMCloneModule *>
PROCEDURE CloneModule (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMDisposeModule *>
PROCEDURE DisposeModule (M: ADDRESS; );

<* EXTERNAL LLVMIsNewDbgInfoFormat *>
PROCEDURE IsNewDbgInfoFormat (M: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetIsNewDbgInfoFormat *>
PROCEDURE SetIsNewDbgInfoFormat (M: ADDRESS; UseNewFormat: BOOLEAN; );

<* EXTERNAL LLVMGetModuleIdentifier *>
PROCEDURE GetModuleIdentifier (M: ADDRESS; VAR Len: Word.T; ): C.char_star;

<* EXTERNAL LLVMSetModuleIdentifier *>
PROCEDURE SetModuleIdentifier
  (M: ADDRESS; Ident: C.char_star; Len: Word.T; );

<* EXTERNAL LLVMGetSourceFileName *>
PROCEDURE GetSourceFileName (M: ADDRESS; VAR Len: Word.T; ): C.char_star;

<* EXTERNAL LLVMSetSourceFileName *>
PROCEDURE SetSourceFileName (M: ADDRESS; Name: C.char_star; Len: Word.T; );

<* EXTERNAL LLVMGetDataLayoutStr *>
PROCEDURE GetDataLayoutStr (M: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMGetDataLayout *>
PROCEDURE GetDataLayout (M: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMSetDataLayout *>
PROCEDURE SetDataLayout (M: ADDRESS; DataLayoutStr: C.char_star; );

<* EXTERNAL LLVMGetTarget *>
PROCEDURE GetTarget (M: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMSetTarget *>
PROCEDURE SetTarget (M: ADDRESS; Triple: C.char_star; );

<* EXTERNAL LLVMCopyModuleFlagsMetadata *>
PROCEDURE CopyModuleFlagsMetadata (M: ADDRESS; VAR Len: Word.T; ): ADDRESS;

<* EXTERNAL LLVMDisposeModuleFlagsMetadata *>
PROCEDURE DisposeModuleFlagsMetadata (Entries: ADDRESS; );

<* EXTERNAL LLVMModuleFlagEntriesGetFlagBehavior *>
PROCEDURE ModuleFlagEntriesGetFlagBehavior
  (Entries: ADDRESS; Index: C.unsigned_int; ): C.int;

<* EXTERNAL LLVMModuleFlagEntriesGetKey *>
PROCEDURE ModuleFlagEntriesGetKey
  (Entries: ADDRESS; Index: C.unsigned_int; VAR Len: Word.T; ):
  C.char_star;

<* EXTERNAL LLVMModuleFlagEntriesGetMetadata *>
PROCEDURE ModuleFlagEntriesGetMetadata
  (Entries: ADDRESS; Index: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetModuleFlag *>
PROCEDURE GetModuleFlag (M: ADDRESS; Key: C.char_star; KeyLen: Word.T; ):
  ADDRESS;

<* EXTERNAL LLVMAddModuleFlag *>
PROCEDURE AddModuleFlag (M       : ADDRESS;
                         Behavior: C.int (* LLVMModuleFlagBehavior *);
                         Key     : C.char_star;
                         KeyLen  : Word.T;
                         Val     : ADDRESS;                            );

<* EXTERNAL LLVMDumpModule *>
PROCEDURE DumpModule (M: ADDRESS; );

<* EXTERNAL LLVMPrintModuleToFile *>
PROCEDURE PrintModuleToFile
  (M: ADDRESS; Filename: C.char_star; VAR ErrorMessage: C.char_star; ):
  BOOLEAN;

<* EXTERNAL LLVMPrintModuleToString *>
PROCEDURE PrintModuleToString (M: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMGetModuleInlineAsm *>
PROCEDURE GetModuleInlineAsm (M: ADDRESS; VAR Len: Word.T; ): C.char_star;

<* EXTERNAL LLVMSetModuleInlineAsm2 *>
PROCEDURE SetModuleInlineAsm2
  (M: ADDRESS; Asm: C.char_star; Len: Word.T; );

<* EXTERNAL LLVMAppendModuleInlineAsm *>
PROCEDURE AppendModuleInlineAsm
  (M: ADDRESS; Asm: C.char_star; Len: Word.T; );

<* EXTERNAL LLVMGetInlineAsm *>
PROCEDURE GetInlineAsm (Ty                          : ADDRESS;
                        AsmString                   : C.char_star;
                        AsmStringSize               : Word.T;
                        Constraints                 : C.char_star;
                        ConstraintsSize             : Word.T;
                        HasSideEffects, IsAlignStack: BOOLEAN;
                        Dialect : C.int (* LLVMInlineAsmDialect *);
                        CanThrow: BOOLEAN;                          ):
  ADDRESS;

<* EXTERNAL LLVMGetInlineAsmAsmString *>
PROCEDURE GetInlineAsmAsmString (InlineAsmVal: ADDRESS; VAR Len: Word.T; ):
  C.char_star;

<* EXTERNAL LLVMGetInlineAsmConstraintString *>
PROCEDURE GetInlineAsmConstraintString
  (InlineAsmVal: ADDRESS; VAR Len: Word.T; ): C.char_star;

<* EXTERNAL LLVMGetInlineAsmDialect *>
PROCEDURE GetInlineAsmDialect (InlineAsmVal: ADDRESS; ): C.int;

<* EXTERNAL LLVMGetInlineAsmFunctionType *>
PROCEDURE GetInlineAsmFunctionType (InlineAsmVal: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetInlineAsmHasSideEffects *>
PROCEDURE GetInlineAsmHasSideEffects (InlineAsmVal: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetInlineAsmNeedsAlignedStack *>
PROCEDURE GetInlineAsmNeedsAlignedStack (InlineAsmVal: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetInlineAsmCanUnwind *>
PROCEDURE GetInlineAsmCanUnwind (InlineAsmVal: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetModuleContext *>
PROCEDURE GetModuleContext (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetTypeByName *>
PROCEDURE GetTypeByName (M: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMGetFirstNamedMetadata *>
PROCEDURE GetFirstNamedMetadata (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastNamedMetadata *>
PROCEDURE GetLastNamedMetadata (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextNamedMetadata *>
PROCEDURE GetNextNamedMetadata (NamedMDNode: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousNamedMetadata *>
PROCEDURE GetPreviousNamedMetadata (NamedMDNode: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNamedMetadata *>
PROCEDURE GetNamedMetadata
  (M: ADDRESS; Name: C.char_star; NameLen: Word.T; ): ADDRESS;

<* EXTERNAL LLVMGetOrInsertNamedMetadata *>
PROCEDURE GetOrInsertNamedMetadata
  (M: ADDRESS; Name: C.char_star; NameLen: Word.T; ): ADDRESS;

<* EXTERNAL LLVMGetNamedMetadataName *>
PROCEDURE GetNamedMetadataName (NamedMD: ADDRESS; VAR NameLen: Word.T; ):
  C.char_star;

<* EXTERNAL LLVMGetNamedMetadataNumOperands *>
PROCEDURE GetNamedMetadataNumOperands (M: ADDRESS; Name: C.char_star; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetNamedMetadataOperands *>
PROCEDURE GetNamedMetadataOperands
  (M: ADDRESS; Name: C.char_star; Dest: ADDRESS; );

<* EXTERNAL LLVMAddNamedMetadataOperand *>
PROCEDURE AddNamedMetadataOperand
  (M: ADDRESS; Name: C.char_star; Val: ADDRESS; );

<* EXTERNAL LLVMGetDebugLocDirectory *>
PROCEDURE GetDebugLocDirectory
  (Val: ADDRESS; VAR Length: C.unsigned_int; ): C.char_star;

<* EXTERNAL LLVMGetDebugLocFilename *>
PROCEDURE GetDebugLocFilename (Val: ADDRESS; VAR Length: C.unsigned_int; ):
  C.char_star;

<* EXTERNAL LLVMGetDebugLocLine *>
PROCEDURE GetDebugLocLine (Val: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetDebugLocColumn *>
PROCEDURE GetDebugLocColumn (Val: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMAddFunction *>
PROCEDURE AddFunction
  (M: ADDRESS; Name: C.char_star; FunctionTy: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNamedFunction *>
PROCEDURE GetNamedFunction (M: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMGetNamedFunctionWithLength *>
PROCEDURE GetNamedFunctionWithLength
  (M: ADDRESS; Name: C.char_star; Length: Word.T; ): ADDRESS;

<* EXTERNAL LLVMGetFirstFunction *>
PROCEDURE GetFirstFunction (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastFunction *>
PROCEDURE GetLastFunction (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextFunction *>
PROCEDURE GetNextFunction (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousFunction *>
PROCEDURE GetPreviousFunction (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetModuleInlineAsm *>
PROCEDURE SetModuleInlineAsm (M: ADDRESS; Asm: C.char_star; );

<* EXTERNAL LLVMGetTypeKind *>
PROCEDURE GetTypeKind (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMTypeIsSized *>
PROCEDURE TypeIsSized (Ty: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetTypeContext *>
PROCEDURE GetTypeContext (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMDumpType *>
PROCEDURE DumpType (Val: ADDRESS; );

<* EXTERNAL LLVMPrintTypeToString *>
PROCEDURE PrintTypeToString (Val: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMInt1TypeInContext *>
PROCEDURE Int1TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMInt8TypeInContext *>
PROCEDURE Int8TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMInt16TypeInContext *>
PROCEDURE Int16TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMInt32TypeInContext *>
PROCEDURE Int32TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMInt64TypeInContext *>
PROCEDURE Int64TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMInt128TypeInContext *>
PROCEDURE Int128TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIntTypeInContext *>
PROCEDURE IntTypeInContext (C: ADDRESS; NumBits: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMInt1Type *>
PROCEDURE Int1Type (): ADDRESS;

<* EXTERNAL LLVMInt8Type *>
PROCEDURE Int8Type (): ADDRESS;

<* EXTERNAL LLVMInt16Type *>
PROCEDURE Int16Type (): ADDRESS;

<* EXTERNAL LLVMInt32Type *>
PROCEDURE Int32Type (): ADDRESS;

<* EXTERNAL LLVMInt64Type *>
PROCEDURE Int64Type (): ADDRESS;

<* EXTERNAL LLVMInt128Type *>
PROCEDURE Int128Type (): ADDRESS;

<* EXTERNAL LLVMIntType *>
PROCEDURE IntType (NumBits: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetIntTypeWidth *>
PROCEDURE GetIntTypeWidth (IntegerTy: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMHalfTypeInContext *>
PROCEDURE HalfTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBFloatTypeInContext *>
PROCEDURE BFloatTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMFloatTypeInContext *>
PROCEDURE FloatTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMDoubleTypeInContext *>
PROCEDURE DoubleTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMX86FP80TypeInContext *>
PROCEDURE X86FP80TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMFP128TypeInContext *>
PROCEDURE FP128TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMPPCFP128TypeInContext *>
PROCEDURE PPCFP128TypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMHalfType *>
PROCEDURE HalfType (): ADDRESS;

<* EXTERNAL LLVMBFloatType *>
PROCEDURE BFloatType (): ADDRESS;

<* EXTERNAL LLVMFloatType *>
PROCEDURE FloatType (): ADDRESS;

<* EXTERNAL LLVMDoubleType *>
PROCEDURE DoubleType (): ADDRESS;

<* EXTERNAL LLVMX86FP80Type *>
PROCEDURE X86FP80Type (): ADDRESS;

<* EXTERNAL LLVMFP128Type *>
PROCEDURE FP128Type (): ADDRESS;

<* EXTERNAL LLVMPPCFP128Type *>
PROCEDURE PPCFP128Type (): ADDRESS;

<* EXTERNAL LLVMFunctionType *>
PROCEDURE FunctionType (ReturnType: ADDRESS;
                        ParamTypes: ADDRESS;
                        ParamCount: C.unsigned_int;
                        IsVarArg  : BOOLEAN;        ): ADDRESS;

<* EXTERNAL LLVMIsFunctionVarArg *>
PROCEDURE IsFunctionVarArg (FunctionTy: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetReturnType *>
PROCEDURE GetReturnType (FunctionTy: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMCountParamTypes *>
PROCEDURE CountParamTypes (FunctionTy: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetParamTypes *>
PROCEDURE GetParamTypes (FunctionTy: ADDRESS; Dest: ADDRESS; );

<* EXTERNAL LLVMStructTypeInContext *>
PROCEDURE StructTypeInContext (C           : ADDRESS;
                               ElementTypes: ADDRESS;
                               ElementCount: C.unsigned_int;
                               Packed      : BOOLEAN;        ): ADDRESS;

<* EXTERNAL LLVMStructType *>
PROCEDURE StructType
  (ElementTypes: ADDRESS; ElementCount: C.unsigned_int; Packed: BOOLEAN; ):
  ADDRESS;

<* EXTERNAL LLVMStructCreateNamed *>
PROCEDURE StructCreateNamed (C: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMGetStructName *>
PROCEDURE GetStructName (Ty: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMStructSetBody *>
PROCEDURE StructSetBody (StructTy    : ADDRESS;
                         ElementTypes: ADDRESS;
                         ElementCount: C.unsigned_int;
                         Packed      : BOOLEAN;        );

<* EXTERNAL LLVMCountStructElementTypes *>
PROCEDURE CountStructElementTypes (StructTy: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetStructElementTypes *>
PROCEDURE GetStructElementTypes (StructTy: ADDRESS; Dest: ADDRESS; );

<* EXTERNAL LLVMStructGetTypeAtIndex *>
PROCEDURE StructGetTypeAtIndex (StructTy: ADDRESS; i: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMIsPackedStruct *>
PROCEDURE IsPackedStruct (StructTy: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMIsOpaqueStruct *>
PROCEDURE IsOpaqueStruct (StructTy: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMIsLiteralStruct *>
PROCEDURE IsLiteralStruct (StructTy: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetElementType *>
PROCEDURE GetElementType (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetSubtypes *>
PROCEDURE GetSubtypes (Tp: ADDRESS; Arr: ADDRESS; );

<* EXTERNAL LLVMGetNumContainedTypes *>
PROCEDURE GetNumContainedTypes (Tp: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMArrayType *>
PROCEDURE ArrayType (ElementType: ADDRESS; ElementCount: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMArrayType2 *>
PROCEDURE ArrayType2
  (ElementType: ADDRESS; ElementCount: C.unsigned_long_long; ): ADDRESS;

<* EXTERNAL LLVMGetArrayLength *>
PROCEDURE GetArrayLength (ArrayTy: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetArrayLength2 *>
PROCEDURE GetArrayLength2 (ArrayTy: ADDRESS; ): C.unsigned_long_long;

<* EXTERNAL LLVMPointerType *>
PROCEDURE PointerType
  (ElementType: ADDRESS; AddressSpace: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMPointerTypeIsOpaque *>
PROCEDURE PointerTypeIsOpaque (Ty: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMPointerTypeInContext *>
PROCEDURE PointerTypeInContext
  (C: ADDRESS; AddressSpace: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetPointerAddressSpace *>
PROCEDURE GetPointerAddressSpace (PointerTy: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMVectorType *>
PROCEDURE VectorType
  (ElementType: ADDRESS; ElementCount: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMScalableVectorType *>
PROCEDURE ScalableVectorType
  (ElementType: ADDRESS; ElementCount: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetVectorSize *>
PROCEDURE GetVectorSize (VectorTy: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetConstantPtrAuthPointer *>
PROCEDURE GetConstantPtrAuthPointer (PtrAuth: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetConstantPtrAuthKey *>
PROCEDURE GetConstantPtrAuthKey (PtrAuth: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetConstantPtrAuthDiscriminator *>
PROCEDURE GetConstantPtrAuthDiscriminator (PtrAuth: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetConstantPtrAuthAddrDiscriminator *>
PROCEDURE GetConstantPtrAuthAddrDiscriminator (PtrAuth: ADDRESS; ):
  ADDRESS;

<* EXTERNAL LLVMVoidTypeInContext *>
PROCEDURE VoidTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMLabelTypeInContext *>
PROCEDURE LabelTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMX86AMXTypeInContext *>
PROCEDURE X86AMXTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMTokenTypeInContext *>
PROCEDURE TokenTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMMetadataTypeInContext *>
PROCEDURE MetadataTypeInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMVoidType *>
PROCEDURE VoidType (): ADDRESS;

<* EXTERNAL LLVMLabelType *>
PROCEDURE LabelType (): ADDRESS;

<* EXTERNAL LLVMX86AMXType *>
PROCEDURE X86AMXType (): ADDRESS;

<* EXTERNAL LLVMTargetExtTypeInContext *>
PROCEDURE TargetExtTypeInContext (    C             : ADDRESS;
                                      Name          : C.char_star;
                                      TypeParams    : ADDRESS;
                                      TypeParamCount: C.unsigned_int;
                                  VAR IntParams     : C.unsigned_int;
                                      IntParamCount : C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMGetTargetExtTypeName *>
PROCEDURE GetTargetExtTypeName (TargetExtTy: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMGetTargetExtTypeNumTypeParams *>
PROCEDURE GetTargetExtTypeNumTypeParams (TargetExtTy: ADDRESS; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetTargetExtTypeTypeParam *>
PROCEDURE GetTargetExtTypeTypeParam
  (TargetExtTy: ADDRESS; Idx: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetTargetExtTypeNumIntParams *>
PROCEDURE GetTargetExtTypeNumIntParams (TargetExtTy: ADDRESS; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetTargetExtTypeIntParam *>
PROCEDURE GetTargetExtTypeIntParam
  (TargetExtTy: ADDRESS; Idx: C.unsigned_int; ): C.unsigned_int;

<* EXTERNAL LLVMTypeOf *>
PROCEDURE TypeOf (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetValueKind *>
PROCEDURE GetValueKind (Val: ADDRESS; ): C.int;

<* EXTERNAL LLVMGetValueName2 *>
PROCEDURE GetValueName2 (Val: ADDRESS; VAR Length: Word.T; ): C.char_star;

<* EXTERNAL LLVMSetValueName2 *>
PROCEDURE SetValueName2
  (Val: ADDRESS; Name: C.char_star; NameLen: Word.T; );

<* EXTERNAL LLVMDumpValue *>
PROCEDURE DumpValue (Val: ADDRESS; );

<* EXTERNAL LLVMPrintValueToString *>
PROCEDURE PrintValueToString (Val: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMGetValueContext *>
PROCEDURE GetValueContext (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMPrintDbgRecordToString *>
PROCEDURE PrintDbgRecordToString (Record: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMReplaceAllUsesWith *>
PROCEDURE ReplaceAllUsesWith (OldVal, NewVal: ADDRESS; );

<* EXTERNAL LLVMIsConstant *>
PROCEDURE IsConstant (Val: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMIsUndef *>
PROCEDURE IsUndef (Val: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMIsPoison *>
PROCEDURE IsPoison (Val: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMIsAArgument *>
PROCEDURE IsAArgument (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsABasicBlock *>
PROCEDURE IsABasicBlock (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAInlineAsm *>
PROCEDURE IsAInlineAsm (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAUser *>
PROCEDURE IsAUser (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstant *>
PROCEDURE IsAConstant (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsABlockAddress *>
PROCEDURE IsABlockAddress (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantAggregateZero *>
PROCEDURE IsAConstantAggregateZero (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantArray *>
PROCEDURE IsAConstantArray (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantDataSequential *>
PROCEDURE IsAConstantDataSequential (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantDataArray *>
PROCEDURE IsAConstantDataArray (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantDataVector *>
PROCEDURE IsAConstantDataVector (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantExpr *>
PROCEDURE IsAConstantExpr (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantFP *>
PROCEDURE IsAConstantFP (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantInt *>
PROCEDURE IsAConstantInt (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantPointerNull *>
PROCEDURE IsAConstantPointerNull (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantStruct *>
PROCEDURE IsAConstantStruct (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantTokenNone *>
PROCEDURE IsAConstantTokenNone (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantVector *>
PROCEDURE IsAConstantVector (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAConstantPtrAuth *>
PROCEDURE IsAConstantPtrAuth (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAGlobalValue *>
PROCEDURE IsAGlobalValue (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAGlobalAlias *>
PROCEDURE IsAGlobalAlias (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAGlobalObject *>
PROCEDURE IsAGlobalObject (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFunction *>
PROCEDURE IsAFunction (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAGlobalVariable *>
PROCEDURE IsAGlobalVariable (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAGlobalIFunc *>
PROCEDURE IsAGlobalIFunc (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAUndefValue *>
PROCEDURE IsAUndefValue (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAPoisonValue *>
PROCEDURE IsAPoisonValue (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAInstruction *>
PROCEDURE IsAInstruction (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAUnaryOperator *>
PROCEDURE IsAUnaryOperator (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsABinaryOperator *>
PROCEDURE IsABinaryOperator (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACallInst *>
PROCEDURE IsACallInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAIntrinsicInst *>
PROCEDURE IsAIntrinsicInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsADbgInfoIntrinsic *>
PROCEDURE IsADbgInfoIntrinsic (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsADbgVariableIntrinsic *>
PROCEDURE IsADbgVariableIntrinsic (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsADbgDeclareInst *>
PROCEDURE IsADbgDeclareInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsADbgLabelInst *>
PROCEDURE IsADbgLabelInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAMemIntrinsic *>
PROCEDURE IsAMemIntrinsic (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAMemCpyInst *>
PROCEDURE IsAMemCpyInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAMemMoveInst *>
PROCEDURE IsAMemMoveInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAMemSetInst *>
PROCEDURE IsAMemSetInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACmpInst *>
PROCEDURE IsACmpInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFCmpInst *>
PROCEDURE IsAFCmpInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAICmpInst *>
PROCEDURE IsAICmpInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAExtractElementInst *>
PROCEDURE IsAExtractElementInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAGetElementPtrInst *>
PROCEDURE IsAGetElementPtrInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAInsertElementInst *>
PROCEDURE IsAInsertElementInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAInsertValueInst *>
PROCEDURE IsAInsertValueInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsALandingPadInst *>
PROCEDURE IsALandingPadInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAPHINode *>
PROCEDURE IsAPHINode (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsASelectInst *>
PROCEDURE IsASelectInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAShuffleVectorInst *>
PROCEDURE IsAShuffleVectorInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAStoreInst *>
PROCEDURE IsAStoreInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsABranchInst *>
PROCEDURE IsABranchInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAIndirectBrInst *>
PROCEDURE IsAIndirectBrInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAInvokeInst *>
PROCEDURE IsAInvokeInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAReturnInst *>
PROCEDURE IsAReturnInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsASwitchInst *>
PROCEDURE IsASwitchInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAUnreachableInst *>
PROCEDURE IsAUnreachableInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAResumeInst *>
PROCEDURE IsAResumeInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACleanupReturnInst *>
PROCEDURE IsACleanupReturnInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACatchReturnInst *>
PROCEDURE IsACatchReturnInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACatchSwitchInst *>
PROCEDURE IsACatchSwitchInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACallBrInst *>
PROCEDURE IsACallBrInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFuncletPadInst *>
PROCEDURE IsAFuncletPadInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACatchPadInst *>
PROCEDURE IsACatchPadInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACleanupPadInst *>
PROCEDURE IsACleanupPadInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAUnaryInstruction *>
PROCEDURE IsAUnaryInstruction (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAAllocaInst *>
PROCEDURE IsAAllocaInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsACastInst *>
PROCEDURE IsACastInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAAddrSpaceCastInst *>
PROCEDURE IsAAddrSpaceCastInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsABitCastInst *>
PROCEDURE IsABitCastInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFPExtInst *>
PROCEDURE IsAFPExtInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFPToSIInst *>
PROCEDURE IsAFPToSIInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFPToUIInst *>
PROCEDURE IsAFPToUIInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFPTruncInst *>
PROCEDURE IsAFPTruncInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAIntToPtrInst *>
PROCEDURE IsAIntToPtrInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAPtrToIntInst *>
PROCEDURE IsAPtrToIntInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsASExtInst *>
PROCEDURE IsASExtInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsASIToFPInst *>
PROCEDURE IsASIToFPInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsATruncInst *>
PROCEDURE IsATruncInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAUIToFPInst *>
PROCEDURE IsAUIToFPInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAZExtInst *>
PROCEDURE IsAZExtInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAExtractValueInst *>
PROCEDURE IsAExtractValueInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsALoadInst *>
PROCEDURE IsALoadInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAVAArgInst *>
PROCEDURE IsAVAArgInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFreezeInst *>
PROCEDURE IsAFreezeInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAAtomicCmpXchgInst *>
PROCEDURE IsAAtomicCmpXchgInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAAtomicRMWInst *>
PROCEDURE IsAAtomicRMWInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAFenceInst *>
PROCEDURE IsAFenceInst (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAMDNode *>
PROCEDURE IsAMDNode (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAValueAsMetadata *>
PROCEDURE IsAValueAsMetadata (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsAMDString *>
PROCEDURE IsAMDString (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetValueName *>
PROCEDURE GetValueName (Val: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMSetValueName *>
PROCEDURE SetValueName (Val: ADDRESS; Name: C.char_star; );

<* EXTERNAL LLVMGetFirstUse *>
PROCEDURE GetFirstUse (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextUse *>
PROCEDURE GetNextUse (U: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetUser *>
PROCEDURE GetUser (U: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetUsedValue *>
PROCEDURE GetUsedValue (U: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetOperand *>
PROCEDURE GetOperand (Val: ADDRESS; Index: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetOperandUse *>
PROCEDURE GetOperandUse (Val: ADDRESS; Index: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMSetOperand *>
PROCEDURE SetOperand
  (User: ADDRESS; Index: C.unsigned_int; Val: ADDRESS; );

<* EXTERNAL LLVMGetNumOperands *>
PROCEDURE GetNumOperands (Val: ADDRESS; ): C.int;

<* EXTERNAL LLVMConstNull *>
PROCEDURE ConstNull (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstAllOnes *>
PROCEDURE ConstAllOnes (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetUndef *>
PROCEDURE GetUndef (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPoison *>
PROCEDURE GetPoison (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsNull *>
PROCEDURE IsNull (Val: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMConstPointerNull *>
PROCEDURE ConstPointerNull (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstInt *>
PROCEDURE ConstInt
  (IntTy: ADDRESS; N: C.unsigned_long_long; SignExtend: BOOLEAN; ):
  ADDRESS;

<* EXTERNAL LLVMConstIntOfArbitraryPrecision *>
PROCEDURE ConstIntOfArbitraryPrecision
  (IntTy   : ADDRESS;
   NumWords: C.unsigned_int;
   Words   : REF ARRAY OF C.unsigned_long_long; ): ADDRESS;

<* EXTERNAL LLVMConstIntOfString *>
PROCEDURE ConstIntOfString
  (IntTy: ADDRESS; Text: C.char_star; Radix: C.unsigned_char; ): ADDRESS;

<* EXTERNAL LLVMConstIntOfStringAndSize *>
PROCEDURE ConstIntOfStringAndSize (IntTy: ADDRESS;
                                   Text : C.char_star;
                                   SLen : C.unsigned_int;
                                   Radix: C.unsigned_char; ): ADDRESS;

<* EXTERNAL LLVMConstReal *>
PROCEDURE ConstReal (RealTy: ADDRESS; N: C.double; ): ADDRESS;

<* EXTERNAL LLVMConstRealOfString *>
PROCEDURE ConstRealOfString (RealTy: ADDRESS; Text: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMConstRealOfStringAndSize *>
PROCEDURE ConstRealOfStringAndSize
  (RealTy: ADDRESS; Text: C.char_star; SLen: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMConstIntGetZExtValue *>
PROCEDURE ConstIntGetZExtValue (ConstantVal: ADDRESS; ):
  C.unsigned_long_long;

<* EXTERNAL LLVMConstIntGetSExtValue *>
PROCEDURE ConstIntGetSExtValue (ConstantVal: ADDRESS; ): C.long_long;

<* EXTERNAL LLVMConstRealGetDouble *>
PROCEDURE ConstRealGetDouble
  (ConstantVal: ADDRESS; VAR losesInfo: BOOLEAN; ): C.double;

<* EXTERNAL LLVMConstStringInContext *>
PROCEDURE ConstStringInContext (C                : ADDRESS;
                                Str              : C.char_star;
                                Length           : C.unsigned_int;
                                DontNullTerminate: BOOLEAN;        ):
  ADDRESS;

<* EXTERNAL LLVMConstStringInContext2 *>
PROCEDURE ConstStringInContext2 (C                : ADDRESS;
                                 Str              : C.char_star;
                                 Length           : Word.T;
                                 DontNullTerminate: BOOLEAN;     ):
  ADDRESS;

<* EXTERNAL LLVMConstString *>
PROCEDURE ConstString
  (Str: C.char_star; Length: C.unsigned_int; DontNullTerminate: BOOLEAN; ):
  ADDRESS;

<* EXTERNAL LLVMIsConstantString *>
PROCEDURE IsConstantString (c: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetAsString *>
PROCEDURE GetAsString (c: ADDRESS; VAR Length: Word.T; ): C.char_star;

<* EXTERNAL LLVMGetRawDataValues *>
PROCEDURE GetRawDataValues (c: ADDRESS; VAR SizeInBytes: Word.T; ):
  C.char_star;

<* EXTERNAL LLVMConstStructInContext *>
PROCEDURE ConstStructInContext (C           : ADDRESS;
                                ConstantVals: ADDRESS;
                                Count       : C.unsigned_int;
                                Packed      : BOOLEAN;        ): ADDRESS;

<* EXTERNAL LLVMConstStruct *>
PROCEDURE ConstStruct
  (ConstantVals: ADDRESS; Count: C.unsigned_int; Packed: BOOLEAN; ):
  ADDRESS;

<* EXTERNAL LLVMConstArray *>
PROCEDURE ConstArray
  (ElementTy: ADDRESS; ConstantVals: ADDRESS; Length: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMConstArray2 *>
PROCEDURE ConstArray2 (ElementTy   : ADDRESS;
                       ConstantVals: ADDRESS;
                       Length      : C.unsigned_long_long; ): ADDRESS;

<* EXTERNAL LLVMConstDataArray *>
PROCEDURE ConstDataArray
  (ElementTy: ADDRESS; Data: C.char_star; SizeInBytes: Word.T; ): ADDRESS;

<* EXTERNAL LLVMConstNamedStruct *>
PROCEDURE ConstNamedStruct
  (StructTy: ADDRESS; ConstantVals: ADDRESS; Count: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMGetAggregateElement *>
PROCEDURE GetAggregateElement (C: ADDRESS; Idx: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMConstVector *>
PROCEDURE ConstVector
  (ScalarConstantVals: ADDRESS; Size: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMConstantPtrAuth *>
PROCEDURE ConstantPtrAuth (Ptr, Key, Disc, AddrDisc: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetConstOpcode *>
PROCEDURE GetConstOpcode (ConstantVal: ADDRESS; ): C.int;

<* EXTERNAL LLVMAlignOf *>
PROCEDURE AlignOf (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSizeOf *>
PROCEDURE SizeOf (Ty: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstNeg *>
PROCEDURE ConstNeg (ConstantVal: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstNSWNeg *>
PROCEDURE ConstNSWNeg (ConstantVal: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstNot *>
PROCEDURE ConstNot (ConstantVal: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstAdd *>
PROCEDURE ConstAdd (LHSConstant, RHSConstant: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstNSWAdd *>
PROCEDURE ConstNSWAdd (LHSConstant, RHSConstant: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstNUWAdd *>
PROCEDURE ConstNUWAdd (LHSConstant, RHSConstant: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstSub *>
PROCEDURE ConstSub (LHSConstant, RHSConstant: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstNSWSub *>
PROCEDURE ConstNSWSub (LHSConstant, RHSConstant: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstNUWSub *>
PROCEDURE ConstNUWSub (LHSConstant, RHSConstant: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstXor *>
PROCEDURE ConstXor (LHSConstant, RHSConstant: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstGEP2 *>
PROCEDURE ConstGEP2 (Ty, ConstantVal: ADDRESS;
                     ConstantIndices: ADDRESS;
                     NumIndices     : C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMConstInBoundsGEP2 *>
PROCEDURE ConstInBoundsGEP2 (Ty, ConstantVal: ADDRESS;
                             ConstantIndices: ADDRESS;
                             NumIndices     : C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMConstGEPWithNoWrapFlags *>
PROCEDURE ConstGEPWithNoWrapFlags
  (Ty, ConstantVal        : ADDRESS;
   ConstantIndices        : ADDRESS;
   NumIndices, NoWrapFlags: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMConstTrunc *>
PROCEDURE ConstTrunc (ConstantVal, ToType: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstPtrToInt *>
PROCEDURE ConstPtrToInt (ConstantVal, ToType: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstIntToPtr *>
PROCEDURE ConstIntToPtr (ConstantVal, ToType: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstBitCast *>
PROCEDURE ConstBitCast (ConstantVal, ToType: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstAddrSpaceCast *>
PROCEDURE ConstAddrSpaceCast (ConstantVal, ToType: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstTruncOrBitCast *>
PROCEDURE ConstTruncOrBitCast (ConstantVal, ToType: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstPointerCast *>
PROCEDURE ConstPointerCast (ConstantVal, ToType: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstExtractElement *>
PROCEDURE ConstExtractElement (VectorConstant, IndexConstant: ADDRESS; ):
  ADDRESS;

<* EXTERNAL LLVMConstInsertElement *>
PROCEDURE ConstInsertElement
  (VectorConstant, ElementValueConstant, IndexConstant: ADDRESS; ):
  ADDRESS;

<* EXTERNAL LLVMConstShuffleVector *>
PROCEDURE ConstShuffleVector
  (VectorAConstant, VectorBConstant, MaskConstant: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBlockAddress *>
PROCEDURE BlockAddress (F, BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetBlockAddressFunction *>
PROCEDURE GetBlockAddressFunction (BlockAddr: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetBlockAddressBasicBlock *>
PROCEDURE GetBlockAddressBasicBlock (BlockAddr: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMConstInlineAsm *>
PROCEDURE ConstInlineAsm (Ty                          : ADDRESS;
                          AsmString, Constraints      : C.char_star;
                          HasSideEffects, IsAlignStack: BOOLEAN;     ):
  ADDRESS;

<* EXTERNAL LLVMGetGlobalParent *>
PROCEDURE GetGlobalParent (Global: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsDeclaration *>
PROCEDURE IsDeclaration (Global: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetLinkage *>
PROCEDURE GetLinkage (Global: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetLinkage *>
PROCEDURE SetLinkage (Global: ADDRESS; Linkage: C.int (* LLVMLinkage *); );

<* EXTERNAL LLVMGetSection *>
PROCEDURE GetSection (Global: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMSetSection *>
PROCEDURE SetSection (Global: ADDRESS; Section: C.char_star; );

<* EXTERNAL LLVMGetVisibility *>
PROCEDURE GetVisibility (Global: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetVisibility *>
PROCEDURE SetVisibility
  (Global: ADDRESS; Viz: C.int (* LLVMVisibility *); );

<* EXTERNAL LLVMGetDLLStorageClass *>
PROCEDURE GetDLLStorageClass (Global: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetDLLStorageClass *>
PROCEDURE SetDLLStorageClass
  (Global: ADDRESS; Class: C.int (* LLVMDLLStorageClass *); );

<* EXTERNAL LLVMGetUnnamedAddress *>
PROCEDURE GetUnnamedAddress (Global: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetUnnamedAddress *>
PROCEDURE SetUnnamedAddress
  (Global: ADDRESS; UnnamedAddr: C.int (* LLVMUnnamedAddr *); );

<* EXTERNAL LLVMGlobalGetValueType *>
PROCEDURE GlobalGetValueType (Global: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMHasUnnamedAddr *>
PROCEDURE HasUnnamedAddr (Global: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetUnnamedAddr *>
PROCEDURE SetUnnamedAddr (Global: ADDRESS; HasUnnamedAddr: BOOLEAN; );

<* EXTERNAL LLVMGetAlignment *>
PROCEDURE GetAlignment (V: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMSetAlignment *>
PROCEDURE SetAlignment (V: ADDRESS; Bytes: C.unsigned_int; );

<* EXTERNAL LLVMGlobalSetMetadata *>
PROCEDURE GlobalSetMetadata
  (Global: ADDRESS; Kind: C.unsigned_int; MD: ADDRESS; );

<* EXTERNAL LLVMGlobalAddMetadata *>
PROCEDURE GlobalAddMetadata
  (Global: ADDRESS; Kind: C.unsigned_int; MD: ADDRESS; );

<* EXTERNAL LLVMGlobalEraseMetadata *>
PROCEDURE GlobalEraseMetadata (Global: ADDRESS; Kind: C.unsigned_int; );

<* EXTERNAL LLVMGlobalClearMetadata *>
PROCEDURE GlobalClearMetadata (Global: ADDRESS; );

<* EXTERNAL LLVMGlobalAddDebugInfo *>
PROCEDURE GlobalAddDebugInfo (Global, GVE: ADDRESS; );

<* EXTERNAL LLVMGlobalCopyAllMetadata *>
PROCEDURE GlobalCopyAllMetadata (Value: ADDRESS; VAR NumEntries: Word.T; ):
  ADDRESS;

<* EXTERNAL LLVMDisposeValueMetadataEntries *>
PROCEDURE DisposeValueMetadataEntries (Entries: ADDRESS; );

<* EXTERNAL LLVMValueMetadataEntriesGetKind *>
PROCEDURE ValueMetadataEntriesGetKind
  (Entries: ADDRESS; Index: C.unsigned_int; ): C.unsigned_int;

<* EXTERNAL LLVMValueMetadataEntriesGetMetadata *>
PROCEDURE ValueMetadataEntriesGetMetadata
  (Entries: ADDRESS; Index: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMAddGlobal *>
PROCEDURE AddGlobal (M, Ty: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMAddGlobalInAddressSpace *>
PROCEDURE AddGlobalInAddressSpace
  (M, Ty: ADDRESS; Name: C.char_star; AddressSpace: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMGetNamedGlobal *>
PROCEDURE GetNamedGlobal (M: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMGetNamedGlobalWithLength *>
PROCEDURE GetNamedGlobalWithLength
  (M: ADDRESS; Name: C.char_star; Length: Word.T; ): ADDRESS;

<* EXTERNAL LLVMGetFirstGlobal *>
PROCEDURE GetFirstGlobal (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastGlobal *>
PROCEDURE GetLastGlobal (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextGlobal *>
PROCEDURE GetNextGlobal (GlobalVar: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousGlobal *>
PROCEDURE GetPreviousGlobal (GlobalVar: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMDeleteGlobal *>
PROCEDURE DeleteGlobal (GlobalVar: ADDRESS; );

<* EXTERNAL LLVMGetInitializer *>
PROCEDURE GetInitializer (GlobalVar: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetInitializer *>
PROCEDURE SetInitializer (GlobalVar, ConstantVal: ADDRESS; );

<* EXTERNAL LLVMIsThreadLocal *>
PROCEDURE IsThreadLocal (GlobalVar: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetThreadLocal *>
PROCEDURE SetThreadLocal (GlobalVar: ADDRESS; IsThreadLocal: BOOLEAN; );

<* EXTERNAL LLVMIsGlobalConstant *>
PROCEDURE IsGlobalConstant (GlobalVar: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetGlobalConstant *>
PROCEDURE SetGlobalConstant (GlobalVar: ADDRESS; IsConstant: BOOLEAN; );

<* EXTERNAL LLVMGetThreadLocalMode *>
PROCEDURE GetThreadLocalMode (GlobalVar: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetThreadLocalMode *>
PROCEDURE SetThreadLocalMode
  (GlobalVar: ADDRESS; Mode: C.int (* LLVMThreadLocalMode *); );

<* EXTERNAL LLVMIsExternallyInitialized *>
PROCEDURE IsExternallyInitialized (GlobalVar: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetExternallyInitialized *>
PROCEDURE SetExternallyInitialized
  (GlobalVar: ADDRESS; IsExtInit: BOOLEAN; );

<* EXTERNAL LLVMAddAlias2 *>
PROCEDURE AddAlias2 (M, ValueTy: ADDRESS;
                     AddrSpace : C.unsigned_int;
                     Aliasee   : ADDRESS;
                     Name      : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMGetNamedGlobalAlias *>
PROCEDURE GetNamedGlobalAlias
  (M: ADDRESS; Name: C.char_star; NameLen: Word.T; ): ADDRESS;

<* EXTERNAL LLVMGetFirstGlobalAlias *>
PROCEDURE GetFirstGlobalAlias (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastGlobalAlias *>
PROCEDURE GetLastGlobalAlias (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextGlobalAlias *>
PROCEDURE GetNextGlobalAlias (GA: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousGlobalAlias *>
PROCEDURE GetPreviousGlobalAlias (GA: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMAliasGetAliasee *>
PROCEDURE AliasGetAliasee (Alias: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMAliasSetAliasee *>
PROCEDURE AliasSetAliasee (Alias, Aliasee: ADDRESS; );

<* EXTERNAL LLVMDeleteFunction *>
PROCEDURE DeleteFunction (Fn: ADDRESS; );

<* EXTERNAL LLVMHasPersonalityFn *>
PROCEDURE HasPersonalityFn (Fn: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetPersonalityFn *>
PROCEDURE GetPersonalityFn (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetPersonalityFn *>
PROCEDURE SetPersonalityFn (Fn, PersonalityFn: ADDRESS; );

<* EXTERNAL LLVMLookupIntrinsicID *>
PROCEDURE LookupIntrinsicID (Name: C.char_star; NameLen: Word.T; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetIntrinsicID *>
PROCEDURE GetIntrinsicID (Fn: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetIntrinsicDeclaration *>
PROCEDURE GetIntrinsicDeclaration (Mod       : ADDRESS;
                                   ID        : C.unsigned_int;
                                   ParamTypes: ADDRESS;
                                   ParamCount: Word.T;         ): ADDRESS;

<* EXTERNAL LLVMIntrinsicGetType *>
PROCEDURE IntrinsicGetType (Ctx       : ADDRESS;
                            ID        : C.unsigned_int;
                            ParamTypes: ADDRESS;
                            ParamCount: Word.T;         ): ADDRESS;

<* EXTERNAL LLVMIntrinsicGetName *>
PROCEDURE IntrinsicGetName (ID: C.unsigned_int; VAR NameLength: Word.T; ):
  C.char_star;

<* EXTERNAL LLVMIntrinsicCopyOverloadedName *>
PROCEDURE IntrinsicCopyOverloadedName (    ID        : C.unsigned_int;
                                           ParamTypes: ADDRESS;
                                           ParamCount: Word.T;
                                       VAR NameLength: Word.T;         ):
  C.char_star;

<* EXTERNAL LLVMIntrinsicCopyOverloadedName2 *>
PROCEDURE IntrinsicCopyOverloadedName2 (    Mod       : ADDRESS;
                                            ID        : C.unsigned_int;
                                            ParamTypes: ADDRESS;
                                            ParamCount: Word.T;
                                        VAR NameLength: Word.T;         ):
  C.char_star;

<* EXTERNAL LLVMIntrinsicIsOverloaded *>
PROCEDURE IntrinsicIsOverloaded (ID: C.unsigned_int; ): BOOLEAN;

<* EXTERNAL LLVMGetFunctionCallConv *>
PROCEDURE GetFunctionCallConv (Fn: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMSetFunctionCallConv *>
PROCEDURE SetFunctionCallConv (Fn: ADDRESS; CC: C.unsigned_int; );

<* EXTERNAL LLVMGetGC *>
PROCEDURE GetGC (Fn: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMSetGC *>
PROCEDURE SetGC (Fn: ADDRESS; Name: C.char_star; );

<* EXTERNAL LLVMGetPrefixData *>
PROCEDURE GetPrefixData (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMHasPrefixData *>
PROCEDURE HasPrefixData (Fn: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetPrefixData *>
PROCEDURE SetPrefixData (Fn, prefixData: ADDRESS; );

<* EXTERNAL LLVMGetPrologueData *>
PROCEDURE GetPrologueData (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMHasPrologueData *>
PROCEDURE HasPrologueData (Fn: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetPrologueData *>
PROCEDURE SetPrologueData (Fn, prologueData: ADDRESS; );

<* EXTERNAL LLVMAddAttributeAtIndex *>
PROCEDURE AddAttributeAtIndex (F: ADDRESS; Idx: Word.T; A: ADDRESS; );

<* EXTERNAL LLVMGetAttributeCountAtIndex *>
PROCEDURE GetAttributeCountAtIndex (F: ADDRESS; Idx: Word.T; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetAttributesAtIndex *>
PROCEDURE GetAttributesAtIndex (F: ADDRESS; Idx: Word.T; Attrs: ADDRESS; );

<* EXTERNAL LLVMGetEnumAttributeAtIndex *>
PROCEDURE GetEnumAttributeAtIndex
  (F: ADDRESS; Idx: Word.T; KindID: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetStringAttributeAtIndex *>
PROCEDURE GetStringAttributeAtIndex
  (F: ADDRESS; Idx: Word.T; K: C.char_star; KLen: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMRemoveEnumAttributeAtIndex *>
PROCEDURE RemoveEnumAttributeAtIndex
  (F: ADDRESS; Idx: Word.T; KindID: C.unsigned_int; );

<* EXTERNAL LLVMRemoveStringAttributeAtIndex *>
PROCEDURE RemoveStringAttributeAtIndex
  (F: ADDRESS; Idx: Word.T; K: C.char_star; KLen: C.unsigned_int; );

<* EXTERNAL LLVMAddTargetDependentFunctionAttr *>
PROCEDURE AddTargetDependentFunctionAttr
  (Fn: ADDRESS; A, V: C.char_star; );

<* EXTERNAL LLVMCountParams *>
PROCEDURE CountParams (Fn: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetParams *>
PROCEDURE GetParams (Fn: ADDRESS; Params: ADDRESS; );

<* EXTERNAL LLVMGetParam *>
PROCEDURE GetParam (Fn: ADDRESS; Index: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetParamParent *>
PROCEDURE GetParamParent (Inst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetFirstParam *>
PROCEDURE GetFirstParam (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastParam *>
PROCEDURE GetLastParam (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextParam *>
PROCEDURE GetNextParam (Arg: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousParam *>
PROCEDURE GetPreviousParam (Arg: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetParamAlignment *>
PROCEDURE SetParamAlignment (Arg: ADDRESS; Align: C.unsigned_int; );

<* EXTERNAL LLVMAddGlobalIFunc *>
PROCEDURE AddGlobalIFunc (M        : ADDRESS;
                          Name     : C.char_star;
                          NameLen  : Word.T;
                          Ty       : ADDRESS;
                          AddrSpace: C.unsigned_int;
                          Resolver : ADDRESS;        ): ADDRESS;

<* EXTERNAL LLVMGetNamedGlobalIFunc *>
PROCEDURE GetNamedGlobalIFunc
  (M: ADDRESS; Name: C.char_star; NameLen: Word.T; ): ADDRESS;

<* EXTERNAL LLVMGetFirstGlobalIFunc *>
PROCEDURE GetFirstGlobalIFunc (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastGlobalIFunc *>
PROCEDURE GetLastGlobalIFunc (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextGlobalIFunc *>
PROCEDURE GetNextGlobalIFunc (IFunc: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousGlobalIFunc *>
PROCEDURE GetPreviousGlobalIFunc (IFunc: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetGlobalIFuncResolver *>
PROCEDURE GetGlobalIFuncResolver (IFunc: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetGlobalIFuncResolver *>
PROCEDURE SetGlobalIFuncResolver (IFunc, Resolver: ADDRESS; );

<* EXTERNAL LLVMEraseGlobalIFunc *>
PROCEDURE EraseGlobalIFunc (IFunc: ADDRESS; );

<* EXTERNAL LLVMRemoveGlobalIFunc *>
PROCEDURE RemoveGlobalIFunc (IFunc: ADDRESS; );

<* EXTERNAL LLVMMDStringInContext2 *>
PROCEDURE MDStringInContext2
  (C: ADDRESS; Str: C.char_star; SLen: Word.T; ): ADDRESS;

<* EXTERNAL LLVMMDNodeInContext2 *>
PROCEDURE MDNodeInContext2 (C: ADDRESS; MDs: ADDRESS; Count: Word.T; ):
  ADDRESS;

<* EXTERNAL LLVMMetadataAsValue *>
PROCEDURE MetadataAsValue (C, MD: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMValueAsMetadata *>
PROCEDURE ValueAsMetadata (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetMDString *>
PROCEDURE GetMDString (V: ADDRESS; VAR Length: C.unsigned_int; ):
  C.char_star;

<* EXTERNAL LLVMGetMDNodeNumOperands *>
PROCEDURE GetMDNodeNumOperands (V: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetMDNodeOperands *>
PROCEDURE GetMDNodeOperands (V: ADDRESS; Dest: ADDRESS; );

<* EXTERNAL LLVMReplaceMDNodeOperandWith *>
PROCEDURE ReplaceMDNodeOperandWith
  (V: ADDRESS; Index: C.unsigned_int; Replacement: ADDRESS; );

<* EXTERNAL LLVMMDStringInContext *>
PROCEDURE MDStringInContext
  (C: ADDRESS; Str: C.char_star; SLen: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMMDString *>
PROCEDURE MDString (Str: C.char_star; SLen: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMMDNodeInContext *>
PROCEDURE MDNodeInContext
  (C: ADDRESS; Vals: ADDRESS; Count: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMMDNode *>
PROCEDURE MDNode (Vals: ADDRESS; Count: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMCreateOperandBundle *>
PROCEDURE CreateOperandBundle (Tag    : C.char_star;
                               TagLen : Word.T;
                               Args   : ADDRESS;
                               NumArgs: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMDisposeOperandBundle *>
PROCEDURE DisposeOperandBundle (Bundle: ADDRESS; );

<* EXTERNAL LLVMGetOperandBundleTag *>
PROCEDURE GetOperandBundleTag (Bundle: ADDRESS; VAR Len: Word.T; ):
  C.char_star;

<* EXTERNAL LLVMGetNumOperandBundleArgs *>
PROCEDURE GetNumOperandBundleArgs (Bundle: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetOperandBundleArgAtIndex *>
PROCEDURE GetOperandBundleArgAtIndex
  (Bundle: ADDRESS; Index: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMBasicBlockAsValue *>
PROCEDURE BasicBlockAsValue (BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMValueIsBasicBlock *>
PROCEDURE ValueIsBasicBlock (Val: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMValueAsBasicBlock *>
PROCEDURE ValueAsBasicBlock (Val: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetBasicBlockName *>
PROCEDURE GetBasicBlockName (BB: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMGetBasicBlockParent *>
PROCEDURE GetBasicBlockParent (BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetBasicBlockTerminator *>
PROCEDURE GetBasicBlockTerminator (BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMCountBasicBlocks *>
PROCEDURE CountBasicBlocks (Fn: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetBasicBlocks *>
PROCEDURE GetBasicBlocks (Fn: ADDRESS; BasicBlocks: ADDRESS; );

<* EXTERNAL LLVMGetFirstBasicBlock *>
PROCEDURE GetFirstBasicBlock (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastBasicBlock *>
PROCEDURE GetLastBasicBlock (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextBasicBlock *>
PROCEDURE GetNextBasicBlock (BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousBasicBlock *>
PROCEDURE GetPreviousBasicBlock (BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetEntryBasicBlock *>
PROCEDURE GetEntryBasicBlock (Fn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMInsertExistingBasicBlockAfterInsertBlock *>
PROCEDURE InsertExistingBasicBlockAfterInsertBlock
  (Builder, BB: ADDRESS; );

<* EXTERNAL LLVMAppendExistingBasicBlock *>
PROCEDURE AppendExistingBasicBlock (Fn, BB: ADDRESS; );

<* EXTERNAL LLVMCreateBasicBlockInContext *>
PROCEDURE CreateBasicBlockInContext (C: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMAppendBasicBlockInContext *>
PROCEDURE AppendBasicBlockInContext (C, Fn: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMAppendBasicBlock *>
PROCEDURE AppendBasicBlock (Fn: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMInsertBasicBlockInContext *>
PROCEDURE InsertBasicBlockInContext (C, BB: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMInsertBasicBlock *>
PROCEDURE InsertBasicBlock (InsertBeforeBB: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMDeleteBasicBlock *>
PROCEDURE DeleteBasicBlock (BB: ADDRESS; );

<* EXTERNAL LLVMRemoveBasicBlockFromParent *>
PROCEDURE RemoveBasicBlockFromParent (BB: ADDRESS; );

<* EXTERNAL LLVMMoveBasicBlockBefore *>
PROCEDURE MoveBasicBlockBefore (BB, MovePos: ADDRESS; );

<* EXTERNAL LLVMMoveBasicBlockAfter *>
PROCEDURE MoveBasicBlockAfter (BB, MovePos: ADDRESS; );

<* EXTERNAL LLVMGetFirstInstruction *>
PROCEDURE GetFirstInstruction (BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastInstruction *>
PROCEDURE GetLastInstruction (BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMHasMetadata *>
PROCEDURE HasMetadata (Val: ADDRESS; ): C.int;

<* EXTERNAL LLVMGetMetadata *>
PROCEDURE GetMetadata (Val: ADDRESS; KindID: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMSetMetadata *>
PROCEDURE SetMetadata
  (Val: ADDRESS; KindID: C.unsigned_int; Node: ADDRESS; );

<* EXTERNAL LLVMInstructionGetAllMetadataOtherThanDebugLoc *>
PROCEDURE InstructionGetAllMetadataOtherThanDebugLoc
  (Instr: ADDRESS; VAR NumEntries: Word.T; ): ADDRESS;

<* EXTERNAL LLVMGetInstructionParent *>
PROCEDURE GetInstructionParent (Inst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextInstruction *>
PROCEDURE GetNextInstruction (Inst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousInstruction *>
PROCEDURE GetPreviousInstruction (Inst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMInstructionRemoveFromParent *>
PROCEDURE InstructionRemoveFromParent (Inst: ADDRESS; );

<* EXTERNAL LLVMInstructionEraseFromParent *>
PROCEDURE InstructionEraseFromParent (Inst: ADDRESS; );

<* EXTERNAL LLVMDeleteInstruction *>
PROCEDURE DeleteInstruction (Inst: ADDRESS; );

<* EXTERNAL LLVMGetInstructionOpcode *>
PROCEDURE GetInstructionOpcode (Inst: ADDRESS; ): C.int;

<* EXTERNAL LLVMGetICmpPredicate *>
PROCEDURE GetICmpPredicate (Inst: ADDRESS; ): C.int;

<* EXTERNAL LLVMGetICmpSameSign *>
PROCEDURE GetICmpSameSign (Inst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetICmpSameSign *>
PROCEDURE SetICmpSameSign (Inst: ADDRESS; SameSign: BOOLEAN; );

<* EXTERNAL LLVMGetFCmpPredicate *>
PROCEDURE GetFCmpPredicate (Inst: ADDRESS; ): C.int;

<* EXTERNAL LLVMInstructionClone *>
PROCEDURE InstructionClone (Inst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsATerminatorInst *>
PROCEDURE IsATerminatorInst (Inst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetFirstDbgRecord *>
PROCEDURE GetFirstDbgRecord (Inst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetLastDbgRecord *>
PROCEDURE GetLastDbgRecord (Inst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNextDbgRecord *>
PROCEDURE GetNextDbgRecord (DbgRecord: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetPreviousDbgRecord *>
PROCEDURE GetPreviousDbgRecord (DbgRecord: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNumArgOperands *>
PROCEDURE GetNumArgOperands (Instr: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMSetInstructionCallConv *>
PROCEDURE SetInstructionCallConv (Instr: ADDRESS; CC: C.unsigned_int; );

<* EXTERNAL LLVMGetInstructionCallConv *>
PROCEDURE GetInstructionCallConv (Instr: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMSetInstrParamAlignment *>
PROCEDURE SetInstrParamAlignment
  (Instr: ADDRESS; Idx: Word.T; Align: C.unsigned_int; );

<* EXTERNAL LLVMAddCallSiteAttribute *>
PROCEDURE AddCallSiteAttribute (C: ADDRESS; Idx: Word.T; A: ADDRESS; );

<* EXTERNAL LLVMGetCallSiteAttributeCount *>
PROCEDURE GetCallSiteAttributeCount (C: ADDRESS; Idx: Word.T; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetCallSiteAttributes *>
PROCEDURE GetCallSiteAttributes
  (C: ADDRESS; Idx: Word.T; Attrs: ADDRESS; );

<* EXTERNAL LLVMGetCallSiteEnumAttribute *>
PROCEDURE GetCallSiteEnumAttribute
  (C: ADDRESS; Idx: Word.T; KindID: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMGetCallSiteStringAttribute *>
PROCEDURE GetCallSiteStringAttribute
  (C: ADDRESS; Idx: Word.T; K: C.char_star; KLen: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMRemoveCallSiteEnumAttribute *>
PROCEDURE RemoveCallSiteEnumAttribute
  (C: ADDRESS; Idx: Word.T; KindID: C.unsigned_int; );

<* EXTERNAL LLVMRemoveCallSiteStringAttribute *>
PROCEDURE RemoveCallSiteStringAttribute
  (C: ADDRESS; Idx: Word.T; K: C.char_star; KLen: C.unsigned_int; );

<* EXTERNAL LLVMGetCalledFunctionType *>
PROCEDURE GetCalledFunctionType (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetCalledValue *>
PROCEDURE GetCalledValue (Instr: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetNumOperandBundles *>
PROCEDURE GetNumOperandBundles (C: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetOperandBundleAtIndex *>
PROCEDURE GetOperandBundleAtIndex (C: ADDRESS; Index: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMIsTailCall *>
PROCEDURE IsTailCall (CallInst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetTailCall *>
PROCEDURE SetTailCall (CallInst: ADDRESS; IsTailCall: BOOLEAN; );

<* EXTERNAL LLVMGetTailCallKind *>
PROCEDURE GetTailCallKind (CallInst: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetTailCallKind *>
PROCEDURE SetTailCallKind
  (CallInst: ADDRESS; kind: C.int (* LLVMTailCallKind *); );

<* EXTERNAL LLVMGetNormalDest *>
PROCEDURE GetNormalDest (InvokeInst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetUnwindDest *>
PROCEDURE GetUnwindDest (InvokeInst: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetNormalDest *>
PROCEDURE SetNormalDest (InvokeInst, B: ADDRESS; );

<* EXTERNAL LLVMSetUnwindDest *>
PROCEDURE SetUnwindDest (InvokeInst, B: ADDRESS; );

<* EXTERNAL LLVMGetCallBrDefaultDest *>
PROCEDURE GetCallBrDefaultDest (CallBr: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetCallBrNumIndirectDests *>
PROCEDURE GetCallBrNumIndirectDests (CallBr: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetCallBrIndirectDest *>
PROCEDURE GetCallBrIndirectDest (CallBr: ADDRESS; Idx: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMGetNumSuccessors *>
PROCEDURE GetNumSuccessors (Term: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetSuccessor *>
PROCEDURE GetSuccessor (Term: ADDRESS; i: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMSetSuccessor *>
PROCEDURE SetSuccessor
  (Term: ADDRESS; i: C.unsigned_int; block: ADDRESS; );

<* EXTERNAL LLVMIsConditional *>
PROCEDURE IsConditional (Branch: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetCondition *>
PROCEDURE GetCondition (Branch: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetCondition *>
PROCEDURE SetCondition (Branch, Cond: ADDRESS; );

<* EXTERNAL LLVMGetSwitchDefaultDest *>
PROCEDURE GetSwitchDefaultDest (SwitchInstr: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetAllocatedType *>
PROCEDURE GetAllocatedType (Alloca: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIsInBounds *>
PROCEDURE IsInBounds (GEP: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetIsInBounds *>
PROCEDURE SetIsInBounds (GEP: ADDRESS; InBounds: BOOLEAN; );

<* EXTERNAL LLVMGetGEPSourceElementType *>
PROCEDURE GetGEPSourceElementType (GEP: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGEPGetNoWrapFlags *>
PROCEDURE GEPGetNoWrapFlags (GEP: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGEPSetNoWrapFlags *>
PROCEDURE GEPSetNoWrapFlags (GEP: ADDRESS; NoWrapFlags: C.unsigned_int; );

<* EXTERNAL LLVMAddIncoming *>
PROCEDURE AddIncoming (PhiNode                       : ADDRESS;
                       IncomingValues, IncomingBlocks: ADDRESS;
                       Count                         : C.unsigned_int; );

<* EXTERNAL LLVMCountIncoming *>
PROCEDURE CountIncoming (PhiNode: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetIncomingValue *>
PROCEDURE GetIncomingValue (PhiNode: ADDRESS; Index: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMGetIncomingBlock *>
PROCEDURE GetIncomingBlock (PhiNode: ADDRESS; Index: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMGetNumIndices *>
PROCEDURE GetNumIndices (Inst: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetIndices *>
PROCEDURE GetIndices (Inst: ADDRESS; ): UNTRACED REF C.unsigned_int;

<* EXTERNAL LLVMCreateBuilderInContext *>
PROCEDURE CreateBuilderInContext (C: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMCreateBuilder *>
PROCEDURE CreateBuilder (): ADDRESS;

<* EXTERNAL LLVMPositionBuilder *>
PROCEDURE PositionBuilder (Builder, Block, Instr: ADDRESS; );

<* EXTERNAL LLVMPositionBuilderBeforeDbgRecords *>
PROCEDURE PositionBuilderBeforeDbgRecords
  (Builder, Block, Inst: ADDRESS; );

<* EXTERNAL LLVMPositionBuilderBefore *>
PROCEDURE PositionBuilderBefore (Builder, Instr: ADDRESS; );

<* EXTERNAL LLVMPositionBuilderBeforeInstrAndDbgRecords *>
PROCEDURE PositionBuilderBeforeInstrAndDbgRecords
  (Builder, Instr: ADDRESS; );

<* EXTERNAL LLVMPositionBuilderAtEnd *>
PROCEDURE PositionBuilderAtEnd (Builder, Block: ADDRESS; );

<* EXTERNAL LLVMGetInsertBlock *>
PROCEDURE GetInsertBlock (Builder: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMClearInsertionPosition *>
PROCEDURE ClearInsertionPosition (Builder: ADDRESS; );

<* EXTERNAL LLVMInsertIntoBuilder *>
PROCEDURE InsertIntoBuilder (Builder, Instr: ADDRESS; );

<* EXTERNAL LLVMInsertIntoBuilderWithName *>
PROCEDURE InsertIntoBuilderWithName
  (Builder, Instr: ADDRESS; Name: C.char_star; );

<* EXTERNAL LLVMDisposeBuilder *>
PROCEDURE DisposeBuilder (Builder: ADDRESS; );

<* EXTERNAL LLVMGetCurrentDebugLocation2 *>
PROCEDURE GetCurrentDebugLocation2 (Builder: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetCurrentDebugLocation2 *>
PROCEDURE SetCurrentDebugLocation2 (Builder, Loc: ADDRESS; );

<* EXTERNAL LLVMSetInstDebugLocation *>
PROCEDURE SetInstDebugLocation (Builder, Inst: ADDRESS; );

<* EXTERNAL LLVMAddMetadataToInst *>
PROCEDURE AddMetadataToInst (Builder, Inst: ADDRESS; );

<* EXTERNAL LLVMBuilderGetDefaultFPMathTag *>
PROCEDURE BuilderGetDefaultFPMathTag (Builder: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuilderSetDefaultFPMathTag *>
PROCEDURE BuilderSetDefaultFPMathTag (Builder, FPMathTag: ADDRESS; );

<* EXTERNAL LLVMGetBuilderContext *>
PROCEDURE GetBuilderContext (Builder: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetCurrentDebugLocation *>
PROCEDURE SetCurrentDebugLocation (Builder, L: ADDRESS; );

<* EXTERNAL LLVMGetCurrentDebugLocation *>
PROCEDURE GetCurrentDebugLocation (Builder: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildRetVoid *>
PROCEDURE BuildRetVoid (arg1: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildRet *>
PROCEDURE BuildRet (arg1, V: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildAggregateRet *>
PROCEDURE BuildAggregateRet
  (arg1: ADDRESS; RetVals: ADDRESS; N: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMBuildBr *>
PROCEDURE BuildBr (arg1, Dest: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildCondBr *>
PROCEDURE BuildCondBr (arg1, If, Then, Else: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildSwitch *>
PROCEDURE BuildSwitch (arg1, V, Else: ADDRESS; NumCases: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMBuildIndirectBr *>
PROCEDURE BuildIndirectBr (B, Addr: ADDRESS; NumDests: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMBuildCallBr *>
PROCEDURE BuildCallBr (B, Ty, Fn, DefaultDest: ADDRESS;
                       IndirectDests         : ADDRESS;
                       NumIndirectDests      : C.unsigned_int;
                       Args                  : ADDRESS;
                       NumArgs               : C.unsigned_int;
                       Bundles               : ADDRESS;
                       NumBundles            : C.unsigned_int;
                       Name                  : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMBuildInvoke2 *>
PROCEDURE BuildInvoke2 (arg1, Ty, Fn: ADDRESS;
                        Args        : ADDRESS;
                        NumArgs     : C.unsigned_int;
                        Then, Catch : ADDRESS;
                        Name        : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMBuildInvokeWithOperandBundles *>
PROCEDURE BuildInvokeWithOperandBundles (arg1, Ty, Fn: ADDRESS;
                                         Args        : ADDRESS;
                                         NumArgs     : C.unsigned_int;
                                         Then, Catch : ADDRESS;
                                         Bundles     : ADDRESS;
                                         NumBundles  : C.unsigned_int;
                                         Name        : C.char_star;    ):
  ADDRESS;

<* EXTERNAL LLVMBuildUnreachable *>
PROCEDURE BuildUnreachable (arg1: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildResume *>
PROCEDURE BuildResume (B, Exn: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildLandingPad *>
PROCEDURE BuildLandingPad (B, Ty, PersFn: ADDRESS;
                           NumClauses   : C.unsigned_int;
                           Name         : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMBuildCleanupRet *>
PROCEDURE BuildCleanupRet (B, CatchPad, BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildCatchRet *>
PROCEDURE BuildCatchRet (B, CatchPad, BB: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildCatchPad *>
PROCEDURE BuildCatchPad (B, ParentPad: ADDRESS;
                         Args        : ADDRESS;
                         NumArgs     : C.unsigned_int;
                         Name        : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMBuildCleanupPad *>
PROCEDURE BuildCleanupPad (B, ParentPad: ADDRESS;
                           Args        : ADDRESS;
                           NumArgs     : C.unsigned_int;
                           Name        : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMBuildCatchSwitch *>
PROCEDURE BuildCatchSwitch (B, ParentPad, UnwindBB: ADDRESS;
                            NumHandlers           : C.unsigned_int;
                            Name                  : C.char_star;    ):
  ADDRESS;

<* EXTERNAL LLVMAddCase *>
PROCEDURE AddCase (Switch, OnVal, Dest: ADDRESS; );

<* EXTERNAL LLVMAddDestination *>
PROCEDURE AddDestination (IndirectBr, Dest: ADDRESS; );

<* EXTERNAL LLVMGetNumClauses *>
PROCEDURE GetNumClauses (LandingPad: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetClause *>
PROCEDURE GetClause (LandingPad: ADDRESS; Idx: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMAddClause *>
PROCEDURE AddClause (LandingPad, ClauseVal: ADDRESS; );

<* EXTERNAL LLVMIsCleanup *>
PROCEDURE IsCleanup (LandingPad: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetCleanup *>
PROCEDURE SetCleanup (LandingPad: ADDRESS; Val: BOOLEAN; );

<* EXTERNAL LLVMAddHandler *>
PROCEDURE AddHandler (CatchSwitch, Dest: ADDRESS; );

<* EXTERNAL LLVMGetNumHandlers *>
PROCEDURE GetNumHandlers (CatchSwitch: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMGetHandlers *>
PROCEDURE GetHandlers (CatchSwitch: ADDRESS; Handlers: ADDRESS; );

<* EXTERNAL LLVMGetArgOperand *>
PROCEDURE GetArgOperand (Funclet: ADDRESS; i: C.unsigned_int; ): ADDRESS;

<* EXTERNAL LLVMSetArgOperand *>
PROCEDURE SetArgOperand
  (Funclet: ADDRESS; i: C.unsigned_int; value: ADDRESS; );

<* EXTERNAL LLVMGetParentCatchSwitch *>
PROCEDURE GetParentCatchSwitch (CatchPad: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetParentCatchSwitch *>
PROCEDURE SetParentCatchSwitch (CatchPad, CatchSwitch: ADDRESS; );

<* EXTERNAL LLVMBuildAdd *>
PROCEDURE BuildAdd (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildNSWAdd *>
PROCEDURE BuildNSWAdd (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildNUWAdd *>
PROCEDURE BuildNUWAdd (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFAdd *>
PROCEDURE BuildFAdd (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildSub *>
PROCEDURE BuildSub (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildNSWSub *>
PROCEDURE BuildNSWSub (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildNUWSub *>
PROCEDURE BuildNUWSub (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFSub *>
PROCEDURE BuildFSub (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildMul *>
PROCEDURE BuildMul (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildNSWMul *>
PROCEDURE BuildNSWMul (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildNUWMul *>
PROCEDURE BuildNUWMul (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFMul *>
PROCEDURE BuildFMul (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildUDiv *>
PROCEDURE BuildUDiv (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildExactUDiv *>
PROCEDURE BuildExactUDiv (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildSDiv *>
PROCEDURE BuildSDiv (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildExactSDiv *>
PROCEDURE BuildExactSDiv (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFDiv *>
PROCEDURE BuildFDiv (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildURem *>
PROCEDURE BuildURem (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildSRem *>
PROCEDURE BuildSRem (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFRem *>
PROCEDURE BuildFRem (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildShl *>
PROCEDURE BuildShl (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildLShr *>
PROCEDURE BuildLShr (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildAShr *>
PROCEDURE BuildAShr (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildAnd *>
PROCEDURE BuildAnd (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildOr *>
PROCEDURE BuildOr (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildXor *>
PROCEDURE BuildXor (arg1, LHS, RHS: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildBinOp *>
PROCEDURE BuildBinOp (B       : ADDRESS;
                      Op      : C.int (* LLVMOpcode *);
                      LHS, RHS: ADDRESS;
                      Name    : C.char_star;            ): ADDRESS;

<* EXTERNAL LLVMBuildNeg *>
PROCEDURE BuildNeg (arg1, V: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildNSWNeg *>
PROCEDURE BuildNSWNeg (B, V: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildFNeg *>
PROCEDURE BuildFNeg (arg1, V: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildNot *>
PROCEDURE BuildNot (arg1, V: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMGetNUW *>
PROCEDURE GetNUW (ArithInst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetNUW *>
PROCEDURE SetNUW (ArithInst: ADDRESS; HasNUW: BOOLEAN; );

<* EXTERNAL LLVMGetNSW *>
PROCEDURE GetNSW (ArithInst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetNSW *>
PROCEDURE SetNSW (ArithInst: ADDRESS; HasNSW: BOOLEAN; );

<* EXTERNAL LLVMGetExact *>
PROCEDURE GetExact (DivOrShrInst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetExact *>
PROCEDURE SetExact (DivOrShrInst: ADDRESS; IsExact: BOOLEAN; );

<* EXTERNAL LLVMGetNNeg *>
PROCEDURE GetNNeg (NonNegInst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetNNeg *>
PROCEDURE SetNNeg (NonNegInst: ADDRESS; IsNonNeg: BOOLEAN; );

<* EXTERNAL LLVMGetFastMathFlags *>
PROCEDURE GetFastMathFlags (FPMathInst: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMSetFastMathFlags *>
PROCEDURE SetFastMathFlags (FPMathInst: ADDRESS; FMF: C.unsigned_int; );

<* EXTERNAL LLVMCanValueUseFastMathFlags *>
PROCEDURE CanValueUseFastMathFlags (Inst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetIsDisjoint *>
PROCEDURE GetIsDisjoint (Inst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetIsDisjoint *>
PROCEDURE SetIsDisjoint (Inst: ADDRESS; IsDisjoint: BOOLEAN; );

<* EXTERNAL LLVMBuildMalloc *>
PROCEDURE BuildMalloc (arg1, Ty: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildArrayMalloc *>
PROCEDURE BuildArrayMalloc (arg1, Ty, Val: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildMemSet *>
PROCEDURE BuildMemSet (B, Ptr, Val, Len: ADDRESS; Align: C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMBuildMemCpy *>
PROCEDURE BuildMemCpy (B, Dst  : ADDRESS;
                       DstAlign: C.unsigned_int;
                       Src     : ADDRESS;
                       SrcAlign: C.unsigned_int;
                       Size    : ADDRESS;        ): ADDRESS;

<* EXTERNAL LLVMBuildMemMove *>
PROCEDURE BuildMemMove (B, Dst  : ADDRESS;
                        DstAlign: C.unsigned_int;
                        Src     : ADDRESS;
                        SrcAlign: C.unsigned_int;
                        Size    : ADDRESS;        ): ADDRESS;

<* EXTERNAL LLVMBuildAlloca *>
PROCEDURE BuildAlloca (arg1, Ty: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildArrayAlloca *>
PROCEDURE BuildArrayAlloca (arg1, Ty, Val: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFree *>
PROCEDURE BuildFree (arg1, PointerVal: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildLoad2 *>
PROCEDURE BuildLoad2 (arg1, Ty, PointerVal: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildStore *>
PROCEDURE BuildStore (arg1, Val, Ptr: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMBuildGEP2 *>
PROCEDURE BuildGEP2 (B, Ty, Pointer: ADDRESS;
                     Indices       : ADDRESS;
                     NumIndices    : C.unsigned_int;
                     Name          : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMBuildInBoundsGEP2 *>
PROCEDURE BuildInBoundsGEP2 (B, Ty, Pointer: ADDRESS;
                             Indices       : ADDRESS;
                             NumIndices    : C.unsigned_int;
                             Name          : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMBuildGEPWithNoWrapFlags *>
PROCEDURE BuildGEPWithNoWrapFlags (B, Ty, Pointer: ADDRESS;
                                   Indices       : ADDRESS;
                                   NumIndices    : C.unsigned_int;
                                   Name          : C.char_star;
                                   NoWrapFlags   : C.unsigned_int; ):
  ADDRESS;

<* EXTERNAL LLVMBuildStructGEP2 *>
PROCEDURE BuildStructGEP2
  (B, Ty, Pointer: ADDRESS; Idx: C.unsigned_int; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildGlobalString *>
PROCEDURE BuildGlobalString (B: ADDRESS; Str, Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildGlobalStringPtr *>
PROCEDURE BuildGlobalStringPtr (B: ADDRESS; Str, Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMGetVolatile *>
PROCEDURE GetVolatile (MemoryAccessInst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetVolatile *>
PROCEDURE SetVolatile (MemoryAccessInst: ADDRESS; IsVolatile: BOOLEAN; );

<* EXTERNAL LLVMGetWeak *>
PROCEDURE GetWeak (CmpXchgInst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetWeak *>
PROCEDURE SetWeak (CmpXchgInst: ADDRESS; IsWeak: BOOLEAN; );

<* EXTERNAL LLVMGetOrdering *>
PROCEDURE GetOrdering (MemoryAccessInst: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetOrdering *>
PROCEDURE SetOrdering
  (MemoryAccessInst: ADDRESS; Ordering: C.int (* LLVMAtomicOrdering *); );

<* EXTERNAL LLVMGetAtomicRMWBinOp *>
PROCEDURE GetAtomicRMWBinOp (AtomicRMWInst: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetAtomicRMWBinOp *>
PROCEDURE SetAtomicRMWBinOp
  (AtomicRMWInst: ADDRESS; BinOp: C.int (* LLVMAtomicRMWBinOp *); );

<* EXTERNAL LLVMBuildTrunc *>
PROCEDURE BuildTrunc (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildZExt *>
PROCEDURE BuildZExt (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildSExt *>
PROCEDURE BuildSExt (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFPToUI *>
PROCEDURE BuildFPToUI (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFPToSI *>
PROCEDURE BuildFPToSI (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildUIToFP *>
PROCEDURE BuildUIToFP (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildSIToFP *>
PROCEDURE BuildSIToFP (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFPTrunc *>
PROCEDURE BuildFPTrunc (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFPExt *>
PROCEDURE BuildFPExt (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildPtrToInt *>
PROCEDURE BuildPtrToInt (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildIntToPtr *>
PROCEDURE BuildIntToPtr (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildBitCast *>
PROCEDURE BuildBitCast (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildAddrSpaceCast *>
PROCEDURE BuildAddrSpaceCast
  (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildZExtOrBitCast *>
PROCEDURE BuildZExtOrBitCast
  (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildSExtOrBitCast *>
PROCEDURE BuildSExtOrBitCast
  (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildTruncOrBitCast *>
PROCEDURE BuildTruncOrBitCast
  (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildCast *>
PROCEDURE BuildCast (B          : ADDRESS;
                     Op         : C.int (* LLVMOpcode *);
                     Val, DestTy: ADDRESS;
                     Name       : C.char_star;            ): ADDRESS;

<* EXTERNAL LLVMBuildPointerCast *>
PROCEDURE BuildPointerCast
  (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildIntCast2 *>
PROCEDURE BuildIntCast2
  (arg1, Val, DestTy: ADDRESS; IsSigned: BOOLEAN; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildFPCast *>
PROCEDURE BuildFPCast (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildIntCast *>
PROCEDURE BuildIntCast (arg1, Val, DestTy: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMGetCastOpcode *>
PROCEDURE GetCastOpcode (Src         : ADDRESS;
                         SrcIsSigned : BOOLEAN;
                         DestTy      : ADDRESS;
                         DestIsSigned: BOOLEAN; ): C.int;

<* EXTERNAL LLVMBuildICmp *>
PROCEDURE BuildICmp (arg1    : ADDRESS;
                     Op      : C.int (* LLVMIntPredicate *);
                     LHS, RHS: ADDRESS;
                     Name    : C.char_star;                  ): ADDRESS;

<* EXTERNAL LLVMBuildFCmp *>
PROCEDURE BuildFCmp (arg1    : ADDRESS;
                     Op      : C.int (* LLVMRealPredicate *);
                     LHS, RHS: ADDRESS;
                     Name    : C.char_star;                   ): ADDRESS;

<* EXTERNAL LLVMBuildPhi *>
PROCEDURE BuildPhi (arg1, Ty: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildCall2 *>
PROCEDURE BuildCall2 (arg1, arg2, Fn: ADDRESS;
                      Args          : ADDRESS;
                      NumArgs       : C.unsigned_int;
                      Name          : C.char_star;    ): ADDRESS;

<* EXTERNAL LLVMBuildCallWithOperandBundles *>
PROCEDURE BuildCallWithOperandBundles (arg1, arg2, Fn: ADDRESS;
                                       Args          : ADDRESS;
                                       NumArgs       : C.unsigned_int;
                                       Bundles       : ADDRESS;
                                       NumBundles    : C.unsigned_int;
                                       Name          : C.char_star;    ):
  ADDRESS;

<* EXTERNAL LLVMBuildSelect *>
PROCEDURE BuildSelect (arg1, If, Then, Else: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildVAArg *>
PROCEDURE BuildVAArg (arg1, List, Ty: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildExtractElement *>
PROCEDURE BuildExtractElement
  (arg1, VecVal, Index: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildInsertElement *>
PROCEDURE BuildInsertElement
  (arg1, VecVal, EltVal, Index: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildShuffleVector *>
PROCEDURE BuildShuffleVector
  (arg1, V1, V2, Mask: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildExtractValue *>
PROCEDURE BuildExtractValue
  (arg1, AggVal: ADDRESS; Index: C.unsigned_int; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildInsertValue *>
PROCEDURE BuildInsertValue (arg1, AggVal, EltVal: ADDRESS;
                            Index               : C.unsigned_int;
                            Name                : C.char_star;    ):
  ADDRESS;

<* EXTERNAL LLVMBuildFreeze *>
PROCEDURE BuildFreeze (arg1, Val: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildIsNull *>
PROCEDURE BuildIsNull (arg1, Val: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildIsNotNull *>
PROCEDURE BuildIsNotNull (arg1, Val: ADDRESS; Name: C.char_star; ):
  ADDRESS;

<* EXTERNAL LLVMBuildPtrDiff2 *>
PROCEDURE BuildPtrDiff2
  (arg1, ElemTy, LHS, RHS: ADDRESS; Name: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMBuildFence *>
PROCEDURE BuildFence (B           : ADDRESS;
                      ordering    : C.int (* LLVMAtomicOrdering *);
                      singleThread: BOOLEAN;
                      Name        : C.char_star;                    ):
  ADDRESS;

<* EXTERNAL LLVMBuildFenceSyncScope *>
PROCEDURE BuildFenceSyncScope (B       : ADDRESS;
                               ordering: C.int (* LLVMAtomicOrdering *);
                               SSID    : C.unsigned_int;
                               Name    : C.char_star;                    ):
  ADDRESS;

<* EXTERNAL LLVMBuildAtomicRMW *>
PROCEDURE BuildAtomicRMW (B           : ADDRESS;
                          op          : C.int (* LLVMAtomicRMWBinOp *);
                          PTR, Val    : ADDRESS;
                          ordering    : C.int (* LLVMAtomicOrdering *);
                          singleThread: BOOLEAN;                        ):
  ADDRESS;

<* EXTERNAL LLVMBuildAtomicRMWSyncScope *>
PROCEDURE BuildAtomicRMWSyncScope
  (B       : ADDRESS;
   op      : C.int (* LLVMAtomicRMWBinOp *);
   PTR, Val: ADDRESS;
   ordering: C.int (* LLVMAtomicOrdering *);
   SSID    : C.unsigned_int;                 ): ADDRESS;

<* EXTERNAL LLVMBuildAtomicCmpXchg *>
PROCEDURE BuildAtomicCmpXchg
  (B, Ptr, Cmp, New                : ADDRESS;
   SuccessOrdering, FailureOrdering: C.int (* LLVMAtomicOrdering *);
   SingleThread                    : BOOLEAN;                        ):
  ADDRESS;

<* EXTERNAL LLVMBuildAtomicCmpXchgSyncScope *>
PROCEDURE BuildAtomicCmpXchgSyncScope
  (B, Ptr, Cmp, New                : ADDRESS;
   SuccessOrdering, FailureOrdering: C.int (* LLVMAtomicOrdering *);
   SSID                            : C.unsigned_int;                 ):
  ADDRESS;

<* EXTERNAL LLVMGetNumMaskElements *>
PROCEDURE GetNumMaskElements (ShuffleVectorInst: ADDRESS; ):
  C.unsigned_int;

<* EXTERNAL LLVMGetUndefMaskElem *>
PROCEDURE GetUndefMaskElem (): C.int;

<* EXTERNAL LLVMGetMaskValue *>
PROCEDURE GetMaskValue (ShuffleVectorInst: ADDRESS; Elt: C.unsigned_int; ):
  C.int;

<* EXTERNAL LLVMIsAtomicSingleThread *>
PROCEDURE IsAtomicSingleThread (AtomicInst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMSetAtomicSingleThread *>
PROCEDURE SetAtomicSingleThread
  (AtomicInst: ADDRESS; SingleThread: BOOLEAN; );

<* EXTERNAL LLVMIsAtomic *>
PROCEDURE IsAtomic (Inst: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMGetAtomicSyncScopeID *>
PROCEDURE GetAtomicSyncScopeID (AtomicInst: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMSetAtomicSyncScopeID *>
PROCEDURE SetAtomicSyncScopeID
  (AtomicInst: ADDRESS; SSID: C.unsigned_int; );

<* EXTERNAL LLVMGetCmpXchgSuccessOrdering *>
PROCEDURE GetCmpXchgSuccessOrdering (CmpXchgInst: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetCmpXchgSuccessOrdering *>
PROCEDURE SetCmpXchgSuccessOrdering
  (CmpXchgInst: ADDRESS; Ordering: C.int (* LLVMAtomicOrdering *); );

<* EXTERNAL LLVMGetCmpXchgFailureOrdering *>
PROCEDURE GetCmpXchgFailureOrdering (CmpXchgInst: ADDRESS; ): C.int;

<* EXTERNAL LLVMSetCmpXchgFailureOrdering *>
PROCEDURE SetCmpXchgFailureOrdering
  (CmpXchgInst: ADDRESS; Ordering: C.int (* LLVMAtomicOrdering *); );

<* EXTERNAL LLVMCreateModuleProviderForExistingModule *>
PROCEDURE CreateModuleProviderForExistingModule (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMDisposeModuleProvider *>
PROCEDURE DisposeModuleProvider (M: ADDRESS; );

<* EXTERNAL LLVMCreateMemoryBufferWithContentsOfFile *>
PROCEDURE CreateMemoryBufferWithContentsOfFile
  (Path: C.char_star; OutMemBuf: ADDRESS; VAR OutMessage: C.char_star; ):
  BOOLEAN;

<* EXTERNAL LLVMCreateMemoryBufferWithSTDIN *>
PROCEDURE CreateMemoryBufferWithSTDIN
  (OutMemBuf: ADDRESS; VAR OutMessage: C.char_star; ): BOOLEAN;

<* EXTERNAL LLVMCreateMemoryBufferWithMemoryRange *>
PROCEDURE CreateMemoryBufferWithMemoryRange
  (InputData             : C.char_star;
   InputDataLength       : Word.T;
   BufferName            : C.char_star;
   RequiresNullTerminator: BOOLEAN;     ): ADDRESS;

<* EXTERNAL LLVMCreateMemoryBufferWithMemoryRangeCopy *>
PROCEDURE CreateMemoryBufferWithMemoryRangeCopy
  (InputData      : C.char_star;
   InputDataLength: Word.T;
   BufferName     : C.char_star; ): ADDRESS;

<* EXTERNAL LLVMGetBufferStart *>
PROCEDURE GetBufferStart (MemBuf: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMGetBufferSize *>
PROCEDURE GetBufferSize (MemBuf: ADDRESS; ): Word.T;

<* EXTERNAL LLVMDisposeMemoryBuffer *>
PROCEDURE DisposeMemoryBuffer (MemBuf: ADDRESS; );

<* EXTERNAL LLVMCreatePassManager *>
PROCEDURE CreatePassManager (): ADDRESS;

<* EXTERNAL LLVMCreateFunctionPassManagerForModule *>
PROCEDURE CreateFunctionPassManagerForModule (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMCreateFunctionPassManager *>
PROCEDURE CreateFunctionPassManager (MP: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMRunPassManager *>
PROCEDURE RunPassManager (PM, M: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMInitializeFunctionPassManager *>
PROCEDURE InitializeFunctionPassManager (FPM: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMRunFunctionPassManager *>
PROCEDURE RunFunctionPassManager (FPM, F: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMFinalizeFunctionPassManager *>
PROCEDURE FinalizeFunctionPassManager (FPM: ADDRESS; ): BOOLEAN;

<* EXTERNAL LLVMDisposePassManager *>
PROCEDURE DisposePassManager (PM: ADDRESS; );

<* EXTERNAL LLVMStartMultithreaded *>
PROCEDURE StartMultithreaded (): BOOLEAN;

<* EXTERNAL LLVMStopMultithreaded *>
PROCEDURE StopMultithreaded ();

<* EXTERNAL LLVMIsMultithreaded *>
PROCEDURE IsMultithreaded (): BOOLEAN;

<* EXTERNAL LLVMWriteBitcodeToFile *>
PROCEDURE WriteBitcodeToFile (M: ADDRESS; Path: C.char_star; ): C.int;

<* EXTERNAL LLVMWriteBitcodeToFD *>
PROCEDURE WriteBitcodeToFD
  (M: ADDRESS; FD, ShouldClose, Unbuffered: C.int; ): C.int;

<* EXTERNAL LLVMWriteBitcodeToFileHandle *>
PROCEDURE WriteBitcodeToFileHandle (M: ADDRESS; Handle: C.int; ): C.int;

<* EXTERNAL LLVMWriteBitcodeToMemoryBuffer *>
PROCEDURE WriteBitcodeToMemoryBuffer (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMGetModuleDataLayout *>
PROCEDURE GetModuleDataLayout (M: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSetModuleDataLayout *>
PROCEDURE SetModuleDataLayout (M: ADDRESS; DL: ADDRESS; );

<* EXTERNAL LLVMCreateTargetData *>
PROCEDURE CreateTargetData (StringRep: C.char_star; ): ADDRESS;

<* EXTERNAL LLVMDisposeTargetData *>
PROCEDURE DisposeTargetData (TD: ADDRESS; );

<* EXTERNAL LLVMAddTargetLibraryInfo *>
PROCEDURE AddTargetLibraryInfo (TLI: ADDRESS; PM: ADDRESS; );

<* EXTERNAL LLVMCopyStringRepOfTargetData *>
PROCEDURE CopyStringRepOfTargetData (TD: ADDRESS; ): C.char_star;

<* EXTERNAL LLVMByteOrder *>
PROCEDURE ByteOrder (TD: ADDRESS; ): C.int;

<* EXTERNAL LLVMPointerSize *>
PROCEDURE PointerSize (TD: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMIntPtrType *>
PROCEDURE IntPtrType (TD: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMIntPtrTypeInContext *>
PROCEDURE IntPtrTypeInContext (C: ADDRESS; TD: ADDRESS; ): ADDRESS;

<* EXTERNAL LLVMSizeOfTypeInBits *>
PROCEDURE SizeOfTypeInBits (TD: ADDRESS; Ty: ADDRESS; ):
  C.unsigned_long_long;

<* EXTERNAL LLVMStoreSizeOfType *>
PROCEDURE StoreSizeOfType (TD: ADDRESS; Ty: ADDRESS; ):
  C.unsigned_long_long;

<* EXTERNAL LLVMABISizeOfType *>
PROCEDURE ABISizeOfType (TD: ADDRESS; Ty: ADDRESS; ): C.unsigned_long_long;

<* EXTERNAL LLVMABIAlignmentOfType *>
PROCEDURE ABIAlignmentOfType (TD: ADDRESS; Ty: ADDRESS; ): C.unsigned_int;

<* EXTERNAL LLVMCallFrameAlignmentOfType *>
PROCEDURE CallFrameAlignmentOfType (TD: ADDRESS; Ty: ADDRESS; ):
  C.unsigned_int;

<* EXTERNAL LLVMPreferredAlignmentOfType *>
PROCEDURE PreferredAlignmentOfType (TD: ADDRESS; Ty: ADDRESS; ):
  C.unsigned_int;

<* EXTERNAL LLVMPreferredAlignmentOfGlobal *>
PROCEDURE PreferredAlignmentOfGlobal (TD: ADDRESS; GlobalVar: ADDRESS; ):
  C.unsigned_int;

<* EXTERNAL LLVMElementAtOffset *>
PROCEDURE ElementAtOffset
  (TD: ADDRESS; StructTy: ADDRESS; Offset: C.unsigned_long_long; ):
  C.unsigned_int;

<* EXTERNAL LLVMOffsetOfElement *>
PROCEDURE OffsetOfElement
  (TD: ADDRESS; StructTy: ADDRESS; Element: C.unsigned_int; ):
  C.unsigned_long_long;

END LLVMRaw.
