
% File: m3-sys/llvm/llvm9bindings/src/m3makefile

% Copyright 2015, Rodney M. Bates.
% rodney.m.bates@acm.org
% Licensed under the Gnu Public License, version 2 or later.

% This package contains Modula-3 bindings to the llvm infrastructure,
% indirectly through C/C++ bindings.

% This m3makefile needs the following variables.  
% Currently, it supplies defaults for them that will probably be wrong
% on your computer.  

%   LLVM_SOURCE_DIR = "location.of.llvm.include.files"
%     ^This will be the top of the llvm source directory.  Only subdirectory
%     'include' within it will be needed. 
%   LLVM_LIB_DIR = "location.of.compiled.llvm.libraries"
%   LIB_DIR = "location.of.other.libraries.needed.by.llvm"


proc FileExists (a) is
    return not stale (a, a)
end

proc PickDir (name, a) is
    local all = ""
    foreach b in a
        %write ("checking ", a, CR)
        if FileExists (b)
            write (name, "=", b, CR)
            return b
        end
        all = all & "\n   " & b
    end
    error (name & " not defined and nothing found among:" & all)
end

% Directory wherein to find llvm source (at least its include subdirectory):

if not defined ("LLVM_SOURCE_DIR")
    LLVM_SOURCE_DIR = PickDir("LLVM_SOURCE_DIR", [
        "/src/llvm-3.6.1.src",    % Jay Krell
        "/home/rodney/proj/llvm/llvm-3.6.1/llvm-3.6.1.src", % Rodney Bates
        "/opt/llvm/llvm-9.0.1.src", % VVM
        "/home/peter/projects/llvm9/llvm-9.0.0.src", %Peter
        ])
end

% Some include files come from here: Assumes you have named your llvm build dir "build"

if not defined("LLVM_BUILD_INCLUDE_DIR")
    LLVM_BUILD_INCLUDE_DIR = PickDir("LLVM_BUILD_INCLUDE_DIR", [
        "/obj/llvm-3.6.1/include", % Jay Krell
        LLVM_SOURCE_DIR & "/../RelWithDebInfo/include", %VVM
        LLVM_SOURCE_DIR & "/../build/include",
        ])
end

if not defined("LLVM_LIB_DIR")
    LLVM_LIB_DIR = PickDir("LLVM_LIB_DIR", [
        {"AMD64_LINUX"  : "/usr/local/lib", 
         "AMD64_LINUX"  : "/usr/local/llvm-3.6.1/lib", % Rodney Bates
            "AMD64_NT"  : "/opt/llvm/lib", % VVM, de-facto it is C:\opt\llvm\lib\ or D:\opt\llvm\lib\
         "AMD64_DARWIN" : "/Users/jay/llvm-3.6.1/lib", % Jay Krell
         "I386_DARWIN"  : "/Users/jay/llvm-3.6.1-x86/lib", % Jay Krell
        }{TARGET},
        ])
end

LLVM_INCLUDE_DIR = LLVM_SOURCE_DIR & "/include" 

% Directory wherein to find various system libraries: 
if not defined("LIB_DIR") LIB_DIR = "/usr/lib/x86_64-linux-gnu" end % Rodney Bates

% This m3makefile will invoke make to do the C++ compilation.  
% If we get cm3 extended to have a cpp_source command, we might then let
% it invoke the C++ compiler.  For now, we exec make to do it.  

%TODO: When its -clean or -realclean, exec make for "clean", not "all".  

if equal (OS_TYPE, "POSIX")

  exec("make", "-f" , "../src/Makefile", "-k", "LLVM_INCLUDE_DIR=" & LLVM_INCLUDE_DIR, "LLVM_BUILD_INCLUDE_DIR=" & LLVM_BUILD_INCLUDE_DIR, "BUILD_DIR=" & BUILD_DIR)
else
  exec("nmake", "-f" , "../src/WinMakefile", "-k", "LLVM_INCLUDE_DIR=" & LLVM_INCLUDE_DIR, "LLVM_BUILD_INCLUDE_DIR=" & LLVM_BUILD_INCLUDE_DIR, "BUILD_DIR=" & BUILD_DIR)
end
% ^ For now, until we get C++ files into m3 build system

import ("m3core")
Interface ("LLVM") 
Interface ("LLVMTypes") 
Interface ("DwarfConst") 

Module("M3DIBuilderRaw")
Module("M3DIBuilder")

import_obj("M3Extras")
import_obj("M3DIBuilder")


  % import_obj needs work!!  
  % import_obj(<name>) puts a symlink in ../BUILD_DIR/<name>.o, pointing to <name.o>, 
  % located relative to the src directory.  Later, it links the symlink into the package.  
  % If the file is target-dependent, (as these and most .o files are), we want to put them  
  % in ../BUILD_DIR, the target build directory, and only target-dependent place we have. 
  % But import_obj("../BUILD_DIR/<name>") just replaces it with a circular symlink. 
  % When this is fixed, the Makefile will have to be changed to put it in the right place. 

% Commands for linking-in needed llvm static libraries. 
% NOTE: These are in this m3makefile for llvmbindings, because 
%       it is the code in this package that needs them.
%       However, the CM3 build system will not attempt to link
%       them in until it links a main program that (transitively)
%       includes this library.  In the meantime, these library names 
%       are just accumulated in library packages (in the.M3EXPORTS file).   

% These will be reversed in the link command generated by cm3: 
%include("llvmLibs.quake") %Don't need any of these. 


if equal (OS_TYPE, "POSIX")
  import_lib("curses",LIB_DIR) 
  import_lib("dl",LIB_DIR)
  import_lib("stdc++",LIB_DIR)
  import_lib("z",LIB_DIR)
else
  %
  %  We should be sure that 
  % kernel32.lib;user32.lib;gdi32.lib;winspool.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;comdlg32.lib;advapi32.lib
  % will be linked to our llvmbindings.lib / .dll
  %
  %  First copy First copy psapi.lib, gdi32.lib, shell32.lib, ole32.lib, oleaut32.lib, uuid.lib, msvcprt.lib, libvcruntime.lib, libcmt.lib, oldnames.lib
  %  from
  % C:/Program Files (x86)/Windows Kits/10/Lib/10.0.18362.0/um/x64/
  %  or from
  % C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.26.28801\lib\x64\
  %  to
  % C:/opt/llvm/libum
  %  or to
  % D:/opt/llvm/libum
  %
  import_lib("psapi"        ,"/opt/llvm/libum")
  import_lib("gdi32"        ,"/opt/llvm/libum")
  import_lib("shell32"      ,"/opt/llvm/libum")
  import_lib("ole32"        ,"/opt/llvm/libum")     %%VVM  C:/Program Files (x86)/Windows Kits/10/Lib/10.0.18362.0/um/x64/
  import_lib("oleaut32"     ,"/opt/llvm/libum")
  import_lib("uuid"         ,"/opt/llvm/libum")

  import_lib("msvcprt"      ,"/opt/llvm/libum")
  import_lib("libvcruntime" ,"/opt/llvm/libum")
  import_lib("libcmt"       ,"/opt/llvm/libum")     %%VVM C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.26.28801\lib\x64\
  import_lib("oldnames"     ,"/opt/llvm/libum")
end

/* 
  Library order is important and hard to get correct with
such a large number of libs and new libraries added with
each new version. Using llvm-config --libnames takes the guesswork out.
  We get the list of libraries in the order
they are needed in the link. Then reverse the order.
*/

proc llvmlibs() is

      local libnames = q_exec_get ("llvm-config --libnames")
      local lib_arr = split(skipr(libnames[1])," ")
      
      local lib_tab = {}
      local key = "x"
      foreach lib in lib_arr
          lib_tab{key} = lib
          key = key & "x"
      end

      %reverse extraction
      local lib = ""
      foreach name in lib_arr
        %lets hope there are no more than 100 libs
        key = sub(key,1,100)
        lib = lib_tab{key}
        if equal (OS_TYPE, "POSIX")
          lib = sub(lib,3,len(lib)) %remove lib prefix
	end
        if equal(OS, "Windows_NT")	
          lib = subst(lib,".lib","",1) %remove suffix
	else
          lib = subst(lib,".a","",1) %remove suffix
	end
        %write("key: " & key & " val " & lib & "\n")
        import_lib(lib,LLVM_LIB_DIR)
      end
end

llvmlibs()

%build_standalone ()
Library ("llvmbindings")

