(*******************************************************************************
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
*******************************************************************************)

INTERFACE M3DIBuilder;



IMPORT LLVM, LLVMTypes;

CONST DITypeEmpty: DIType = NIL;

TYPE
  int64_t = LLVMTypes.int64_t;
  uint64_t = LLVMTypes.uint64_t;
  int32_t = LLVMTypes.int32_t;
  uint32_t = LLVMTypes.uint32_t;
  uint = LLVMTypes.unsigned;

  ModuleRef = LLVM.ModuleRef;
  StringRef = LLVMTypes.StringRef;
  ArrayInt64 = LLVMTypes.ArrayRefOfint64_t;
  ArrayUInt64 = LLVMTypes.ArrayRefOfuint64_t;
  ArrayMDPtr = LLVMTypes.ArrayRefOfMetadataRef;

  MetadataRef = LLVMTypes.MetadataRef;

  DICompileUnit = MetadataRef;
  DIFile = MetadataRef;
  DIEnumerator = MetadataRef;
  DIBasicType = MetadataRef;
  DIType = MetadataRef;
  DIDerivedType = MetadataRef;
  DIScope = MetadataRef;
  DIConstant = MetadataRef;
  DICompositeType = MetadataRef;
  DIObjCProperty = MetadataRef;
  DINodeArray = MetadataRef;
  MDNode = MetadataRef;
  DITemplateTypeParameter = MetadataRef;
  DITemplateValueParameter = MetadataRef;
  DITypeRefArray = MetadataRef;
  DISubroutineType = MetadataRef;
  DISubrange = MetadataRef;
  DIGlobalVariable = MetadataRef;
  DILocalVariable = MetadataRef;
  DIExpression = MetadataRef;
  DISubprogram = MetadataRef;
  DITemplateParameterArray = MetadataRef;
  DINamespace = MetadataRef;
  DIModule = MetadataRef;
  DILexicalBlockFile = MetadataRef;
  DILexicalBlock = MetadataRef;
  DIImportedEntity = MetadataRef;
  DINode = MetadataRef;

  DILocation = MDNode;
  ValueRef = LLVM.ValueRef;
  InstructionRef = LLVMTypes.InstructionRef;
  BasicBlockRef = LLVM.BasicBlockRef;

  (*4.0.1*)
  DIMacro = MetadataRef;
  DIMacroFile = MetadataRef;
  DIMacroNodeArray = MetadataRef;
  DIGlobalVariableExpression = MetadataRef;

  (*5.0.0*)
  DITypeArray = MetadataRef;

  (*7.0.0*)
  DILabel = MetadataRef;

  (*8.0.0*)
  MDTuple = MetadataRef;

  (*9.0.0*)
  DICommonBlock = MetadataRef;



(** Create a distinct clone of \p SP with FlagArtificial set.
*)

PROCEDURE CreateArtificialSubprogram (SP: DISubprogram; ): DISubprogram;


(** Create a uniqued clone of \p Ty with FlagArtificial set.
*)

PROCEDURE CreateArtificialType (Ty: DIType; ): DIType;


(** Create a uniqued clone of \p Ty with FlagObjectPointer and
 * FlagArtificial set.
 *)

PROCEDURE CreateObjectPointerType (Ty: DIType; ): DIType;


TYPE
  DIBuilder <: DIBuilderPublic;
  DIBuilderPublic =
    BRANDED OBJECT
      cxxObj: ADDRESS;
    METHODS

      (** Construct a builder for a module.
       * If \c AllowUnresolved, collect unresolved nodes attached to the module
       * in order to resolve cycles during \a finalize().
       * If \p CU is given a value other than nullptr, then set \p CUNode to CU.
       *)

      init_0 (M: ModuleRef; AllowUnresolved: BOOLEAN; CU: DICompileUnit; ):
              DIBuilder;

      (** Construct a builder for a module.
       * If \c AllowUnresolved, collect unresolved nodes attached to the module
       * in order to resolve cycles during \a finalize().
       * If \p CU is given a value other than nullptr, then set \p CUNode to CU.
       *)

      init_1 (M: ModuleRef; AllowUnresolved: BOOLEAN; ): DIBuilder;

      (** Construct a builder for a module.
       * If \c AllowUnresolved, collect unresolved nodes attached to the module
       * in order to resolve cycles during \a finalize().
       * If \p CU is given a value other than nullptr, then set \p CUNode to CU.
       *)

      init_2 (M: ModuleRef; ): DIBuilder;

      (** Construct any deferred debug info descriptors.
      *)

      finalize ();

      (** Finalize a specific subprogram - no new variables may be added to this
       * subprogram afterwards.
       *)

      finalizeSubprogram (SP: DISubprogram; );

      (** A CompileUnit provides an anchor for all debugging
       * information generated during this instance of compilation.
       * \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
       * \param File          File info.
       * \param Producer      Identify the producer of debugging information
                            * and code.  Usually this is a compiler
                            * version string.
       * \param isOptimized   A boolean flag which indicates whether optimization
                            * is enabled or not.
       * \param Flags         This string lists command line options. This
                            * string is directly embedded in debug info
                            * output which may be used by a tool
                            * analyzing generated debugging information.
       * \param RV            This indicates runtime version for languages like
                            * Objective-C.
       * \param SplitName     The name of the file that we'll split debug info
                            * out into.
       * \param Kind          The kind of debug information to generate.
       * \param DWOId         The DWOId if this is a split skeleton compile unit.
       * \param SplitDebugInlining    Whether to emit inline debug info.
       * \param DebugInfoForProfiling Whether to emit extra debug info for
                                    * profile collection.
       * \param NameTableKind  Whether to emit .debug_gnu_pubnames,
                            * .debug_pubnames, or no pubnames at all.
       *)

      createCompileUnit (         Lang       : uint;
                                  File       : DIFile;
                         READONLY Producer   : StringRef;
                                  isOptimized: BOOLEAN;
                         READONLY Flags      : StringRef;
                                  RV         : uint;
                         READONLY SplitName  : StringRef;
                                  Kind       : INTEGER;
                                  DWOId      : uint64_t;
                         SplitDebugInlining, DebugInfoForProfiling: BOOLEAN;
                         NameTableKind    : INTEGER;
                         RangesBaseAddress: BOOLEAN; ): DICompileUnit;

      (** A CompileUnit provides an anchor for all debugging
       * information generated during this instance of compilation.
       * \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
       * \param File          File info.
       * \param Producer      Identify the producer of debugging information
                            * and code.  Usually this is a compiler
                            * version string.
       * \param isOptimized   A boolean flag which indicates whether optimization
                            * is enabled or not.
       * \param Flags         This string lists command line options. This
                            * string is directly embedded in debug info
                            * output which may be used by a tool
                            * analyzing generated debugging information.
       * \param RV            This indicates runtime version for languages like
                            * Objective-C.
       * \param SplitName     The name of the file that we'll split debug info
                            * out into.
       * \param Kind          The kind of debug information to generate.
       * \param DWOId         The DWOId if this is a split skeleton compile unit.
       * \param SplitDebugInlining    Whether to emit inline debug info.
       * \param DebugInfoForProfiling Whether to emit extra debug info for
                                    * profile collection.
       * \param NameTableKind  Whether to emit .debug_gnu_pubnames,
                            * .debug_pubnames, or no pubnames at all.
       *)

      createCompileUnit1 (         Lang       : uint;
                                   File       : DIFile;
                          READONLY Producer   : StringRef;
                                   isOptimized: BOOLEAN;
                          READONLY Flags      : StringRef;
                                   RV         : uint;
                          READONLY SplitName  : StringRef;
                                   Kind       : INTEGER;
                                   DWOId      : uint64_t;
                          SplitDebugInlining, DebugInfoForProfiling: BOOLEAN;
                          NameTableKind: INTEGER; ): DICompileUnit;

      (** A CompileUnit provides an anchor for all debugging
       * information generated during this instance of compilation.
       * \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
       * \param File          File info.
       * \param Producer      Identify the producer of debugging information
                            * and code.  Usually this is a compiler
                            * version string.
       * \param isOptimized   A boolean flag which indicates whether optimization
                            * is enabled or not.
       * \param Flags         This string lists command line options. This
                            * string is directly embedded in debug info
                            * output which may be used by a tool
                            * analyzing generated debugging information.
       * \param RV            This indicates runtime version for languages like
                            * Objective-C.
       * \param SplitName     The name of the file that we'll split debug info
                            * out into.
       * \param Kind          The kind of debug information to generate.
       * \param DWOId         The DWOId if this is a split skeleton compile unit.
       * \param SplitDebugInlining    Whether to emit inline debug info.
       * \param DebugInfoForProfiling Whether to emit extra debug info for
                                    * profile collection.
       * \param NameTableKind  Whether to emit .debug_gnu_pubnames,
                            * .debug_pubnames, or no pubnames at all.
       *)

      createCompileUnit2 (         Lang       : uint;
                                   File       : DIFile;
                          READONLY Producer   : StringRef;
                                   isOptimized: BOOLEAN;
                          READONLY Flags      : StringRef;
                                   RV         : uint;
                          READONLY SplitName  : StringRef;
                                   Kind       : INTEGER;
                                   DWOId      : uint64_t;
                          SplitDebugInlining, DebugInfoForProfiling: BOOLEAN; ):
                          DICompileUnit;

      (** A CompileUnit provides an anchor for all debugging
       * information generated during this instance of compilation.
       * \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
       * \param File          File info.
       * \param Producer      Identify the producer of debugging information
                            * and code.  Usually this is a compiler
                            * version string.
       * \param isOptimized   A boolean flag which indicates whether optimization
                            * is enabled or not.
       * \param Flags         This string lists command line options. This
                            * string is directly embedded in debug info
                            * output which may be used by a tool
                            * analyzing generated debugging information.
       * \param RV            This indicates runtime version for languages like
                            * Objective-C.
       * \param SplitName     The name of the file that we'll split debug info
                            * out into.
       * \param Kind          The kind of debug information to generate.
       * \param DWOId         The DWOId if this is a split skeleton compile unit.
       * \param SplitDebugInlining    Whether to emit inline debug info.
       * \param DebugInfoForProfiling Whether to emit extra debug info for
                                    * profile collection.
       * \param NameTableKind  Whether to emit .debug_gnu_pubnames,
                            * .debug_pubnames, or no pubnames at all.
       *)

      createCompileUnit3 (         Lang              : uint;
                                   File              : DIFile;
                          READONLY Producer          : StringRef;
                                   isOptimized       : BOOLEAN;
                          READONLY Flags             : StringRef;
                                   RV                : uint;
                          READONLY SplitName         : StringRef;
                                   Kind              : INTEGER;
                                   DWOId             : uint64_t;
                                   SplitDebugInlining: BOOLEAN;   ):
                          DICompileUnit;

      (** A CompileUnit provides an anchor for all debugging
       * information generated during this instance of compilation.
       * \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
       * \param File          File info.
       * \param Producer      Identify the producer of debugging information
                            * and code.  Usually this is a compiler
                            * version string.
       * \param isOptimized   A boolean flag which indicates whether optimization
                            * is enabled or not.
       * \param Flags         This string lists command line options. This
                            * string is directly embedded in debug info
                            * output which may be used by a tool
                            * analyzing generated debugging information.
       * \param RV            This indicates runtime version for languages like
                            * Objective-C.
       * \param SplitName     The name of the file that we'll split debug info
                            * out into.
       * \param Kind          The kind of debug information to generate.
       * \param DWOId         The DWOId if this is a split skeleton compile unit.
       * \param SplitDebugInlining    Whether to emit inline debug info.
       * \param DebugInfoForProfiling Whether to emit extra debug info for
                                    * profile collection.
       * \param NameTableKind  Whether to emit .debug_gnu_pubnames,
                            * .debug_pubnames, or no pubnames at all.
       *)

      createCompileUnit4 (         Lang       : uint;
                                   File       : DIFile;
                          READONLY Producer   : StringRef;
                                   isOptimized: BOOLEAN;
                          READONLY Flags      : StringRef;
                                   RV         : uint;
                          READONLY SplitName  : StringRef;
                                   Kind       : INTEGER;
                                   DWOId      : uint64_t;  ):
                          DICompileUnit;

      (** A CompileUnit provides an anchor for all debugging
       * information generated during this instance of compilation.
       * \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
       * \param File          File info.
       * \param Producer      Identify the producer of debugging information
                            * and code.  Usually this is a compiler
                            * version string.
       * \param isOptimized   A boolean flag which indicates whether optimization
                            * is enabled or not.
       * \param Flags         This string lists command line options. This
                            * string is directly embedded in debug info
                            * output which may be used by a tool
                            * analyzing generated debugging information.
       * \param RV            This indicates runtime version for languages like
                            * Objective-C.
       * \param SplitName     The name of the file that we'll split debug info
                            * out into.
       * \param Kind          The kind of debug information to generate.
       * \param DWOId         The DWOId if this is a split skeleton compile unit.
       * \param SplitDebugInlining    Whether to emit inline debug info.
       * \param DebugInfoForProfiling Whether to emit extra debug info for
                                    * profile collection.
       * \param NameTableKind  Whether to emit .debug_gnu_pubnames,
                            * .debug_pubnames, or no pubnames at all.
       *)

      createCompileUnit5 (         Lang       : uint;
                                   File       : DIFile;
                          READONLY Producer   : StringRef;
                                   isOptimized: BOOLEAN;
                          READONLY Flags      : StringRef;
                                   RV         : uint;
                          READONLY SplitName  : StringRef;
                                   Kind       : INTEGER;   ):
                          DICompileUnit;

      (** A CompileUnit provides an anchor for all debugging
       * information generated during this instance of compilation.
       * \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
       * \param File          File info.
       * \param Producer      Identify the producer of debugging information
                            * and code.  Usually this is a compiler
                            * version string.
       * \param isOptimized   A boolean flag which indicates whether optimization
                            * is enabled or not.
       * \param Flags         This string lists command line options. This
                            * string is directly embedded in debug info
                            * output which may be used by a tool
                            * analyzing generated debugging information.
       * \param RV            This indicates runtime version for languages like
                            * Objective-C.
       * \param SplitName     The name of the file that we'll split debug info
                            * out into.
       * \param Kind          The kind of debug information to generate.
       * \param DWOId         The DWOId if this is a split skeleton compile unit.
       * \param SplitDebugInlining    Whether to emit inline debug info.
       * \param DebugInfoForProfiling Whether to emit extra debug info for
                                    * profile collection.
       * \param NameTableKind  Whether to emit .debug_gnu_pubnames,
                            * .debug_pubnames, or no pubnames at all.
       *)

      createCompileUnit6 (         Lang       : uint;
                                   File       : DIFile;
                          READONLY Producer   : StringRef;
                                   isOptimized: BOOLEAN;
                          READONLY Flags      : StringRef;
                                   RV         : uint;
                          READONLY SplitName  : StringRef; ):
                          DICompileUnit;

      (** A CompileUnit provides an anchor for all debugging
       * information generated during this instance of compilation.
       * \param Lang          Source programming language, eg. dwarf::DW_LANG_C99
       * \param File          File info.
       * \param Producer      Identify the producer of debugging information
                            * and code.  Usually this is a compiler
                            * version string.
       * \param isOptimized   A boolean flag which indicates whether optimization
                            * is enabled or not.
       * \param Flags         This string lists command line options. This
                            * string is directly embedded in debug info
                            * output which may be used by a tool
                            * analyzing generated debugging information.
       * \param RV            This indicates runtime version for languages like
                            * Objective-C.
       * \param SplitName     The name of the file that we'll split debug info
                            * out into.
       * \param Kind          The kind of debug information to generate.
       * \param DWOId         The DWOId if this is a split skeleton compile unit.
       * \param SplitDebugInlining    Whether to emit inline debug info.
       * \param DebugInfoForProfiling Whether to emit extra debug info for
                                    * profile collection.
       * \param NameTableKind  Whether to emit .debug_gnu_pubnames,
                            * .debug_pubnames, or no pubnames at all.
       *)

      createCompileUnit7 (         Lang       : uint;
                                   File       : DIFile;
                          READONLY Producer   : StringRef;
                                   isOptimized: BOOLEAN;
                          READONLY Flags      : StringRef;
                                   RV         : uint;      ):
                          DICompileUnit;

      (** Create a file descriptor to hold debugging information for a file.
       * \param Filename  File name.
       * \param Directory Directory.
       * \param Checksum  Optional checksum kind (e.g. CSK_MD5, CSK_SHA1, etc.)
                        * and value.
       * \param Source    Optional source text.
       *)

      createFile (READONLY Filename, Directory: StringRef;
                  READONLY Checksum           : TEXT;
                  READONLY Source             : StringRef; ): DIFile;

      (** Create a file descriptor to hold debugging information for a file.
       * \param Filename  File name.
       * \param Directory Directory.
       * \param Checksum  Optional checksum kind (e.g. CSK_MD5, CSK_SHA1, etc.)
                        * and value.
       * \param Source    Optional source text.
       *)

      createFile1 (READONLY Filename, Directory: StringRef;
                   READONLY Checksum           : TEXT;      ): DIFile;

      (** Create a file descriptor to hold debugging information for a file.
       * \param Filename  File name.
       * \param Directory Directory.
       * \param Checksum  Optional checksum kind (e.g. CSK_MD5, CSK_SHA1, etc.)
                        * and value.
       * \param Source    Optional source text.
       *)

      createFile2 (READONLY Filename, Directory: StringRef; ): DIFile;

      (** Create debugging information entry for a macro.
       * \param Parent     Macro parent (could be nullptr).
       * \param Line       Source line number where the macro is defined.
       * \param MacroType  DW_MACINFO_define or DW_MACINFO_undef.
       * \param Name       Macro name.
       * \param Value      Macro value.
       *)

      createMacro (         Parent         : DIMacroFile;
                            Line, MacroType: uint;
                   READONLY Name, Value    : StringRef;   ): DIMacro;

      (** Create debugging information entry for a macro.
       * \param Parent     Macro parent (could be nullptr).
       * \param Line       Source line number where the macro is defined.
       * \param MacroType  DW_MACINFO_define or DW_MACINFO_undef.
       * \param Name       Macro name.
       * \param Value      Macro value.
       *)

      createMacro1 (         Parent         : DIMacroFile;
                             Line, MacroType: uint;
                    READONLY Name           : StringRef;   ): DIMacro;

      (** Create debugging information temporary entry for a macro file.
       * List of macro node direct children will be calculated by DIBuilder,
       * using the \p Parent relationship.
       * \param Parent     Macro file parent (could be nullptr).
       * \param Line       Source line number where the macro file is included.
       * \param File       File descriptor containing the name of the macro file.
       *)

      createTempMacroFile (Parent: DIMacroFile; Line: uint; File: DIFile; ):
                           DIMacroFile;

      (** Create a single enumerator value.
      *)

      createEnumerator (READONLY Name      : StringRef;
                                 Val       : int64_t;
                                 IsUnsigned: BOOLEAN;   ): DIEnumerator;

      (** Create a single enumerator value.
      *)

      createEnumerator1 (READONLY Name: StringRef; Val: int64_t; ):
                         DIEnumerator;

      (** Create a DWARF unspecified type.
      *)

      createUnspecifiedType (READONLY Name: StringRef; ): DIBasicType;

      (** Create C++11 nullptr type.
      *)

      createNullPtrType (): DIBasicType;

      (** Create debugging information entry for a basic
       * type.
       * \param Name        Type name.
       * \param SizeInBits  Size of the type.
       * \param Encoding    DWARF encoding code, e.g., dwarf::DW_ATE_float.
       * \param Flags       Optional DWARF attributes, e.g., DW_AT_endianity.
       *)

      createBasicType (READONLY Name      : StringRef;
                                SizeInBits: uint64_t;
                                Encoding  : uint;
                                Flags     : INTEGER;   ): DIBasicType;

      (** Create debugging information entry for a basic
       * type.
       * \param Name        Type name.
       * \param SizeInBits  Size of the type.
       * \param Encoding    DWARF encoding code, e.g., dwarf::DW_ATE_float.
       * \param Flags       Optional DWARF attributes, e.g., DW_AT_endianity.
       *)

      createBasicType1 (READONLY Name      : StringRef;
                                 SizeInBits: uint64_t;
                                 Encoding  : uint;      ): DIBasicType;

      (** Create debugging information entry for a qualified
       * type, e.g. 'const int'.
       * \param Tag         Tag identifing type, e.g. dwarf::TAG_volatile_type
       * \param FromTy      Base Type.
       *)

      createQualifiedType (Tag: uint; FromTy: DIType; ): DIDerivedType;

      (** Create debugging information entry for a pointer.
       * \param PointeeTy         Type pointed by this pointer.
       * \param SizeInBits        Size.
       * \param AlignInBits       Alignment. (optional)
       * \param DWARFAddressSpace DWARF address space. (optional)
       * \param Name              Pointer type name. (optional)
       *)

      createPointerType (PointeeTy                     : DIType;
                         SizeInBits                    : uint64_t;
                         AlignInBits, DWARFAddressSpace: uint32_t;
                         READONLY Name: StringRef; ): DIDerivedType;

      (** Create debugging information entry for a pointer.
       * \param PointeeTy         Type pointed by this pointer.
       * \param SizeInBits        Size.
       * \param AlignInBits       Alignment. (optional)
       * \param DWARFAddressSpace DWARF address space. (optional)
       * \param Name              Pointer type name. (optional)
       *)

      createPointerType1 (PointeeTy                     : DIType;
                          SizeInBits                    : uint64_t;
                          AlignInBits, DWARFAddressSpace: uint32_t; ):
                          DIDerivedType;

      (** Create debugging information entry for a pointer.
       * \param PointeeTy         Type pointed by this pointer.
       * \param SizeInBits        Size.
       * \param AlignInBits       Alignment. (optional)
       * \param DWARFAddressSpace DWARF address space. (optional)
       * \param Name              Pointer type name. (optional)
       *)

      createPointerType2 (PointeeTy  : DIType;
                          SizeInBits : uint64_t;
                          AlignInBits: uint32_t; ): DIDerivedType;

      (** Create debugging information entry for a pointer.
       * \param PointeeTy         Type pointed by this pointer.
       * \param SizeInBits        Size.
       * \param AlignInBits       Alignment. (optional)
       * \param DWARFAddressSpace DWARF address space. (optional)
       * \param Name              Pointer type name. (optional)
       *)

      createPointerType3 (PointeeTy: DIType; SizeInBits: uint64_t; ):
                          DIDerivedType;

      (** Create debugging information entry for a pointer to member.
       * \param PointeeTy Type pointed to by this pointer.
       * \param SizeInBits  Size.
       * \param AlignInBits Alignment. (optional)
       * \param Class Type for which this pointer points to members of.
       *)

      createMemberPointerType (PointeeTy, Class: DIType;
                               SizeInBits      : uint64_t;
                               AlignInBits     : uint32_t;
                               Flags           : INTEGER;  ):
                               DIDerivedType;

      (** Create debugging information entry for a pointer to member.
       * \param PointeeTy Type pointed to by this pointer.
       * \param SizeInBits  Size.
       * \param AlignInBits Alignment. (optional)
       * \param Class Type for which this pointer points to members of.
       *)

      createMemberPointerType1 (PointeeTy, Class: DIType;
                                SizeInBits      : uint64_t;
                                AlignInBits     : uint32_t; ):
                                DIDerivedType;

      (** Create debugging information entry for a pointer to member.
       * \param PointeeTy Type pointed to by this pointer.
       * \param SizeInBits  Size.
       * \param AlignInBits Alignment. (optional)
       * \param Class Type for which this pointer points to members of.
       *)

      createMemberPointerType2 (PointeeTy, Class: DIType;
                                SizeInBits      : uint64_t; ):
                                DIDerivedType;

      (** Create debugging information entry for a c++
       * style reference or rvalue reference type.
       *)

      createReferenceType (Tag                           : uint;
                           RTy                           : DIType;
                           SizeInBits                    : uint64_t;
                           AlignInBits, DWARFAddressSpace: uint32_t; ):
                           DIDerivedType;

      (** Create debugging information entry for a c++
       * style reference or rvalue reference type.
       *)

      createReferenceType1 (Tag        : uint;
                            RTy        : DIType;
                            SizeInBits : uint64_t;
                            AlignInBits: uint32_t; ): DIDerivedType;

      (** Create debugging information entry for a c++
       * style reference or rvalue reference type.
       *)

      createReferenceType2 (Tag: uint; RTy: DIType; SizeInBits: uint64_t; ):
                            DIDerivedType;

      (** Create debugging information entry for a c++
       * style reference or rvalue reference type.
       *)

      createReferenceType3 (Tag: uint; RTy: DIType; ): DIDerivedType;

      (** Create debugging information entry for a typedef.
       * \param Ty          Original type.
       * \param Name        Typedef name.
       * \param File        File where this type is defined.
       * \param LineNo      Line number.
       * \param Context     The surrounding context for the typedef.
       * \param AlignInBits Alignment. (optional)
       *)

      createTypedef (         Ty         : DIType;
                     READONLY Name       : StringRef;
                              File       : DIFile;
                              LineNo     : uint;
                              Context    : DIScope;
                              AlignInBits: uint32_t;  ): DIDerivedType;

      (** Create debugging information entry for a typedef.
       * \param Ty          Original type.
       * \param Name        Typedef name.
       * \param File        File where this type is defined.
       * \param LineNo      Line number.
       * \param Context     The surrounding context for the typedef.
       * \param AlignInBits Alignment. (optional)
       *)

      createTypedef1 (         Ty     : DIType;
                      READONLY Name   : StringRef;
                               File   : DIFile;
                               LineNo : uint;
                               Context: DIScope;   ): DIDerivedType;

      (** Create debugging information entry for a 'friend'.
      *)

      createFriend (Ty, FriendTy: DIType; ): DIDerivedType;

      (** Create debugging information entry to establish
       * inheritance relationship between two types.
       * \param Ty           Original type.
       * \param BaseTy       Base type. Ty is inherits from base.
       * \param BaseOffset   Base offset.
       * \param VBPtrOffset  Virtual base pointer offset.
       * \param Flags        Flags to describe inheritance attribute,
                           * e.g. private
       *)

      createInheritance (Ty, BaseTy : DIType;
                         BaseOffset : uint64_t;
                         VBPtrOffset: uint32_t;
                         Flags      : INTEGER;  ): DIDerivedType;

      (** Create debugging information entry for a member.
       * \param Scope        Member scope.
       * \param Name         Member name.
       * \param File         File where this member is defined.
       * \param LineNo       Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param OffsetInBits Member offset.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Ty           Parent type.
       *)

      createMemberType (         Scope       : DIScope;
                        READONLY Name        : StringRef;
                                 File        : DIFile;
                                 LineNo      : uint;
                                 SizeInBits  : uint64_t;
                                 AlignInBits : uint32_t;
                                 OffsetInBits: uint64_t;
                                 Flags       : INTEGER;
                                 Ty          : DIType;    ): DIDerivedType;

      (** Create debugging information entry for a variant.  A variant
       * normally should be a member of a variant part.
       * \param Scope        Member scope.
       * \param Name         Member name.
       * \param File         File where this member is defined.
       * \param LineNo       Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param OffsetInBits Member offset.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Discriminant The discriminant for this branch; null for
                           * the default branch
       * \param Ty           Parent type.
       *)

      createVariantMemberType (         Scope       : DIScope;
                               READONLY Name        : StringRef;
                                        File        : DIFile;
                                        LineNo      : uint;
                                        SizeInBits  : uint64_t;
                                        AlignInBits : uint32_t;
                                        OffsetInBits: uint64_t;
                                        Discriminant: DIConstant;
                                        Flags       : INTEGER;
                                        Ty          : DIType;     ):
                               DIDerivedType;

      (** Create debugging information entry for a bit field member.
       * \param Scope               Member scope.
       * \param Name                Member name.
       * \param File                File where this member is defined.
       * \param LineNo              Line number.
       * \param SizeInBits          Member size.
       * \param OffsetInBits        Member offset.
       * \param StorageOffsetInBits Member storage offset.
       * \param Flags               Flags to encode member attribute.
       * \param Ty                  Parent type.
       *)

      createBitFieldMemberType (         Scope : DIScope;
                                READONLY Name  : StringRef;
                                         File  : DIFile;
                                         LineNo: uint;
                                SizeInBits, OffsetInBits,
                                  StorageOffsetInBits: uint64_t;
                                Flags: INTEGER;
                                Ty   : DIType;  ): DIDerivedType;

      (** Create debugging information entry for a
       * C++ static data member.
       * \param Scope      Member scope.
       * \param Name       Member name.
       * \param File       File where this member is declared.
       * \param LineNo     Line number.
       * \param Ty         Type of the static member.
       * \param Flags      Flags to encode member attribute, e.g. private.
       * \param Val        Const initializer of the member.
       * \param AlignInBits  Member alignment.
       *)

      createStaticMemberType (         Scope      : DIScope;
                              READONLY Name       : StringRef;
                                       File       : DIFile;
                                       LineNo     : uint;
                                       Ty         : DIType;
                                       Flags      : INTEGER;
                                       Val        : DIConstant;
                                       AlignInBits: uint32_t;   ):
                              DIDerivedType;

      (** Create debugging information entry for a
       * C++ static data member.
       * \param Scope      Member scope.
       * \param Name       Member name.
       * \param File       File where this member is declared.
       * \param LineNo     Line number.
       * \param Ty         Type of the static member.
       * \param Flags      Flags to encode member attribute, e.g. private.
       * \param Val        Const initializer of the member.
       * \param AlignInBits  Member alignment.
       *)

      createStaticMemberType1 (         Scope : DIScope;
                               READONLY Name  : StringRef;
                                        File  : DIFile;
                                        LineNo: uint;
                                        Ty    : DIType;
                                        Flags : INTEGER;
                                        Val   : DIConstant; ):
                               DIDerivedType;

      (** Create debugging information entry for Objective-C
       * instance variable.
       * \param Name         Member name.
       * \param File         File where this member is defined.
       * \param LineNo       Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param OffsetInBits Member offset.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Ty           Parent type.
       * \param PropertyNode Property associated with this ivar.
       *)

      createObjCIVar (READONLY Name        : StringRef;
                               File        : DIFile;
                               LineNo      : uint;
                               SizeInBits  : uint64_t;
                               AlignInBits : uint32_t;
                               OffsetInBits: uint64_t;
                               Flags       : INTEGER;
                               Ty          : DIType;
                               PropertyNode: MDNode;    ): DIDerivedType;

      (** Create debugging information entry for Objective-C
       * property.
       * \param Name         Property name.
       * \param File         File where this property is defined.
       * \param LineNumber   Line number.
       * \param GetterName   Name of the Objective C property getter selector.
       * \param SetterName   Name of the Objective C property setter selector.
       * \param PropertyAttributes Objective C property attributes.
       * \param Ty           Type.
       *)

      createObjCProperty (READONLY Name                  : StringRef;
                                   File                  : DIFile;
                                   LineNumber            : uint;
                          READONLY GetterName, SetterName: StringRef;
                                   PropertyAttributes    : uint;
                                   Ty                    : DIType;    ):
                          DIObjCProperty;

      (** Create debugging information entry for a class.
       * \param Scope        Scope in which this class is defined.
       * \param Name         class name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param OffsetInBits Member offset.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     class members.
       * \param VTableHolder Debug info of the base class that contains vtable
                           * for this type. This is used in
                           * DW_AT_containing_type. See DWARF documentation
                           * for more info.
       * \param TemplateParms Template type parameters.
       * \param UniqueIdentifier A unique identifier for the class.
       *)

      createClassType (         Scope           : DIScope;
                       READONLY Name            : StringRef;
                                File            : DIFile;
                                LineNumber      : uint;
                                SizeInBits      : uint64_t;
                                AlignInBits     : uint32_t;
                                OffsetInBits    : uint64_t;
                                Flags           : INTEGER;
                                DerivedFrom     : DIType;
                                Elements        : DINodeArray;
                                VTableHolder    : DIType;
                                TemplateParms   : MDNode;
                       READONLY UniqueIdentifier: StringRef;   ):
                       DICompositeType;

      (** Create debugging information entry for a class.
       * \param Scope        Scope in which this class is defined.
       * \param Name         class name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param OffsetInBits Member offset.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     class members.
       * \param VTableHolder Debug info of the base class that contains vtable
                           * for this type. This is used in
                           * DW_AT_containing_type. See DWARF documentation
                           * for more info.
       * \param TemplateParms Template type parameters.
       * \param UniqueIdentifier A unique identifier for the class.
       *)

      createClassType1 (         Scope        : DIScope;
                        READONLY Name         : StringRef;
                                 File         : DIFile;
                                 LineNumber   : uint;
                                 SizeInBits   : uint64_t;
                                 AlignInBits  : uint32_t;
                                 OffsetInBits : uint64_t;
                                 Flags        : INTEGER;
                                 DerivedFrom  : DIType;
                                 Elements     : DINodeArray;
                                 VTableHolder : DIType;
                                 TemplateParms: MDNode;      ):
                        DICompositeType;

      (** Create debugging information entry for a class.
       * \param Scope        Scope in which this class is defined.
       * \param Name         class name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param OffsetInBits Member offset.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     class members.
       * \param VTableHolder Debug info of the base class that contains vtable
                           * for this type. This is used in
                           * DW_AT_containing_type. See DWARF documentation
                           * for more info.
       * \param TemplateParms Template type parameters.
       * \param UniqueIdentifier A unique identifier for the class.
       *)

      createClassType2 (         Scope       : DIScope;
                        READONLY Name        : StringRef;
                                 File        : DIFile;
                                 LineNumber  : uint;
                                 SizeInBits  : uint64_t;
                                 AlignInBits : uint32_t;
                                 OffsetInBits: uint64_t;
                                 Flags       : INTEGER;
                                 DerivedFrom : DIType;
                                 Elements    : DINodeArray;
                                 VTableHolder: DIType;      ):
                        DICompositeType;

      (** Create debugging information entry for a class.
       * \param Scope        Scope in which this class is defined.
       * \param Name         class name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param OffsetInBits Member offset.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     class members.
       * \param VTableHolder Debug info of the base class that contains vtable
                           * for this type. This is used in
                           * DW_AT_containing_type. See DWARF documentation
                           * for more info.
       * \param TemplateParms Template type parameters.
       * \param UniqueIdentifier A unique identifier for the class.
       *)

      createClassType3 (         Scope       : DIScope;
                        READONLY Name        : StringRef;
                                 File        : DIFile;
                                 LineNumber  : uint;
                                 SizeInBits  : uint64_t;
                                 AlignInBits : uint32_t;
                                 OffsetInBits: uint64_t;
                                 Flags       : INTEGER;
                                 DerivedFrom : DIType;
                                 Elements    : DINodeArray; ):
                        DICompositeType;

      (** Create debugging information entry for a struct.
       * \param Scope        Scope in which this struct is defined.
       * \param Name         Struct name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     Struct elements.
       * \param RunTimeLang  Optional parameter, Objective-C runtime version.
       * \param UniqueIdentifier A unique identifier for the struct.
       *)

      createStructType (         Scope           : DIScope;
                        READONLY Name            : StringRef;
                                 File            : DIFile;
                                 LineNumber      : uint;
                                 SizeInBits      : uint64_t;
                                 AlignInBits     : uint32_t;
                                 Flags           : INTEGER;
                                 DerivedFrom     : DIType;
                                 Elements        : DINodeArray;
                                 RunTimeLang     : uint;
                                 VTableHolder    : DIType;
                        READONLY UniqueIdentifier: StringRef;   ):
                        DICompositeType;

      (** Create debugging information entry for a struct.
       * \param Scope        Scope in which this struct is defined.
       * \param Name         Struct name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     Struct elements.
       * \param RunTimeLang  Optional parameter, Objective-C runtime version.
       * \param UniqueIdentifier A unique identifier for the struct.
       *)

      createStructType1 (         Scope       : DIScope;
                         READONLY Name        : StringRef;
                                  File        : DIFile;
                                  LineNumber  : uint;
                                  SizeInBits  : uint64_t;
                                  AlignInBits : uint32_t;
                                  Flags       : INTEGER;
                                  DerivedFrom : DIType;
                                  Elements    : DINodeArray;
                                  RunTimeLang : uint;
                                  VTableHolder: DIType;      ):
                         DICompositeType;

      (** Create debugging information entry for a struct.
       * \param Scope        Scope in which this struct is defined.
       * \param Name         Struct name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     Struct elements.
       * \param RunTimeLang  Optional parameter, Objective-C runtime version.
       * \param UniqueIdentifier A unique identifier for the struct.
       *)

      createStructType2 (         Scope      : DIScope;
                         READONLY Name       : StringRef;
                                  File       : DIFile;
                                  LineNumber : uint;
                                  SizeInBits : uint64_t;
                                  AlignInBits: uint32_t;
                                  Flags      : INTEGER;
                                  DerivedFrom: DIType;
                                  Elements   : DINodeArray;
                                  RunTimeLang: uint;        ):
                         DICompositeType;

      (** Create debugging information entry for a struct.
       * \param Scope        Scope in which this struct is defined.
       * \param Name         Struct name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     Struct elements.
       * \param RunTimeLang  Optional parameter, Objective-C runtime version.
       * \param UniqueIdentifier A unique identifier for the struct.
       *)

      createStructType3 (         Scope      : DIScope;
                         READONLY Name       : StringRef;
                                  File       : DIFile;
                                  LineNumber : uint;
                                  SizeInBits : uint64_t;
                                  AlignInBits: uint32_t;
                                  Flags      : INTEGER;
                                  DerivedFrom: DIType;
                                  Elements   : DINodeArray; ):
                         DICompositeType;

      (** Create debugging information entry for an union.
       * \param Scope        Scope in which this union is defined.
       * \param Name         Union name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     Union elements.
       * \param RunTimeLang  Optional parameter, Objective-C runtime version.
       * \param UniqueIdentifier A unique identifier for the union.
       *)

      createUnionType (         Scope           : DIScope;
                       READONLY Name            : StringRef;
                                File            : DIFile;
                                LineNumber      : uint;
                                SizeInBits      : uint64_t;
                                AlignInBits     : uint32_t;
                                Flags           : INTEGER;
                                Elements        : DINodeArray;
                                RunTimeLang     : uint;
                       READONLY UniqueIdentifier: StringRef;   ):
                       DICompositeType;

      (** Create debugging information entry for an union.
       * \param Scope        Scope in which this union is defined.
       * \param Name         Union name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     Union elements.
       * \param RunTimeLang  Optional parameter, Objective-C runtime version.
       * \param UniqueIdentifier A unique identifier for the union.
       *)

      createUnionType1 (         Scope      : DIScope;
                        READONLY Name       : StringRef;
                                 File       : DIFile;
                                 LineNumber : uint;
                                 SizeInBits : uint64_t;
                                 AlignInBits: uint32_t;
                                 Flags      : INTEGER;
                                 Elements   : DINodeArray;
                                 RunTimeLang: uint;        ):
                        DICompositeType;

      (** Create debugging information entry for an union.
       * \param Scope        Scope in which this union is defined.
       * \param Name         Union name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Elements     Union elements.
       * \param RunTimeLang  Optional parameter, Objective-C runtime version.
       * \param UniqueIdentifier A unique identifier for the union.
       *)

      createUnionType2 (         Scope      : DIScope;
                        READONLY Name       : StringRef;
                                 File       : DIFile;
                                 LineNumber : uint;
                                 SizeInBits : uint64_t;
                                 AlignInBits: uint32_t;
                                 Flags      : INTEGER;
                                 Elements   : DINodeArray; ):
                        DICompositeType;

      (** Create debugging information entry for a variant part.  A
       * variant part normally has a discriminator (though this is not
       * required) and a number of variant children.
       * \param Scope        Scope in which this union is defined.
       * \param Name         Union name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Discriminator Discriminant member
       * \param Elements     Variant elements.
       * \param UniqueIdentifier A unique identifier for the union.
       *)

      createVariantPart (         Scope           : DIScope;
                         READONLY Name            : StringRef;
                                  File            : DIFile;
                                  LineNumber      : uint;
                                  SizeInBits      : uint64_t;
                                  AlignInBits     : uint32_t;
                                  Flags           : INTEGER;
                                  Discriminator   : DIDerivedType;
                                  Elements        : DINodeArray;
                         READONLY UniqueIdentifier: StringRef;     ):
                         DICompositeType;

      (** Create debugging information entry for a variant part.  A
       * variant part normally has a discriminator (though this is not
       * required) and a number of variant children.
       * \param Scope        Scope in which this union is defined.
       * \param Name         Union name.
       * \param File         File where this member is defined.
       * \param LineNumber   Line number.
       * \param SizeInBits   Member size.
       * \param AlignInBits  Member alignment.
       * \param Flags        Flags to encode member attribute, e.g. private
       * \param Discriminator Discriminant member
       * \param Elements     Variant elements.
       * \param UniqueIdentifier A unique identifier for the union.
       *)

      createVariantPart1 (         Scope        : DIScope;
                          READONLY Name         : StringRef;
                                   File         : DIFile;
                                   LineNumber   : uint;
                                   SizeInBits   : uint64_t;
                                   AlignInBits  : uint32_t;
                                   Flags        : INTEGER;
                                   Discriminator: DIDerivedType;
                                   Elements     : DINodeArray;   ):
                          DICompositeType;

      (** Create debugging information for template
       * type parameter.
       * \param Scope        Scope in which this type is defined.
       * \param Name         Type parameter name.
       * \param Ty           Parameter type.
       *)

      createTemplateTypeParameter (         Scope: DIScope;
                                   READONLY Name : StringRef;
                                            Ty   : DIType;    ):
                                   DITemplateTypeParameter;

      (** Create debugging information for template
       * value parameter.
       * \param Scope        Scope in which this type is defined.
       * \param Name         Value parameter name.
       * \param Ty           Parameter type.
       * \param Val          Constant parameter value.
       *)

      createTemplateValueParameter (         Scope: DIScope;
                                    READONLY Name : StringRef;
                                             Ty   : DIType;
                                             Val  : DIConstant; ):
                                    DITemplateValueParameter;

      (** Create debugging information for a template template parameter.
       * \param Scope        Scope in which this type is defined.
       * \param Name         Value parameter name.
       * \param Ty           Parameter type.
       * \param Val          The fully qualified name of the template.
       *)

      createTemplateTemplateParameter (         Scope: DIScope;
                                       READONLY Name : StringRef;
                                                Ty   : DIType;
                                       READONLY Val  : StringRef; ):
                                       DITemplateValueParameter;

      (** Create debugging information for a template parameter pack.
       * \param Scope        Scope in which this type is defined.
       * \param Name         Value parameter name.
       * \param Ty           Parameter type.
       * \param Val          An array of types in the pack.
       *)

      createTemplateParameterPack (         Scope: DIScope;
                                   READONLY Name : StringRef;
                                            Ty   : DIType;
                                            Val  : DINodeArray; ):
                                   DITemplateValueParameter;

      (** Create debugging information entry for an array.
       * \param Size         Array size.
       * \param AlignInBits  Alignment.
       * \param Ty           Element type.
       * \param Subscripts   Subscripts.
       *)

      createArrayType (Size       : uint64_t;
                       AlignInBits: uint32_t;
                       Ty         : DIType;
                       Subscripts : DINodeArray; ): DICompositeType;

      (** Create debugging information entry for a vector type.
       * \param Size         Array size.
       * \param AlignInBits  Alignment.
       * \param Ty           Element type.
       * \param Subscripts   Subscripts.
       *)

      createVectorType (Size       : uint64_t;
                        AlignInBits: uint32_t;
                        Ty         : DIType;
                        Subscripts : DINodeArray; ): DICompositeType;

      (** Create debugging information entry for an
       * enumeration.
       * \param Scope          Scope in which this enumeration is defined.
       * \param Name           Union name.
       * \param File           File where this member is defined.
       * \param LineNumber     Line number.
       * \param SizeInBits     Member size.
       * \param AlignInBits    Member alignment.
       * \param Elements       Enumeration elements.
       * \param UnderlyingType Underlying type of a C++11/ObjC fixed enum.
       * \param UniqueIdentifier A unique identifier for the enum.
       * \param IsScoped Boolean flag indicate if this is C++11/ObjC 'enum class'.
       *)

      createEnumerationType (         Scope           : DIScope;
                             READONLY Name            : StringRef;
                                      File            : DIFile;
                                      LineNumber      : uint;
                                      SizeInBits      : uint64_t;
                                      AlignInBits     : uint32_t;
                                      Elements        : DINodeArray;
                                      UnderlyingType  : DIType;
                             READONLY UniqueIdentifier: StringRef;
                                      IsScoped        : BOOLEAN;     ):
                             DICompositeType;

      (** Create debugging information entry for an
       * enumeration.
       * \param Scope          Scope in which this enumeration is defined.
       * \param Name           Union name.
       * \param File           File where this member is defined.
       * \param LineNumber     Line number.
       * \param SizeInBits     Member size.
       * \param AlignInBits    Member alignment.
       * \param Elements       Enumeration elements.
       * \param UnderlyingType Underlying type of a C++11/ObjC fixed enum.
       * \param UniqueIdentifier A unique identifier for the enum.
       * \param IsScoped Boolean flag indicate if this is C++11/ObjC 'enum class'.
       *)

      createEnumerationType1 (         Scope           : DIScope;
                              READONLY Name            : StringRef;
                                       File            : DIFile;
                                       LineNumber      : uint;
                                       SizeInBits      : uint64_t;
                                       AlignInBits     : uint32_t;
                                       Elements        : DINodeArray;
                                       UnderlyingType  : DIType;
                              READONLY UniqueIdentifier: StringRef;   ):
                              DICompositeType;

      (** Create debugging information entry for an
       * enumeration.
       * \param Scope          Scope in which this enumeration is defined.
       * \param Name           Union name.
       * \param File           File where this member is defined.
       * \param LineNumber     Line number.
       * \param SizeInBits     Member size.
       * \param AlignInBits    Member alignment.
       * \param Elements       Enumeration elements.
       * \param UnderlyingType Underlying type of a C++11/ObjC fixed enum.
       * \param UniqueIdentifier A unique identifier for the enum.
       * \param IsScoped Boolean flag indicate if this is C++11/ObjC 'enum class'.
       *)

      createEnumerationType2 (         Scope         : DIScope;
                              READONLY Name          : StringRef;
                                       File          : DIFile;
                                       LineNumber    : uint;
                                       SizeInBits    : uint64_t;
                                       AlignInBits   : uint32_t;
                                       Elements      : DINodeArray;
                                       UnderlyingType: DIType;      ):
                              DICompositeType;

      (** Create subroutine type.
       * \param ParameterTypes  An array of subroutine parameter types. This
                              * includes return type at 0th index.
       * \param Flags           E.g.: LValueReference.
                              * These flags are used to emit dwarf attributes.
       * \param CC              Calling convention, e.g. dwarf::DW_CC_normal
       *)

      createSubroutineType (ParameterTypes: DITypeRefArray;
                            Flags         : INTEGER;
                            CC            : uint;           ):
                            DISubroutineType;

      (** Create subroutine type.
       * \param ParameterTypes  An array of subroutine parameter types. This
                              * includes return type at 0th index.
       * \param Flags           E.g.: LValueReference.
                              * These flags are used to emit dwarf attributes.
       * \param CC              Calling convention, e.g. dwarf::DW_CC_normal
       *)

      createSubroutineType1 (ParameterTypes: DITypeRefArray;
                             Flags         : INTEGER;        ):
                             DISubroutineType;

      (** Create subroutine type.
       * \param ParameterTypes  An array of subroutine parameter types. This
                              * includes return type at 0th index.
       * \param Flags           E.g.: LValueReference.
                              * These flags are used to emit dwarf attributes.
       * \param CC              Calling convention, e.g. dwarf::DW_CC_normal
       *)

      createSubroutineType2 (ParameterTypes: DITypeRefArray; ):
                             DISubroutineType;

      (** Create a permanent forward-declared type.
      *)

      createForwardDecl (         Tag              : uint;
                         READONLY Name             : StringRef;
                                  Scope            : DIScope;
                                  F                : DIFile;
                                  Line, RuntimeLang: uint;
                                  SizeInBits       : uint64_t;
                                  AlignInBits      : uint32_t;
                         READONLY UniqueIdentifier : StringRef; ):
                         DICompositeType;

      (** Create a permanent forward-declared type.
      *)

      createForwardDecl1 (         Tag              : uint;
                          READONLY Name             : StringRef;
                                   Scope            : DIScope;
                                   F                : DIFile;
                                   Line, RuntimeLang: uint;
                                   SizeInBits       : uint64_t;
                                   AlignInBits      : uint32_t;  ):
                          DICompositeType;

      (** Create a permanent forward-declared type.
      *)

      createForwardDecl2 (         Tag              : uint;
                          READONLY Name             : StringRef;
                                   Scope            : DIScope;
                                   F                : DIFile;
                                   Line, RuntimeLang: uint;
                                   SizeInBits       : uint64_t;  ):
                          DICompositeType;

      (** Create a permanent forward-declared type.
      *)

      createForwardDecl3 (         Tag              : uint;
                          READONLY Name             : StringRef;
                                   Scope            : DIScope;
                                   F                : DIFile;
                                   Line, RuntimeLang: uint;      ):
                          DICompositeType;

      (** Create a permanent forward-declared type.
      *)

      createForwardDecl4 (         Tag  : uint;
                          READONLY Name : StringRef;
                                   Scope: DIScope;
                                   F    : DIFile;
                                   Line : uint;      ): DICompositeType;

      (** Create a temporary forward-declared type.
      *)

      createReplaceableCompositeType (         Tag  : uint;
                                      READONLY Name : StringRef;
                                               Scope: DIScope;
                                               F    : DIFile;
                                      Line, RuntimeLang: uint;
                                      SizeInBits       : uint64_t;
                                      AlignInBits      : uint32_t;
                                      Flags            : INTEGER;
                                      READONLY UniqueIdentifier: StringRef; ):
                                      DICompositeType;

      (** Create a temporary forward-declared type.
      *)

      createReplaceableCompositeType1 (         Tag  : uint;
                                       READONLY Name : StringRef;
                                                Scope: DIScope;
                                                F    : DIFile;
                                       Line, RuntimeLang: uint;
                                       SizeInBits       : uint64_t;
                                       AlignInBits      : uint32_t;
                                       Flags            : INTEGER;  ):
                                       DICompositeType;

      (** Create a temporary forward-declared type.
      *)

      createReplaceableCompositeType2 (         Tag  : uint;
                                       READONLY Name : StringRef;
                                                Scope: DIScope;
                                                F    : DIFile;
                                       Line, RuntimeLang: uint;
                                       SizeInBits       : uint64_t;
                                       AlignInBits      : uint32_t; ):
                                       DICompositeType;

      (** Create a temporary forward-declared type.
      *)

      createReplaceableCompositeType3 (         Tag  : uint;
                                       READONLY Name : StringRef;
                                                Scope: DIScope;
                                                F    : DIFile;
                                       Line, RuntimeLang: uint;
                                       SizeInBits       : uint64_t; ):
                                       DICompositeType;

      (** Create a temporary forward-declared type.
      *)

      createReplaceableCompositeType4 (         Tag  : uint;
                                       READONLY Name : StringRef;
                                                Scope: DIScope;
                                                F    : DIFile;
                                       Line, RuntimeLang: uint; ):
                                       DICompositeType;

      (** Create a temporary forward-declared type.
      *)

      createReplaceableCompositeType5 (         Tag  : uint;
                                       READONLY Name : StringRef;
                                                Scope: DIScope;
                                                F    : DIFile;
                                                Line : uint;      ):
                                       DICompositeType;

      (** Retain DIScope* in a module even if it is not referenced
       * through debug info anchors.
       *)

      retainType (T: DIScope; );

      (** Create unspecified parameter type
       * for a subroutine type.
       *)

      createUnspecifiedParameter (): DIBasicType;

      (** Get a DINodeArray, create one if required.
      *)

      getOrCreateArray (READONLY Elements: ArrayMDPtr; ): DINodeArray;

      (** Get a DIMacroNodeArray, create one if required.
      *)

      getOrCreateMacroArray (READONLY Elements: ArrayMDPtr; ):
                             DIMacroNodeArray;

      (** Get a DITypeRefArray, create one if required.
      *)

      getOrCreateTypeArray (READONLY Elements: ArrayMDPtr; ):
                            DITypeRefArray;

      (** Create a descriptor for a value range.  This
       * implicitly uniques the values returned.
       *)

      getOrCreateSubrange (Lo, Count: int64_t; ): DISubrange;
      getOrCreateSubrange1 (Lo: int64_t; CountNode: MetadataRef; ):
                            DISubrange;

      (** Create a new descriptor for the specified variable.
       * \param Context     Variable scope.
       * \param Name        Name of the variable.
       * \param LinkageName Mangled  name of the variable.
       * \param File        File where this variable is defined.
       * \param LineNo      Line number.
       * \param Ty          Variable Type.
       * \param IsLocalToUnit Boolean flag indicate whether this variable is
                            * externally visible or not.
       * \param Expr        The location of the global relative to the attached
                          * GlobalVariable.
       * \param Decl        Reference to the corresponding declaration.
       * \param AlignInBits Variable alignment(or 0 if no alignment attr was
                          * specified)
       *)

      createGlobalVariableExpression (Context: DIScope;
                                      READONLY Name, LinkageName: StringRef;
                                      File                    : DIFile;
                                      LineNo                  : uint;
                                      Ty                      : DIType;
                                      IsLocalToUnit, isDefined: BOOLEAN;
                                      Expr          : DIExpression;
                                      Decl          : MDNode;
                                      TemplateParams: MDTuple;
                                      AlignInBits   : uint32_t;     ):
                                      DIGlobalVariableExpression;

      (** Create a new descriptor for the specified variable.
       * \param Context     Variable scope.
       * \param Name        Name of the variable.
       * \param LinkageName Mangled  name of the variable.
       * \param File        File where this variable is defined.
       * \param LineNo      Line number.
       * \param Ty          Variable Type.
       * \param IsLocalToUnit Boolean flag indicate whether this variable is
                            * externally visible or not.
       * \param Expr        The location of the global relative to the attached
                          * GlobalVariable.
       * \param Decl        Reference to the corresponding declaration.
       * \param AlignInBits Variable alignment(or 0 if no alignment attr was
                          * specified)
       *)

      createGlobalVariableExpression1 (Context: DIScope;
                                       READONLY Name, LinkageName: StringRef;
                                       File                    : DIFile;
                                       LineNo                  : uint;
                                       Ty                      : DIType;
                                       IsLocalToUnit, isDefined: BOOLEAN;
                                       Expr          : DIExpression;
                                       Decl          : MDNode;
                                       TemplateParams: MDTuple;      ):
                                       DIGlobalVariableExpression;

      (** Create a new descriptor for the specified variable.
       * \param Context     Variable scope.
       * \param Name        Name of the variable.
       * \param LinkageName Mangled  name of the variable.
       * \param File        File where this variable is defined.
       * \param LineNo      Line number.
       * \param Ty          Variable Type.
       * \param IsLocalToUnit Boolean flag indicate whether this variable is
                            * externally visible or not.
       * \param Expr        The location of the global relative to the attached
                          * GlobalVariable.
       * \param Decl        Reference to the corresponding declaration.
       * \param AlignInBits Variable alignment(or 0 if no alignment attr was
                          * specified)
       *)

      createGlobalVariableExpression2 (Context: DIScope;
                                       READONLY Name, LinkageName: StringRef;
                                       File                    : DIFile;
                                       LineNo                  : uint;
                                       Ty                      : DIType;
                                       IsLocalToUnit, isDefined: BOOLEAN;
                                       Expr: DIExpression;
                                       Decl: MDNode;       ):
                                       DIGlobalVariableExpression;

      (** Create a new descriptor for the specified variable.
       * \param Context     Variable scope.
       * \param Name        Name of the variable.
       * \param LinkageName Mangled  name of the variable.
       * \param File        File where this variable is defined.
       * \param LineNo      Line number.
       * \param Ty          Variable Type.
       * \param IsLocalToUnit Boolean flag indicate whether this variable is
                            * externally visible or not.
       * \param Expr        The location of the global relative to the attached
                          * GlobalVariable.
       * \param Decl        Reference to the corresponding declaration.
       * \param AlignInBits Variable alignment(or 0 if no alignment attr was
                          * specified)
       *)

      createGlobalVariableExpression3 (Context: DIScope;
                                       READONLY Name, LinkageName: StringRef;
                                       File                    : DIFile;
                                       LineNo                  : uint;
                                       Ty                      : DIType;
                                       IsLocalToUnit, isDefined: BOOLEAN;
                                       Expr: DIExpression; ):
                                       DIGlobalVariableExpression;

      (** Create a new descriptor for the specified variable.
       * \param Context     Variable scope.
       * \param Name        Name of the variable.
       * \param LinkageName Mangled  name of the variable.
       * \param File        File where this variable is defined.
       * \param LineNo      Line number.
       * \param Ty          Variable Type.
       * \param IsLocalToUnit Boolean flag indicate whether this variable is
                            * externally visible or not.
       * \param Expr        The location of the global relative to the attached
                          * GlobalVariable.
       * \param Decl        Reference to the corresponding declaration.
       * \param AlignInBits Variable alignment(or 0 if no alignment attr was
                          * specified)
       *)

      createGlobalVariableExpression4 (Context: DIScope;
                                       READONLY Name, LinkageName: StringRef;
                                       File                    : DIFile;
                                       LineNo                  : uint;
                                       Ty                      : DIType;
                                       IsLocalToUnit, isDefined: BOOLEAN; ):
                                       DIGlobalVariableExpression;

      (** Create a new descriptor for the specified variable.
       * \param Context     Variable scope.
       * \param Name        Name of the variable.
       * \param LinkageName Mangled  name of the variable.
       * \param File        File where this variable is defined.
       * \param LineNo      Line number.
       * \param Ty          Variable Type.
       * \param IsLocalToUnit Boolean flag indicate whether this variable is
                            * externally visible or not.
       * \param Expr        The location of the global relative to the attached
                          * GlobalVariable.
       * \param Decl        Reference to the corresponding declaration.
       * \param AlignInBits Variable alignment(or 0 if no alignment attr was
                          * specified)
       *)

      createGlobalVariableExpression5 (Context: DIScope;
                                       READONLY Name, LinkageName: StringRef;
                                       File         : DIFile;
                                       LineNo       : uint;
                                       Ty           : DIType;
                                       IsLocalToUnit: BOOLEAN; ):
                                       DIGlobalVariableExpression;

      (** Identical to createGlobalVariable
       * except that the resulting DbgNode is temporary and meant to be RAUWed.
       *)

      createTempGlobalVariableFwdDecl (Context: DIScope;
                                       READONLY Name, LinkageName: StringRef;
                                       File          : DIFile;
                                       LineNo        : uint;
                                       Ty            : DIType;
                                       IsLocalToUnit : BOOLEAN;
                                       Decl          : MDNode;
                                       TemplateParams: MDTuple;
                                       AlignInBits   : uint32_t; ):
                                       DIGlobalVariable;

      (** Identical to createGlobalVariable
       * except that the resulting DbgNode is temporary and meant to be RAUWed.
       *)

      createTempGlobalVariableFwdDecl1 (Context: DIScope;
                                        READONLY Name, LinkageName: StringRef;
                                        File          : DIFile;
                                        LineNo        : uint;
                                        Ty            : DIType;
                                        IsLocalToUnit : BOOLEAN;
                                        Decl          : MDNode;
                                        TemplateParams: MDTuple; ):
                                        DIGlobalVariable;

      (** Identical to createGlobalVariable
       * except that the resulting DbgNode is temporary and meant to be RAUWed.
       *)

      createTempGlobalVariableFwdDecl2 (Context: DIScope;
                                        READONLY Name, LinkageName: StringRef;
                                        File         : DIFile;
                                        LineNo       : uint;
                                        Ty           : DIType;
                                        IsLocalToUnit: BOOLEAN;
                                        Decl         : MDNode;  ):
                                        DIGlobalVariable;

      (** Identical to createGlobalVariable
       * except that the resulting DbgNode is temporary and meant to be RAUWed.
       *)

      createTempGlobalVariableFwdDecl3 (Context: DIScope;
                                        READONLY Name, LinkageName: StringRef;
                                        File         : DIFile;
                                        LineNo       : uint;
                                        Ty           : DIType;
                                        IsLocalToUnit: BOOLEAN; ):
                                        DIGlobalVariable;

      (** Create a new descriptor for an auto variable.  This is a local variable
       * that is not a subprogram parameter.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       * If \c AlwaysPreserve, this variable will be referenced from its
       * containing subprogram, and will survive some optimizations.
       *)

      createAutoVariable (         Scope         : DIScope;
                          READONLY Name          : StringRef;
                                   File          : DIFile;
                                   LineNo        : uint;
                                   Ty            : DIType;
                                   AlwaysPreserve: BOOLEAN;
                                   Flags         : INTEGER;
                                   AlignInBits   : uint32_t;  ):
                          DILocalVariable;

      (** Create a new descriptor for an auto variable.  This is a local variable
       * that is not a subprogram parameter.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       * If \c AlwaysPreserve, this variable will be referenced from its
       * containing subprogram, and will survive some optimizations.
       *)

      createAutoVariable1 (         Scope         : DIScope;
                           READONLY Name          : StringRef;
                                    File          : DIFile;
                                    LineNo        : uint;
                                    Ty            : DIType;
                                    AlwaysPreserve: BOOLEAN;
                                    Flags         : INTEGER;   ):
                           DILocalVariable;

      (** Create a new descriptor for an auto variable.  This is a local variable
       * that is not a subprogram parameter.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       * If \c AlwaysPreserve, this variable will be referenced from its
       * containing subprogram, and will survive some optimizations.
       *)

      createAutoVariable2 (         Scope         : DIScope;
                           READONLY Name          : StringRef;
                                    File          : DIFile;
                                    LineNo        : uint;
                                    Ty            : DIType;
                                    AlwaysPreserve: BOOLEAN;   ):
                           DILocalVariable;

      (** Create a new descriptor for an auto variable.  This is a local variable
       * that is not a subprogram parameter.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       * If \c AlwaysPreserve, this variable will be referenced from its
       * containing subprogram, and will survive some optimizations.
       *)

      createAutoVariable3 (         Scope : DIScope;
                           READONLY Name  : StringRef;
                                    File  : DIFile;
                                    LineNo: uint;
                                    Ty    : DIType;    ): DILocalVariable;

      (** Create a new descriptor for an label.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       *)

      createLabel (         Scope         : DIScope;
                   READONLY Name          : StringRef;
                            File          : DIFile;
                            LineNo        : uint;
                            AlwaysPreserve: BOOLEAN;   ): DILabel;

      (** Create a new descriptor for an label.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       *)

      createLabel1 (         Scope : DIScope;
                    READONLY Name  : StringRef;
                             File  : DIFile;
                             LineNo: uint;      ): DILabel;

      (** Create a new descriptor for a parameter variable.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       * \c ArgNo is the index (starting from \c 1) of this variable in the
       * subprogram parameters.  \c ArgNo should not conflict with other
       * parameters of the same subprogram.
       * If \c AlwaysPreserve, this variable will be referenced from its
       * containing subprogram, and will survive some optimizations.
       *)

      createParameterVariable (         Scope         : DIScope;
                               READONLY Name          : StringRef;
                                        ArgNo         : uint;
                                        File          : DIFile;
                                        LineNo        : uint;
                                        Ty            : DIType;
                                        AlwaysPreserve: BOOLEAN;
                                        Flags         : INTEGER;   ):
                               DILocalVariable;

      (** Create a new descriptor for a parameter variable.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       * \c ArgNo is the index (starting from \c 1) of this variable in the
       * subprogram parameters.  \c ArgNo should not conflict with other
       * parameters of the same subprogram.
       * If \c AlwaysPreserve, this variable will be referenced from its
       * containing subprogram, and will survive some optimizations.
       *)

      createParameterVariable1 (         Scope         : DIScope;
                                READONLY Name          : StringRef;
                                         ArgNo         : uint;
                                         File          : DIFile;
                                         LineNo        : uint;
                                         Ty            : DIType;
                                         AlwaysPreserve: BOOLEAN;   ):
                                DILocalVariable;

      (** Create a new descriptor for a parameter variable.
       * \c Scope must be a \a DILocalScope, and thus its scope chain eventually
       * leads to a \a DISubprogram.
       * \c ArgNo is the index (starting from \c 1) of this variable in the
       * subprogram parameters.  \c ArgNo should not conflict with other
       * parameters of the same subprogram.
       * If \c AlwaysPreserve, this variable will be referenced from its
       * containing subprogram, and will survive some optimizations.
       *)

      createParameterVariable2 (         Scope : DIScope;
                                READONLY Name  : StringRef;
                                         ArgNo : uint;
                                         File  : DIFile;
                                         LineNo: uint;
                                         Ty    : DIType;    ):
                                DILocalVariable;

      (** Create a new descriptor for the specified
       * variable which has a complex address expression for its address.
       * \param Addr        An array of complex address operations.
       *)

      createExpression (READONLY Addr: ArrayUInt64; ): DIExpression;

      (** Create a new descriptor for the specified
       * variable which has a complex address expression for its address.
       * \param Addr        An array of complex address operations.
       *)

      createExpression1 (): DIExpression;
      createExpression2 (READONLY Addr: ArrayInt64; ): DIExpression;

      (** Create an expression for a variable that does not have an address, but
       * does have a constant value.
       *)

      createConstantValueExpression (Val: uint64_t; ): DIExpression;

      (** Create a new descriptor for the specified subprogram.
       * See comments in DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param ScopeLine     Set to the beginning of the scope this starts
       * \param Flags         e.g. is this function prototyped or not.
                            * These flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createFunction (         Scope            : DIScope;
                      READONLY Name, LinkageName: StringRef;
                               File             : DIFile;
                               LineNo           : uint;
                               Ty               : DISubroutineType;
                               ScopeLine        : uint;
                               Flags, SPFlags   : INTEGER;
                      TParams    : DITemplateParameterArray;
                      Decl       : DISubprogram;
                      ThrownTypes: DITypeArray;              ):
                      DISubprogram;

      (** Create a new descriptor for the specified subprogram.
       * See comments in DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param ScopeLine     Set to the beginning of the scope this starts
       * \param Flags         e.g. is this function prototyped or not.
                            * These flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createFunction1 (         Scope            : DIScope;
                       READONLY Name, LinkageName: StringRef;
                                File             : DIFile;
                                LineNo           : uint;
                                Ty               : DISubroutineType;
                                ScopeLine        : uint;
                                Flags, SPFlags   : INTEGER;
                       TParams: DITemplateParameterArray;
                       Decl   : DISubprogram;             ): DISubprogram;

      (** Create a new descriptor for the specified subprogram.
       * See comments in DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param ScopeLine     Set to the beginning of the scope this starts
       * \param Flags         e.g. is this function prototyped or not.
                            * These flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createFunction2 (         Scope            : DIScope;
                       READONLY Name, LinkageName: StringRef;
                                File             : DIFile;
                                LineNo           : uint;
                                Ty               : DISubroutineType;
                                ScopeLine        : uint;
                                Flags, SPFlags   : INTEGER;
                       TParams: DITemplateParameterArray; ): DISubprogram;

      (** Create a new descriptor for the specified subprogram.
       * See comments in DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param ScopeLine     Set to the beginning of the scope this starts
       * \param Flags         e.g. is this function prototyped or not.
                            * These flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createFunction3 (         Scope            : DIScope;
                       READONLY Name, LinkageName: StringRef;
                                File             : DIFile;
                                LineNo           : uint;
                                Ty               : DISubroutineType;
                                ScopeLine        : uint;
                                Flags, SPFlags   : INTEGER;          ):
                       DISubprogram;

      (** Create a new descriptor for the specified subprogram.
       * See comments in DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param ScopeLine     Set to the beginning of the scope this starts
       * \param Flags         e.g. is this function prototyped or not.
                            * These flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createFunction4 (         Scope            : DIScope;
                       READONLY Name, LinkageName: StringRef;
                                File             : DIFile;
                                LineNo           : uint;
                                Ty               : DISubroutineType;
                                ScopeLine        : uint;
                                Flags            : INTEGER;          ):
                       DISubprogram;

      (** Create a new descriptor for the specified subprogram.
       * See comments in DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param ScopeLine     Set to the beginning of the scope this starts
       * \param Flags         e.g. is this function prototyped or not.
                            * These flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createFunction5 (         Scope            : DIScope;
                       READONLY Name, LinkageName: StringRef;
                                File             : DIFile;
                                LineNo           : uint;
                                Ty               : DISubroutineType;
                                ScopeLine        : uint;             ):
                       DISubprogram;

      (** Identical to createFunction,
       * except that the resulting DbgNode is meant to be RAUWed.
       *)

      createTempFunctionFwdDecl (         Scope            : DIScope;
                                 READONLY Name, LinkageName: StringRef;
                                          File             : DIFile;
                                          LineNo           : uint;
                                 Ty            : DISubroutineType;
                                 ScopeLine     : uint;
                                 Flags, SPFlags: INTEGER;
                                 TParams       : DITemplateParameterArray;
                                 Decl          : DISubprogram;
                                 ThrownTypes   : DITypeArray;              ):
                                 DISubprogram;

      (** Identical to createFunction,
       * except that the resulting DbgNode is meant to be RAUWed.
       *)

      createTempFunctionFwdDecl1 (         Scope            : DIScope;
                                  READONLY Name, LinkageName: StringRef;
                                           File             : DIFile;
                                           LineNo           : uint;
                                  Ty            : DISubroutineType;
                                  ScopeLine     : uint;
                                  Flags, SPFlags: INTEGER;
                                  TParams: DITemplateParameterArray;
                                  Decl   : DISubprogram;             ):
                                  DISubprogram;

      (** Identical to createFunction,
       * except that the resulting DbgNode is meant to be RAUWed.
       *)

      createTempFunctionFwdDecl2 (         Scope            : DIScope;
                                  READONLY Name, LinkageName: StringRef;
                                           File             : DIFile;
                                           LineNo           : uint;
                                  Ty            : DISubroutineType;
                                  ScopeLine     : uint;
                                  Flags, SPFlags: INTEGER;
                                  TParams: DITemplateParameterArray; ):
                                  DISubprogram;

      (** Identical to createFunction,
       * except that the resulting DbgNode is meant to be RAUWed.
       *)

      createTempFunctionFwdDecl3 (         Scope            : DIScope;
                                  READONLY Name, LinkageName: StringRef;
                                           File             : DIFile;
                                           LineNo           : uint;
                                  Ty            : DISubroutineType;
                                  ScopeLine     : uint;
                                  Flags, SPFlags: INTEGER;          ):
                                  DISubprogram;

      (** Identical to createFunction,
       * except that the resulting DbgNode is meant to be RAUWed.
       *)

      createTempFunctionFwdDecl4 (         Scope            : DIScope;
                                  READONLY Name, LinkageName: StringRef;
                                           File             : DIFile;
                                           LineNo           : uint;
                                  Ty       : DISubroutineType;
                                  ScopeLine: uint;
                                  Flags    : INTEGER;          ):
                                  DISubprogram;

      (** Identical to createFunction,
       * except that the resulting DbgNode is meant to be RAUWed.
       *)

      createTempFunctionFwdDecl5 (         Scope            : DIScope;
                                  READONLY Name, LinkageName: StringRef;
                                           File             : DIFile;
                                           LineNo           : uint;
                                  Ty       : DISubroutineType;
                                  ScopeLine: uint;             ):
                                  DISubprogram;

      (** Create a new descriptor for the specified C++ method.
       * See comments in \a DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param VTableIndex   Index no of this method in virtual table, or -1u if
                            * unrepresentable.
       * \param ThisAdjustment
                            * MS ABI-specific adjustment of 'this' that occurs
                            * in the prologue.
       * \param VTableHolder  Type that holds vtable.
       * \param Flags         e.g. is this function prototyped or not.
                            * This flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createMethod (         Scope            : DIScope;
                    READONLY Name, LinkageName: StringRef;
                             File             : DIFile;
                             LineNo           : uint;
                             Ty               : DISubroutineType;
                             VTableIndex      : uint;
                             ThisAdjustment   : INTEGER;
                             VTableHolder     : DIType;
                             Flags, SPFlags   : INTEGER;
                             TParams          : DITemplateParameterArray;
                             ThrownTypes      : DITypeArray;              ):
                    DISubprogram;

      (** Create a new descriptor for the specified C++ method.
       * See comments in \a DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param VTableIndex   Index no of this method in virtual table, or -1u if
                            * unrepresentable.
       * \param ThisAdjustment
                            * MS ABI-specific adjustment of 'this' that occurs
                            * in the prologue.
       * \param VTableHolder  Type that holds vtable.
       * \param Flags         e.g. is this function prototyped or not.
                            * This flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createMethod1 (         Scope            : DIScope;
                     READONLY Name, LinkageName: StringRef;
                              File             : DIFile;
                              LineNo           : uint;
                              Ty               : DISubroutineType;
                              VTableIndex      : uint;
                              ThisAdjustment   : INTEGER;
                              VTableHolder     : DIType;
                              Flags, SPFlags   : INTEGER;
                              TParams          : DITemplateParameterArray; ):
                     DISubprogram;

      (** Create a new descriptor for the specified C++ method.
       * See comments in \a DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param VTableIndex   Index no of this method in virtual table, or -1u if
                            * unrepresentable.
       * \param ThisAdjustment
                            * MS ABI-specific adjustment of 'this' that occurs
                            * in the prologue.
       * \param VTableHolder  Type that holds vtable.
       * \param Flags         e.g. is this function prototyped or not.
                            * This flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createMethod2 (         Scope            : DIScope;
                     READONLY Name, LinkageName: StringRef;
                              File             : DIFile;
                              LineNo           : uint;
                              Ty               : DISubroutineType;
                              VTableIndex      : uint;
                              ThisAdjustment   : INTEGER;
                              VTableHolder     : DIType;
                              Flags, SPFlags   : INTEGER;          ):
                     DISubprogram;

      (** Create a new descriptor for the specified C++ method.
       * See comments in \a DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param VTableIndex   Index no of this method in virtual table, or -1u if
                            * unrepresentable.
       * \param ThisAdjustment
                            * MS ABI-specific adjustment of 'this' that occurs
                            * in the prologue.
       * \param VTableHolder  Type that holds vtable.
       * \param Flags         e.g. is this function prototyped or not.
                            * This flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createMethod3 (         Scope            : DIScope;
                     READONLY Name, LinkageName: StringRef;
                              File             : DIFile;
                              LineNo           : uint;
                              Ty               : DISubroutineType;
                              VTableIndex      : uint;
                              ThisAdjustment   : INTEGER;
                              VTableHolder     : DIType;
                              Flags            : INTEGER;          ):
                     DISubprogram;

      (** Create a new descriptor for the specified C++ method.
       * See comments in \a DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param VTableIndex   Index no of this method in virtual table, or -1u if
                            * unrepresentable.
       * \param ThisAdjustment
                            * MS ABI-specific adjustment of 'this' that occurs
                            * in the prologue.
       * \param VTableHolder  Type that holds vtable.
       * \param Flags         e.g. is this function prototyped or not.
                            * This flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createMethod4 (         Scope            : DIScope;
                     READONLY Name, LinkageName: StringRef;
                              File             : DIFile;
                              LineNo           : uint;
                              Ty               : DISubroutineType;
                              VTableIndex      : uint;
                              ThisAdjustment   : INTEGER;
                              VTableHolder     : DIType;           ):
                     DISubprogram;

      (** Create a new descriptor for the specified C++ method.
       * See comments in \a DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param VTableIndex   Index no of this method in virtual table, or -1u if
                            * unrepresentable.
       * \param ThisAdjustment
                            * MS ABI-specific adjustment of 'this' that occurs
                            * in the prologue.
       * \param VTableHolder  Type that holds vtable.
       * \param Flags         e.g. is this function prototyped or not.
                            * This flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createMethod5 (         Scope            : DIScope;
                     READONLY Name, LinkageName: StringRef;
                              File             : DIFile;
                              LineNo           : uint;
                              Ty               : DISubroutineType;
                              VTableIndex      : uint;
                              ThisAdjustment   : INTEGER;          ):
                     DISubprogram;

      (** Create a new descriptor for the specified C++ method.
       * See comments in \a DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param VTableIndex   Index no of this method in virtual table, or -1u if
                            * unrepresentable.
       * \param ThisAdjustment
                            * MS ABI-specific adjustment of 'this' that occurs
                            * in the prologue.
       * \param VTableHolder  Type that holds vtable.
       * \param Flags         e.g. is this function prototyped or not.
                            * This flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createMethod6 (         Scope            : DIScope;
                     READONLY Name, LinkageName: StringRef;
                              File             : DIFile;
                              LineNo           : uint;
                              Ty               : DISubroutineType;
                              VTableIndex      : uint;             ):
                     DISubprogram;

      (** Create a new descriptor for the specified C++ method.
       * See comments in \a DISubprogram* for descriptions of these fields.
       * \param Scope         Function scope.
       * \param Name          Function name.
       * \param LinkageName   Mangled function name.
       * \param File          File where this variable is defined.
       * \param LineNo        Line number.
       * \param Ty            Function type.
       * \param VTableIndex   Index no of this method in virtual table, or -1u if
                            * unrepresentable.
       * \param ThisAdjustment
                            * MS ABI-specific adjustment of 'this' that occurs
                            * in the prologue.
       * \param VTableHolder  Type that holds vtable.
       * \param Flags         e.g. is this function prototyped or not.
                            * This flags are used to emit dwarf attributes.
       * \param SPFlags       Additional flags specific to subprograms.
       * \param TParams       Function template parameters.
       * \param ThrownTypes   Exception types this function may throw.
       *)

      createMethod7 (         Scope            : DIScope;
                     READONLY Name, LinkageName: StringRef;
                              File             : DIFile;
                              LineNo           : uint;
                              Ty               : DISubroutineType; ):
                     DISubprogram;

      (** Create common block entry for a Fortran common block.
       * \param Scope       Scope of this common block.
       * \param decl        Global variable declaration.
       * \param Name        The name of this common block.
       * \param File        The file this common block is defined.
       * \param LineNo      Line number.
       *)

      createCommonBlock (         Scope : DIScope;
                                  decl  : DIGlobalVariable;
                         READONLY Name  : StringRef;
                                  File  : DIFile;
                                  LineNo: uint;             ):
                         DICommonBlock;

      (** This creates new descriptor for a namespace with the specified
       * parent scope.
       * \param Scope       Namespace scope
       * \param Name        Name of this namespace
       * \param ExportSymbols True for C++ inline namespaces.
       *)

      createNameSpace (         Scope        : DIScope;
                       READONLY Name         : StringRef;
                                ExportSymbols: BOOLEAN;   ): DINamespace;

      (** This creates new descriptor for a module with the specified
       * parent scope.
       * \param Scope       Parent scope
       * \param Name        Name of this module
       * \param ConfigurationMacros
                          * A space-separated shell-quoted list of -D macro
                          * definitions as they would appear on a command line.
       * \param IncludePath The path to the module map file.
       * \param SysRoot     The clang system root (value of -isysroot).
       *)

      createModule (Scope: DIScope;
                    READONLY Name, ConfigurationMacros, IncludePath,
                               SysRoot: StringRef; ): DIModule;

      (** This creates a descriptor for a lexical block with a new file
       * attached. This merely extends the existing
       * lexical block as it crosses a file.
       * \param Scope       Lexical block.
       * \param File        Source file.
       * \param Discriminator DWARF path discriminator value.
       *)

      createLexicalBlockFile (Scope        : DIScope;
                              File         : DIFile;
                              Discriminator: uint;    ):
                              DILexicalBlockFile;

      (** This creates a descriptor for a lexical block with a new file
       * attached. This merely extends the existing
       * lexical block as it crosses a file.
       * \param Scope       Lexical block.
       * \param File        Source file.
       * \param Discriminator DWARF path discriminator value.
       *)

      createLexicalBlockFile1 (Scope: DIScope; File: DIFile; ):
                               DILexicalBlockFile;

      (** This creates a descriptor for a lexical block with the
       * specified parent context.
       * \param Scope         Parent lexical scope.
       * \param File          Source file.
       * \param Line          Line number.
       * \param Col           Column number.
       *)

      createLexicalBlock (Scope: DIScope; File: DIFile; Line, Col: uint; ):
                          DILexicalBlock;

      (** Create a descriptor for an imported module.
       * \param Context The scope this module is imported into
       * \param NS      The namespace being imported here.
       * \param File    File where the declaration is located.
       * \param Line    Line number of the declaration.
       *)

      createImportedModule (Context: DIScope;
                            NS     : DINamespace;
                            File   : DIFile;
                            Line   : uint;        ): DIImportedEntity;

      (** Create a descriptor for an imported module.
       * \param Context The scope this module is imported into.
       * \param NS      An aliased namespace.
       * \param File    File where the declaration is located.
       * \param Line    Line number of the declaration.
       *)

      createImportedModule1 (Context: DIScope;
                             NS     : DIImportedEntity;
                             File   : DIFile;
                             Line   : uint;             ):
                             DIImportedEntity;

      (** Create a descriptor for an imported module.
       * \param Context The scope this module is imported into.
       * \param M       The module being imported here
       * \param File    File where the declaration is located.
       * \param Line    Line number of the declaration.
       *)

      createImportedModule2 (Context: DIScope;
                             M      : DIModule;
                             File   : DIFile;
                             Line   : uint;     ): DIImportedEntity;

      (** Create a descriptor for an imported function.
       * \param Context The scope this module is imported into.
       * \param Decl    The declaration (or definition) of a function, type, or
                      * variable.
       * \param File    File where the declaration is located.
       * \param Line    Line number of the declaration.
       *)

      createImportedDeclaration (         Context: DIScope;
                                          Decl   : DINode;
                                          File   : DIFile;
                                          Line   : uint;
                                 READONLY Name   : StringRef; ):
                                 DIImportedEntity;

      (** Create a descriptor for an imported function.
       * \param Context The scope this module is imported into.
       * \param Decl    The declaration (or definition) of a function, type, or
                      * variable.
       * \param File    File where the declaration is located.
       * \param Line    Line number of the declaration.
       *)

      createImportedDeclaration1 (Context: DIScope;
                                  Decl   : DINode;
                                  File   : DIFile;
                                  Line   : uint;    ): DIImportedEntity;

      (** Insert a new llvm.dbg.declare intrinsic call.
       * \param Storage     llvm::Value of the variable
       * \param VarInfo     Variable's debug info descriptor.
       * \param Expr        A complex location expression.
       * \param DL          Debug info location.
       * \param InsertAtEnd Location for the new intrinsic.
       *)

      insertDeclareAtEnd (Storage    : ValueRef;
                          VarInfo    : DILocalVariable;
                          Expr       : DIExpression;
                          DL         : DILocation;
                          InsertAtEnd: BasicBlockRef;   ): InstructionRef;

      (** Insert a new llvm.dbg.declare intrinsic call.
       * \param Storage      llvm::Value of the variable
       * \param VarInfo      Variable's debug info descriptor.
       * \param Expr         A complex location expression.
       * \param DL           Debug info location.
       * \param InsertBefore Location for the new intrinsic.
       *)

      insertDeclareBefore (Storage     : ValueRef;
                           VarInfo     : DILocalVariable;
                           Expr        : DIExpression;
                           DL          : DILocation;
                           InsertBefore: InstructionRef;  ):
                           InstructionRef;

      (** Insert a new llvm.dbg.label intrinsic call.
       * \param LabelInfo    Label's debug info descriptor.
       * \param DL           Debug info location.
       * \param InsertBefore Location for the new intrinsic.
       *)

      insertLabelBefore (LabelInfo   : DILabel;
                         DL          : DILocation;
                         InsertBefore: InstructionRef; ): InstructionRef;

      (** Insert a new llvm.dbg.label intrinsic call.
       * \param LabelInfo    Label's debug info descriptor.
       * \param DL           Debug info location.
       * \param InsertAtEnd Location for the new intrinsic.
       *)

      insertLabelAtEnd (LabelInfo  : DILabel;
                        DL         : DILocation;
                        InsertAtEnd: BasicBlockRef; ): InstructionRef;

      (** Insert a new llvm.dbg.value intrinsic call.
       * \param Val          llvm::Value of the variable
       * \param VarInfo      Variable's debug info descriptor.
       * \param Expr         A complex location expression.
       * \param DL           Debug info location.
       * \param InsertAtEnd Location for the new intrinsic.
       *)

      insertDbgValueAtEnd (Val        : ValueRef;
                           VarInfo    : DILocalVariable;
                           Expr       : DIExpression;
                           DL         : DILocation;
                           InsertAtEnd: BasicBlockRef;   ): InstructionRef;

      (** Insert a new llvm.dbg.value intrinsic call.
       * \param Val          llvm::Value of the variable
       * \param VarInfo      Variable's debug info descriptor.
       * \param Expr         A complex location expression.
       * \param DL           Debug info location.
       * \param InsertBefore Location for the new intrinsic.
       *)

      insertDbgValueBefore (Val         : ValueRef;
                            VarInfo     : DILocalVariable;
                            Expr        : DIExpression;
                            DL          : DILocation;
                            InsertBefore: InstructionRef;  ):
                            InstructionRef;

      (** Replace the vtable holder in the given type.
       * If this creates a self reference, it may orphan some unresolved cycles
       * in the operands of \c T, so \a DIBuilder needs to track that.
       *)

      replaceVTableHolder (T: DICompositeType; VTableHolder: DIType; );

      (** Replace arrays on a composite type.
       * If \c T is resolved, but the arrays aren't -- which can happen if \c T
       * has a self-reference -- \a DIBuilder needs to track the array to
       * resolve cycles.
       *)

      replaceArrays (T: DICompositeType; Elements, TParams: DINodeArray; );

      (** Replace arrays on a composite type.
       * If \c T is resolved, but the arrays aren't -- which can happen if \c T
       * has a self-reference -- \a DIBuilder needs to track the array to
       * resolve cycles.
       *)

      replaceArrays1 (T: DICompositeType; Elements: DINodeArray; );
      destroyCxx     ();
    END;


END M3DIBuilder.
