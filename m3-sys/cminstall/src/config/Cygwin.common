TARGET_OS = "CYGWIN"

% Cygwin can be considered as Win32 or Posix.
% Cygwin programs can include windows.h and call Windows functions.
% However some things do not work.
%
% - CreateThread + system() seriously, or CreateThread + spawn
%   https://cygwin.com/pipermail/cygwin/2022-January/250471.html
%
%   #include <stdlib.h>
%   #include <stdio.h>
%   #include <windows.h>
%
%   unsigned __stdcall thread(void* p)
%   {
%       for (int i = 0; i < 100; ++i)
%           system("./a.exe");
%       return 0;
%   }
%
%   int main()
%   {
%       int i;
%       HANDLE threads[100] = {0};
%       FILE* f = fopen("a.c", "w");
%       fprintf(f, "int main() { return 0; }\n");
%       fclose(f);
%
%       system("g++ a.c");
%
%       for (i = 0; i < 100; ++i)
%           threads[i] = CreateThread(0, 0, thread, 0, 0, 0);
%
%       for (i = 0; i < 100; ++i)
%           WaitForSingleObject(threads[i], -1);
%   }
%
% This program reports various severe problems in Cygwin internals.
%
% - ExitProcess (seriously)
%   https://cygwin.com/pipermail/cygwin/2022-January/250489.html
%
%   #include <windows.h>
%
%   int main()
%   {
%       ExitProcess(1);
%   }
%
% If you run this program from Cygwin bash, $? is 0 after it exits.
% exit() works. "Pure" Win32 programs work. But ExitProcess from
% a Cygwin program does not.
%
% Modula3 workarounds:
%  Cstdlib.exit instead of ExitProcess.
%  system(make -j) instead of running gcc from threads.
%
OS_TYPE = "POSIX" % "WIN32" or "POSIX"

SYSTEM_LIBS =
{
  "LIBC" : [ "-liphlpapi", "-lrpcrt4", "-lcomctl32", "-lws2_32", "-lgdi32", "-luser32", "-ladvapi32" ],
  "TCP" : [ ],
}

SYSTEM_LIBORDER = [ "LIBC" ]

include("Autotools.common")