# Please keep configure32.ac and configure64.ac
# the same except for a few lines.
# TODO: Make them really the same, somehow (abstract m3c output)

AC_INIT(a,1)

m4_include(early.m4)

hpux_gcc_wordsize="-milp32"
hpux_cc_wordsize="+DD32"
solaris86_arch="pentium_pro"

AC_CANONICAL_HOST
AM_INIT_AUTOMAKE([-Wportability -Wall -Werror foreign no-define no-dist no-installman])
AM_MAINTAINER_MODE # to have it disabled by default due to clock skew
AC_PROG_CXX
AM_PROG_AR
AC_PROG_RANLIB

AS_CASE([$host],
    [*-*-mingw* | *-*-cygwin*], [ # optimize configure
     CC="$CXX" # .c files are C++
    ],
    [AX_PTHREAD
     LIBS="$PTHREAD_LIBS $LIBS"
     CXXFLAGS="$CXXFLAGS $PTHREAD_CFLAGS"
     CC="$PTHREAD_CXX" # .c files are C++
     CXX="$PTHREAD_CXX"
    ])

# Carry forward historical CFLAGS, but this is probably entirely over-specified.
# TODO: -fPIC everywhere.
AS_CASE([$host],
    [x86_64*haiku],             [CXXFLAGS="$CXXFLAGS -m64 -fPIC"],
    [i?86*haiku],               [CXXFLAGS="$CXXFLAGS -fPIC"],           # -m32 works with gcc-x86 but not old gcc
    [x86_64*darwin*],           [CXXFLAGS="$CXXFLAGS -arch x86_64"],
    [i?86*darwin*],             [CXXFLAGS="$CXXFLAGS -arch i386"],
    [powerpc64*darwin*],        [CXXFLAGS="$CXXFLAGS -arch ppc64"],
    [powerpc*darwin*],          [CXXFLAGS="$CXXFLAGS -arch ppc"],
    [mips64*],                  [CXXFLAGS="$CXXFLAGS -mabi=64"],
    [i?86-*-solaris2*],         [CXXFLAGS="$CXXFLAGS -xarch=$solaris86_arch -Kpic"],
    [i?86-* | *ilp32],          [CXXFLAGS="$CXXFLAGS -m32"],
    [x86_64* | amd64* | arm64*| aarch64*],
                                [CXXFLAGS="$CXXFLAGS -m64"],
    [arm*-darwin*],             [CXXFLAGS="$CXXFLAGS -march=armv6 -mcpu=arm1176jzf-s"], # Old unfinished 32bit iPhone support
    [sparc64* | sparcv9*],      [AS_IF([test x$GXX = xyes],
                                       [CXXFLAGS="$CXXFLAGS -m64 -mno-app-regs -pthread"],
                                       [CXXFLAGS="$CXXFLAGS -xarch=v9 -xcode=pic32 -xregs=no%appl -mt"])],
    [sparc*],                   [AS_IF([test x$GXX = xyes],
                                       [CXXFLAGS="$CXXFLAGS -m32 -mcpu=v9 -mno-app-regs -pthread"],
                                       [CXXFLAGS="$CXXFLAGS -xarch=v8plus -xcode=pic32 -xregs=no%appl -mt"])])

# Specify likely required compiler/linker flags where defaults
# do not likely suffice or really are not great (e.g. HPUX null deref, Alpha arounding mode).

AS_CASE([$host],
    [alpha*], # Set Alpha rounding mode etc.
    [AS_IF([test x$GXX = xyes],
           [CXXFLAGS="$CXXFLAGS -mfp-rounding-mode=d -mieee"],
           [CXXFLAGS="$CXXFLAGS -fprm d -readonly_strings -ieee_with_no_inexact"])])

AS_CASE([$host],
    [*-*-darwin*], [ ],
    [*haiku], [
        LIBS="$LIBS -lnetwork"
        ],
    [*-*-linux* | *-*-*bsd*], [
        LIBS="$LIBS -lm"
        ],
    # For Cygwin we must use LIBS here, not CXXFLAGS.
    # -lfoo bar.o does not work, but bar.o -lfoo does.
    [*-*-mingw* | *-*-cygwin*], [
        LIBS="$LIBS -liphlpapi -lrpcrt4 -lcomctl32 -lws2_32 -lgdi32 -luser32 -ladvapi32"
        ],
    [*-*-solaris*], [
        LIBS="$LIBS -lrt -lm -lnsl -lsocket -lc"
        ],
    [*-*-osf*], [
        LIBS="$LIBS -lrt -lm"
        # There is a problem on some installs such that linking with cxx fails, unless oldcxx is used.
        # One of the startup .o files is missing.
        # This really should be fixed otherwise.
        # Compiling with oldcxx fails, because it does not
        # define _LONGLONG and then INT64_ appends i64 or ui64 and that fails.
        # Fix the installs. Autoconf to detect problem.
        # and only workaround if needed (and remove gcc check).
        AS_IF([test x$GXX != xyes],
              [LDFLAGS="$LDFLAGS -oldcxx"
               #CXXFLAGS="$CXXFLAGS -x cxx" This breaks linking. .a files are treated as C++.
              ])],
    [*-*-hpux*], [
        # dcekt: uuid_create in MachineIDPosixC.c
        LIBS="$LIBS -lrt -lm -ldcekt -lc"
        CXXFLAGS="$CXXFLAGS -z" # -z so null derefence fails (vs. returns zero).
        # TODO: Make one bootstrap for 32bits and 64bits.
        AS_IF([test x$GXX = xyes],
              [CXXFLAGS="$CXXFLAGS $hpux_gcc_wordsize"],
              [CXXFLAGS="$CXXFLAGS $hpux_cc_wordsize"])],
    [LIBS="$LIBS -lm"] # default
    )

# user context access for getting IP from context in RTSignalC.c
AS_CASE([$host], [ia64-*-hpux*], [LIBS="$LIBS -luca"])

m4_include(late.m4)

# Duplicate -g logic due early.m4 turning off optimization,
# taking -g with it.
# Note: Modula-3 policy uses -g as long as it is supported.
#
AS_IF([test x$ac_cv_prog_cxx_g = xyes],[CXXFLAGS="$CXXFLAGS -g"])

CFLAGS="$CFLAGS $CXXFLAGS" # .c files are C++

# Compile .c as C++.
# This is not very important now that C++ backend outputs .cpp files,
# but it affects m3core, etc.
#AS_IF([test x$GCC = xyes],[CFLAGS="$CFLAGS -x c++"])

AC_CONFIG_FILES([Makefile])
AC_OUTPUT
