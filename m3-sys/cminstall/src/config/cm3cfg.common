% Copyright 1996 Critical Mass, Inc. All rights reserved.
%
% common configuration file for various platforms
%

%------------------------------------------------------------------------------

%M3_PROFILING = TRUE  % set by cm3 since 5.1.2 (option -profile)
%M3_PROFILING = FALSE

%-------------------------------------------------------------------
% defined by cm3, but not the other MxConfig users
if not defined("CR") CR = "\n" end
if not defined("EOL") EOL = "\n" end
if not defined("M3_PROFILING") M3_PROFILING = FALSE end
if not defined("SL") SL = "/" end
%-------------------------------------------------------------------

if not defined("USE_C_BACKEND_VIA_M3CGCAT")
  USE_C_BACKEND_VIA_M3CGCAT = FALSE
end

%-------------------------------------------------------------------

if USE_C_BACKEND_VIA_M3CGCAT
M3_BACKEND_MODE = "ExternalObject"

proc m3_backend(source, object, optimize, debug) is
    ret_code = try_exec("m3cgcat", "-in-binary:" & source, "-out-c:" & source & ".c")
    if not equal(ret_code, 0)
        return ret_code
    end
    return compile_c(source & ".c", object, [ ], FALSE, TRUE)
end
end

%------------------------------------------------------------------------------

if not defined ("M3_BACKEND_MODE")
    M3_BACKEND_MODE = "3"
    % -- defines how the frontend, backend, and assembler interact
    %  "0"  -- don't call m3_backend, M3CG produces object code
    %  "1"  -- don't call m3_backend, M3CG produces assembly code
    %  "2"  -- call m3_backend, it produces object code
    %  "3"  -- call m3_backend, it produces assembly code
    %  "C"  -- use C backend, and then compile with compile_c()
end

%------------------------------------------------------------------------------

if not defined("PROFILING_P")
    if M3_PROFILING
        readonly PROFILING_P = "p"
    else
        readonly PROFILING_P = ""
    end
end

if not defined("BUILD_DIR")
    readonly BUILD_DIR    = TARGET & PROFILING_P % directory for results
end

%------------------------------------------------------------------------------

proc CM3SetInstallRoot() is
    if defined("INSTALL_ROOT")
        return
    end
    if not equal($CM3_INSTALL, "")
        INSTALL_ROOT = $CM3_INSTALL
        return
    end
    INSTALL_ROOT = (path() & SL & "..")
end

CM3SetInstallRoot()

%------------------------------------------------------------------------------

readonly BIN_INSTALL    = INSTALL_ROOT & SL & "bin"     % executables
readonly LIB_INSTALL    = INSTALL_ROOT & SL & "lib" & PROFILING_P   % libraries
readonly PKG_INSTALL    = INSTALL_ROOT & SL & "pkg"     % packages
readonly DOC_INSTALL    = INSTALL_ROOT & SL & "doc"     % documents
readonly EMACS_INSTALL  = INSTALL_ROOT & SL & "elisp"   % emacs lisp code
readonly MAN_INSTALL    = INSTALL_ROOT & SL & "man"     % man pages
readonly HTML_INSTALL   = INSTALL_ROOT & SL & "www"     % public hypertext

% On some systems (e.g. AFS) you must install public files in a different
% place from where you use them.  If that is the case for your system,
% specify the "use" location here, otherwise leave them alone.
%
USE_ROOT  = INSTALL_ROOT
BIN_USE   = BIN_INSTALL     % executables
LIB_USE   = LIB_INSTALL     % libraries
PKG_USE   = PKG_INSTALL     % packages

%------------------------------------------------------------------------------

readonly INSTALL_IMPLS = FALSE
% TRUE
%    => save all source files during the install
%    => makes debugging easier and browsing more fruitful
% FALSE
%    => save only the exported interfaces and templates
%    => makes the installed system slightly smaller.

%-------------------------------------------------------------------

proc FileExists(x) is
    return not stale(x, x)
end

proc exists(x) is
    return FileExists(x)
end

proc DeleteFile(a) is
    delete_file(a)
end

readonly OS = $OS

proc MoveFile(a, b) is
    local ret = 0
    if defined("fs_cp")
        fs_cp(a, b)
        DeleteFile(a)
    else
        %
        % The check of OS_TYPE confuses host and target.
        %
        if equal(OS, "Windows_NT") and not equal (OS_TYPE, "POSIX")
            ret = q_exec(["cmd", "/c", "move", "\"" & a & "\"", "\"" & b & "\""])
        else
            ret = q_exec(["mv", a, b])
        end
    end
end

proc DeleteFiles(a) is
    foreach b in a
        DeleteFile(b)
    end
end

%------------------------------------------------------------------------------

readonly proc JoinPath(a, b) is
    a = subst_chars(a, "/", SL)
    b = subst_chars(b, "\\", SL)
    if a and b return a & SL & b end
    if b return b end
    if a return a end
end

%------------------------------------------------------------------------------

readonly proc ChoseFile(a) is
% given a list of files, return the first that exists
    foreach c in a        
        if FileExists(c)
            return c
        end
    end
    return ""
end

%------------------------------------------------------------------------------

readonly proc GetLastPathElement(path) is
    local cur = ""
    foreach elt in split(path, SL)
        cur = elt
    end
    return cur
end

%------------------------------------------------------------------------------

readonly proc RemoveLastPathElement(path) is
    local cur = ""
    local prev = ""
    foreach elt in split(path, SL)
        prev = cur
        cur = JoinPath(prev, elt)
    end
    return prev
end

%------------------------------------------------------------------------------

proc InternalPlatformEquivalent(a, b) is
  if equal(a, b)
    return TRUE
  end
  foreach c in [{"SPARC32_SOLARIS", "SOLgnu", "SOLsun"},
                {"I386_FREEBSD", "FreeBSD4"},
                {"I386_NT", "NT386"},
                {"I386_CYGWIN", "NT386GNU"},
                {"I386_MINGW", "NT386MINGNU"},
                {"I386_LINUX", "LINUXLIBC6"}]
    if (c contains a) and (c contains b)
      return TRUE
    end
  end
  return FALSE
end

proc Is64BitNTHost() is
  return equal($OS, "Windows_NT") and
        (equal($PROCESSOR_ARCHITECTURE, "AMD64")
      or equal($PROCESSOR_ARCHITECTURE, "IA64")
      or equal($PROCESSOR_ARCHITEW6432, "AMD64")
      or equal($PROCESSOR_ARCHITEW6432, "IA64"))
end

proc InternalTargetCanRunOnHost(target, host) is
  if InternalPlatformEquivalent(target, host)
    return TRUE
  end

  % any ntx86_host can run ntx86_native

  local ntx86_native = {"I386_NT", "NT386", "I386_MINGW", "NT386MINGNU"}
  local ntx86_host = {"I386_NT", "NT386", "I386_CYGWIN", "NT386GNU", "I386_MINGW", "NT386MINGNU", "I386_INTERIX"}
  if (nt_native contains target) and ((nt_host contains host) or (equal($OS, "Windows_NT")))
    return TRUE
  end

  % various 64bit can run corresponding 32bit, usually

  if Is64BitNTHost()
    if ntx86_native contains target
      return TRUE
    end
    % probably hypothetical 64bit cygwin accompanies 32bit cygwin
    local cygwin = {"AMD64_CYGWIN", "I386_CYGWIN", "NT386GNU"}
    if (cygwin contains host) and (cygwin contains target)
      return TRUE
    end
  end
  if equal(target, "I386_DARWIN") and equal(host, "AMD64_DARWIN")
    return TRUE
  end
  % PPC_DARWIN can be emulated
  local ppc_darwin_host = {"AMD64_DARWIN", "I386_DARWIN", "PPC64_DARWIN"}
  if equal(target, "PPC_DARWIN") and (ppc_darwin_host contains host)
    return TRUE
  end
  if equal(target, "PPC_LINUX") and equal(host, "PPC64_LINUX")
    return TRUE
  end
  foreach c in [{"ALPHA64_VMS", "ALPHA32_VMS"}, % just one ALPHA_VMS system
                % Sparc these days always has a 64bit kernel that can run 32bit or 64bit
                {"SPARC64_SOLARIS", "SPARC32_SOLARIS", "SOLgnu", "SOLsun"},
                {"SPARC64_LINUX", "SPARC32_LINUX"},
                % likewise actual PA32 is unusual
                {"PA64_HPUX", "PA32_HPUX"},
                {"PA64_LINUX", "PA32_LINUX"}]
    if (c contains host) and (c contains target)
      return TRUE
    end
  end
  % CONSIDER: more 32bit/64bit mixes
  return FALSE
end

proc InternalCheckTargetOS(x) is
  if defined("TARGET_OS")
    return equal(TARGET_OS, x)
  end
  error("config file (or cm3 executable) must define TARGET_OS")
  return FALSE
end

proc IsTargetCygwin()  is return InternalCheckTargetOS("CYGWIN") end
proc IsTargetDarwin()  is return InternalCheckTargetOS("DARWIN") end
proc IsTargetFreeBSD() is return InternalCheckTargetOS("FREEBSD") end
proc IsTargetInterix() is return InternalCheckTargetOS("INTERIX") end
proc IsTargetLinux()   is return InternalCheckTargetOS("LINUX") end
proc IsTargetNetBSD()  is return InternalCheckTargetOS("NETBSD") end
proc IsTargetNT()      is return InternalCheckTargetOS("NT") end
proc IsTargetOpenBSD() is return InternalCheckTargetOS("OPENBSD") end
proc IsTargetSolaris() is return InternalCheckTargetOS("SOLARIS") end

% temporary compat
proc IsDarwin()  is return IsTargetDarwin() end
proc IsFreeBSD() is return IsTargetFreeBSD() end
proc IsInterix() is return IsTargetInterix() end
proc IsNetBSD()  is return IsTargetNetBSD() end
proc IsOpenBSD() is return IsTargetOpenBSD() end
proc IsSolaris() is return IsTargetSolaris() end

proc IsNativeBuild() is
  if defined("HOST") and defined("TARGET")
    return InternalPlatformEquivalent(HOST, TARGET)
  end
  return FALSE
end

proc IsHostOSF1v4() is
  if defined("HOST")
    if not InternalPlatformEquivalent(HOST, "ALPHA_OSF")
      return FALSE
    end
  end
  if not defined("xIsHostOSF1v4")
    xIsHostOSF1v4 = equal(try_exec("@uname -sr | fgrep \"OSF1 V4.\" > /dev/null"), 0)
  end
  return xIsHostOSF1v4
end

proc IsHostFreeBSD4() is
  if defined("HOST")
    if not InternalPlatformEquivalent(HOST, "I386_FREEBSD")
      return FALSE
    end
  end
  if not defined("xIsHostFreeBSD4")
    xIsHostFreeBSD4 = equal(try_exec("@uname -sr | fgrep \"FreeBSD 4.\" > /dev/null"), 0)
  end
  return xIsHostFreeBSD4
end

proc IsTargetOSF1v4() is
  % approx (doesn't work for cross builds)
  return InternalPlatformEquivalent(TARGET, "ALPHA_OSF") and IsNativeBuild() and IsHostOSF1v4()
end

if not defined("IsTargetFreeBSD4")

proc IsTargetFreeBSD4() is
  % approx (doesn't work for cross builds)
  return IsTargetFreeBSD() and IsNativeBuild() and IsHostFreeBSD4()
end

end

if not defined("HasTrestle")

proc HasTrestle() is
  return not IsInterix()
end

end

% temporary compat
proc HasGui() is
  return HasTrestle()
end

if not defined("HasOpenGL")

proc HasOpenGL() is
  % but see http://www.interix.com/Motif-OpenGL.htm
  return not IsInterix()
end

end

proc IsOpenBSD() is
  if defined("TARGET_OS")
    if equal(TARGET_OS, "OPENBSD")
      return TRUE
    end
  end
  return FALSE
end

%------------------------------------------------------------------------------

if not defined("subst_chars")
    %
    % Ok, some cross builds will fail with older tools, but
    % native builds do not need this.
    %
    proc subst_chars(a, b, c) is
        return a
    end
end

%------------------------------------------------------------------------------

readonly proc GetPackageDirectory() is
    %
    % older builds, such as 5.1.3, do not define PACKAGE_DIR
    % This is only used to point the user at a file to
    % help diagnose build errors, so ok to downgrade to
    % an empty string.
    %
    if defined("PACKAGE_DIR")
        return PACKAGE_DIR & SL
    end
    return ""
end

%------------------------------------------------------------------------------

if not defined("GetM3BackFlags")

proc GetM3BackFlags() is
    if defined("m3back_flags")
      return m3back_flags
    end
    return ""
end

end

proc M3BackCanCross(host, target) is
    foreach c in [{"ALPHA64_VMS", "ALPHA32_VMS"}, % just one ALPHA_VMS system
                  {"SPARC64_SOLARIS", "SPARC32_SOLARIS", "SOLgnu", "SOLsun"},
                  {"SPARC64_LINUX", "SPARC32_LINUX"},
                  {"PA64_HPUX", "PA32_HPUX"},
                  {"PA64_LINUX", "PA32_LINUX"},
                  {"AMD64_DARWIN", "I386_DARWIN"}
                 ]
      if (c contains host) and (c contains target)
        return TRUE
      end
    end
    return FALSE
end

proc GetM3Back() is
  if defined("m3back")
    % write("using " & m3back & "\n")
    return m3back
  end

  if not defined("HOST")
    HOST = TARGET
  end

  % for cross builds:
  if defined("ROOT") and not equal(HOST, TARGET)
    local m3back1 = ROOT & "/m3-sys/m3cc/" & HOST & "/"
    local m3back2 = ROOT & "/m3-sys/m3cc/" & HOST & "-" & TARGET & "/"
    m3back = m3back2
    if not FileExists(m3back2) and M3BackCanCross(HOST, TARGET) and FileExists(m3back1)
        m3back = m3back1
    else
        m3back = m3back2
    end        
  
  % for native builds:
  else if equal(HOST, TARGET)
    m3back = INSTALL_ROOT & "/bin/"
  end end
  
  m3back = "@" & m3back & "cm3cg " & GetM3BackFlags()
  return m3back
end

%-------------------------------------------------- default compile options ---
% "set_config_options" is called before starting the compilation. It should
% be used to provide system-wide default options.

proc set_config_options() is
    m3_option("-why")   %-- produce a listing that explains what's happening and why
    m3_debug(TRUE)      %-- produce object code with debugging symbols
    M3_OPTIONS += "-w1" %-- produce "level 1" warnings
end

%------------------------------------------------------------------------------

if not defined("q_exec")

readonly proc q_exec(a) is
    return try_exec(a)
end

end

%-------------------------------------------------------------------- emacs ---
% If you have emacs and want to compile ".el" files to ".elc" files,
% fill in the function below. Otherwise, comment out or delete the
% entire function. Note, the distributed code assumes gnuemacs version 19
% or later.

readonly proc emacs_compile(el) is
    return q_exec("emacs -batch -f batch-byte-compile", el)
end

%------------------------------------------------------------- GNU variants ---
% The two large pieces of GNU software used by the Modula-3 system
% gcc(=m3cc) and gdb(=m3gdb) often require slightly different C compilers
% or flags.  They are specified here.  Note that they may be overridden
% from the cm3 command line.
%
% To use the GNU defaults for CC and CFLAGS, specify "*".
%

% GNU_CC     = "g++"
% GNU_CFLAGS = "-g"

% The most common values here are make and gmake.

if not defined ("GNU_MAKE")
    GNU_MAKE   = "make"
end

%------------------------------------------------------------------------------

X11_WITH_SHARED_MEM = TRUE
% --- X11 libraries include the shared memory extensions (XShm...)

%------------------------------------------------------------ misc. options ---
% Note, most of these options can be set from the command line. Otherwise,
% they can be set "permanently" here in the config file or in as needed
% in user's m3makefiles.

M3_FRONT_FLAGS = [ ]

% --- internal configuration options passed directly to the Modula-3 front-end
if equal(M3_BACKEND_MODE, "0") or equal(M3_BACKEND_MODE, "1")
        or equal(M3_BACKEND_MODE, "IntegratedObject")
        or equal(M3_BACKEND_MODE, "IntegratedAssembly")
        or equal(M3_BACKEND_MODE, "IntegratedC")
        or equal(M3_BACKEND_MODE, "C")
        or USE_C_BACKEND_VIA_M3CGCAT
     % Llvm itself requires unnested functions, so do it for all llvm modes. 
     % TODO: Surely Quake provides a more efficient way to do this. 
        or equal(M3_BACKEND_MODE, "IntLlvmObj") 
        or equal(M3_BACKEND_MODE, "IntLlvmAsm") 
        or equal(M3_BACKEND_MODE, "ExtLlvmObj") 
        or equal(M3_BACKEND_MODE, "ExtLlvmAsm")
        or equal(M3_BACKEND_MODE, "StAloneLlvmObj")
        or equal(M3_BACKEND_MODE, "StAloneLlvmAsm") 
        or equal(M3_BACKEND_MODE, "5") 
        or equal(M3_BACKEND_MODE, "6") 
        or equal(M3_BACKEND_MODE, "7") 
        or equal(M3_BACKEND_MODE, "8") 
        or equal(M3_BACKEND_MODE, "9") 
        or equal(M3_BACKEND_MODE, "10") 
    % M3_FRONT_FLAGS += ["-unfold_nested_procs"]
    % M3_FRONT_FLAGS += ["-check_procs" ]
    M3_FRONT_FLAGS = ["-unfold_nested_procs", "-check_procs" ]
end

M3_OPTIONS = [ ]
% --- user options passed directly to the Modula-3 front-end

% -keep on the command line
% M3_KEEP_FILES = TRUE
% --- keep intermediate and temporary files

% -boot on the command line
% M3_BOOTSTRAP = TRUE
% --- generate bootstrap code (assembly) instead of finaly object code

% M3_COMPILE_ONCE = TRUE
% --- don't recompile code to improve opaque object references

% SYS_HAS_LOADER = TRUE
% --- generate a loader info file with objects, libraries and timestamps

% M3_SKIP_LINK = TRUE
% --- skip the final link for programs, presumably to use the loader instead

M3_NEED_STANDALONE_LINKS = FALSE
% --- linker is broken and we need to build a directory of symbolic
%     links pointing to the non-shared libraries.

%------------------------------------------------------------------------------

% A "pdb' is a "program database", that is, a Microsoft symbol file.

readonly proc PdbExport(pdb) is
    if FileExists(pdb)
        % This isn't quite right. The compiler should handle it.
        BindExport(pdb)
    end
end

%-------------------------------------------------------------------
% "skip_link" is called when the compiler decides it doesn't need to
% call "m3_link", but it wants to discover the names of the derived
% files that should be deleted or shipped.

FormatExe = "%s"

proc skip_link(prog, shared) is
    local readonly pgm_file = format(FormatExe, prog)
    local readonly manifest_file = pgm_file & ".manifest"
    local readonly pdb_file = prog & ".pdb"

    local readonly Outputs = [
        pgm_file,
        manifest_file,
        pdb_file,
        prog & ".ilk"]

    % make sure files get cleaned up
    deriveds("", Outputs)

    DeleteFile(manifest_file)
    PdbExport(pdb_file)

    return 0
end

%------------------------------------------------------------------------------

proc ConvertLibsToStandalone(imported_libs, shared) is
    if shared
        return imported_libs
    end
    local imports = [ ]
    foreach f in imported_libs
        local ff = f & ".sa"
        if FileExists(ff)
            imports += ff
        else
            imports += f
        end
    end
    return imports
end

%------------------------------------------------------------------------------

if not defined("configure_assembler")
  proc configure_assembler() is
  end
end

% TODO remove duplication (with Darwin.common, uses this earlier)

proc configure_c_compiler_common() is

  % Add these flags if they do not indicate errors.

  foreach a in [ "fno-reorder-blocks",
                 "funwind-tables" ]
    if not equal(try_exec("@" & SYSTEM_CC & " -" & a & " -c -x c /dev/null -o /dev/null 2>&1 | fgrep " & a & " >/dev/null"), 0)
        SYSTEM_CC = SYSTEM_CC & " -" & a
    end
  end
end

if not defined("configure_c_compiler")
  proc configure_c_compiler() is
  end
end

if not defined("configure_system_libs")
  proc configure_system_libs() is
  end
end

if not defined("configure_linker")
  proc configure_linker() is
    if defined("SYSTEM_LD")
      return
    end
    configure_c_compiler()
    SYSTEM_LD = SYSTEM_CC
  end
end

%------------------------------------------------------------------------------
