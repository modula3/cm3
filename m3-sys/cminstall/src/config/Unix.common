% Copyright 1996 Critical Mass, Inc. All rights reserved.
%
% common configuration file for various platforms
%

include("cm3cfg.common")

%-------------------------------------------------- compilation environment ---

readonly OS_TYPE      = "POSIX"           % { "WIN32" or "POSIX" }

readonly NAMING_CONVENTIONS = "0"
%                                        object files       libraries
%  0=Unix                          =>  .o   .io    .mo       libXX.a
%  1=Unix with a grumpy C compiler =>  .o   _i.o   _m.o      libXX.a
%  2=Windows NT or Windows 95      =>  .obj .io    .mo       XX.lib
%  3=C++ backend with Automake     =>  .o   .i3.io .m3.o     libXX.a
%

%------------------------------------------------ external system libraries ---
% SYSTEM_LIBS provides a mapping from Modula-3 names for the common
% external libraries to site-dependent information about how they
% are accessed.  If SYSTEM_LIBS{x} is defined it should be a list
% of linker arguments that are used when linking against that library.
% If SYSTEM_LIBS{x} is not defined, the Modula-3 system will assume
% that the library is not available.

if not defined("HasOdbc")
  proc HasOdbc() is
    return TRUE
  end
end

if not defined ("SYSTEM_LIBS")

% This is for Linux and partly for FreeBSD, OpenBSD, NetBSD.
% Other systems replace it entirely: Solaris, Interix, Cygwin, Darwin, HPUX.

SYSTEM_LIBS =
{
    "LIBC"       : [ "-lm", "-pthread" ],
    "QUADMATH"   : [ "-lquadmath" ],
    "LEX-YACC"   : [ "-ll" ],
    "FLEX-BISON" : [ "-lfl" ],
% See Linux.common, FreeBSD.common, OpenBSD.common, NetBSD.common, etc.
%   "POSTGRES95" : [ "-L/usr/local/pgsql/lib", "-lpq" ],
%   "MYSQL"      : [ "-L/usr/local/lib", "-lmysqlclient" ],
    "OPENGL"     : [ "-lGLU", "-lGL", "-lXext" ],
% If OPENGL does not work try
%    "OPENGL"     : [ "-L/lib/x86_64-linux-gnu", "-lGLU", "-lGL", "-lXext" ],
% See Linux.common, FreeBSD.common, OpenBSD.common, NetBSD.common, etc.
%   "ODBC"       : [ "-lodbc" ],
    "MOTIF"      : [ "-lXm" ],
    "TCP"        : [ ],
    "X11"        : [  "-L/usr/X11R6/lib", "-lXft", "-lfontconfig", "-lXaw", "-lXmu", "-lXext", "-lXt", "-lSM", "-lICE", "-lX11" ],
    "READLINE"   : [ "-lreadline" ],
    "MPFR"       : [ "-lmpfr" ],
    "EXPAT"      : [ "-lexpat" ]
}

% See Linux.common, FreeBSD.common, OpenBSD.common, NetBSD.common, etc.
%if HasOdbc()
%  SYSTEM_LIBS{"ODBC"} = [ "-lodbc" ]
%end

end

% SYSTEM_LIBORDER defines the order in which SYSTEM_LIBS should be
% scanned by the linker.

if not defined ("SYSTEM_LIBORDER")
  if HasOdbc()
    SYSTEM_LIBORDER = [ "OPENGL", "DECPEX", "MOTIF", "X11", "TCP", "MYSQL",
                        "ODBC", "POSTGRES95", "FLEX-BISON", "LEX-YACC", "READLINE", "EXPAT", "MPFR", "LIBC" ]
  else
    SYSTEM_LIBORDER = [ "OPENGL", "DECPEX", "MOTIF", "X11", "TCP", "MYSQL",
                        "POSTGRES95", "FLEX-BISON", "LEX-YACC", "READLINE", "EXPAT", "MPFR", "LIBC" ]
  end
end

%--------------------------------------------------------- Modula-3 backend ---
% For platforms without an integrated backend, "m3_backend" is called to
% translate Modula-3 intermediate code to object code.

if not defined("m3back_debug")
  m3back_debug = "-gstabs+"
end

%default optimization level if passed -O
if not defined("m3back_optimize")
  m3back_optimize = "-O2"
end

if not defined("m3back_pic")
  m3back_pic = "-fPIC"
end

% -funwind-tables in anticipation of using libunwind
if not defined("m3back_unwind_table")
  m3back_unwind_table = "-funwind-tables"
end

if not defined("m3back_m32")
  m3back_m32 = {"32BITS" : "-m32", "64BITS" : ""}{WORD_SIZE}
end

if not defined("m3back_m64")
  m3back_m64 = {"32BITS" : "", "64BITS" : "-m64"}{WORD_SIZE}
end

if not defined("m3back_mieee")
  m3back_mieee = ""
end

if not defined("m3_backend")

proc m3_backend(source, object, optimize, debug) is
    local args = [ "-quiet",
                   "-fno-reorder-blocks",
                   m3back_unwind_table,
                   m3back_pic,
                   m3back_mieee,
                   m3back_m32,
                   m3back_m64 ]
    if optimize
        args += m3back_optimize
        args += "-Wuninitialized"
    end
    if debug
        args += m3back_debug
    end
    if M3_PROFILING
        args += "-p"
    end
    local m3back = GetM3Back()
    return try_exec (m3back, args, source, "-o", object)
end

end

%--------------------------------------------------------- m3llvm ------------
% Optionally, "m3llvm" is called to translate cm3 IR to llvm IR.

if not defined("m3llvm")

  proc m3llvm(source, outfile, optimize, debug) is
  % will we ever need optimize and/or debug?

      local m3llvmname = "@m3llvm"

      local args = [ "-b" ]

      if debug
        args += "-g"
      end

      % add the target to the m3llvm call.
      args += "-t " & TARGET

      %args += "-d" %While m3llvm is under development.

      return try_exec (m3llvmname, args, "-o", outfile, source )
  end % proc m3llvm

end % if not defined("m3llvm")

%--------------------------------------------------------- llvm backend ---
% Optionally, "llvm_backend" is called to translate llvm bitcode to object code.

% Some default options:

if not defined("llvmback_debug")
  llvmback_debug = ""
end

if not defined("llvmback_optimize")
  llvmback_optimize = "-O2"
end

if not defined("llvmback_pic")
  llvmback_pic = "-relocation-model=pic"
end

if not defined("llvm_backend")

  proc llvm_backend(source, outfile, optimize, debug, filetype) is
      local llcname = "@llc"
      local args = [ "-frame-pointer=all"]
%llvm 8 changed option for frame pointer.
%      local args = [ "-disable-fp-elim"]

      args += "--dwarf-directory=0 -filetype=" & filetype
      args += llvmback_pic

      if optimize
          args += llvmback_optimize
      else
          args += "-O0"
      end
      if debug
          args += llvmback_debug
      end

      local llc_ret = try_exec (llcname, args, source, "-o", outfile )

      return llc_ret
  end % proc llvm_backend

end % if not defined("llvm_backend")

% Optionally call the llvm optimiser

if not defined("llvm_opt")

  proc llvm_opt(source, outfile) is

      local opt_ret = try_exec ("@opt", llvmback_optimize, source, "-o", outfile )

      return opt_ret
  end % proc llvm_opt

end % if not defined("llvm_opt")

%--------------------------------------------------------------- C compiler ---
% "compile_c" is called to compile C source files.  Note that this function
% is only called if your program or library explicitly includes C source
% code, the system distributed by Critical Mass did not, but
% the current system does a fair amount for much easier porting.

if not defined ("compile_c")

proc compile_c(source, object, options, optimize, debug) is

    % hack: The C compiler driver generally accepts .s files
    % for assembly source, but some files do not work here.
    %
    % Passing all .s files to assemble seems reasonable.
    %
    if equal(source, "../src/runtime/SOLgnu/RTMachineASM.s")
        return assemble(source, object)
    end

    configure_c_compiler()

    local args = options
    if M3_PROFILING args += "-pg" end
    if debug args += "-g" end

    if not defined ("SYSTEM_CXXC")
       SYSTEM_CXXC = SYSTEM_CC
    end

    local ret_code = 1

    if equal(source, "_m3main.c")
       ret_code = try_exec ("@" & SYSTEM_CXXC, args, "-c -xc++", source, "-o", object)
    else
       ret_code = try_exec ("@" & SYSTEM_CC, args, "-c", source, "-o", object)
    end

    if not equal(ret_code, 0) and equal(source, "_m3main.c")
        % for _m3main.c, try also as C instead of C++ for older cm3
        % NOTE: This is gcc specific.
        ret_code = try_exec (SYSTEM_CC, args, "-xc -c", source, "-o", object)
    end

    % Try with -gstabs sometimes also.
    % This is required for caltech-other/newuoa.
    %
    if not equal(ret_code, 0) and equal(pn_lastext(source), "s")
      args += "-gstabs"
      ret_code = try_exec (SYSTEM_CC, args, "-c", source, "-o", object)
    end

    return ret_code
end

end

%---------------------------------------------------------------- assembler ---
% "assemble" is called to assemble .s or .asm files.  Note that this function
% is only called if your program or library explicitly includes assembly source
% code, the system distributed by Critical Mass does not.

if not defined("assemble")

proc assemble(source, object) is
    configure_assembler()
    return try_exec("@" & SYSTEM_ASM, source, "-o", object)
end

end

%------------------------------------------------------------------------------

if not defined("AdjustShared")

proc AdjustShared(shared) is

  return shared

    % Do not support shared with older compilers.
    % There are, I vaguely recall, problems due to the way
    % we changed the directory layout. Older compilers combined
    % with this config file need only support building a static compiler,
    % so this is ok.
    and defined("install_symbolic_link")

    % HPUX switches not correct for non-gcc linker driver.
    and not equal (TARGET_OS, "HPUX")
end

end

%--------------------------------------------------------- library creation ---
% "make_lib" is called to combine a collection of object modules into
% a library.

if not defined("make_lib_get_shared_suffix")
proc make_lib_get_shared_suffix() is
  local readonly TargetSharedSuffix = {
    "PA32_HPUX" : "sl",
    "PA64_HPUX" : "sl",
  }
  if TargetSharedSuffix contains TARGET
    return TargetSharedSuffix{TARGET}
  end
  return "so"
end
end

if not defined("make_lib_get_soname_flag")
proc make_lib_get_soname_flag() is
  local readonly TargetSonameFlag = {
    "PA32_HPUX" : "+h",
    "PA64_HPUX" : "+h",
  }
  if TargetSonameFlag contains TARGET
    return TargetSonameFlag{TARGET}
  end
  return "-soname"
end
end

if not defined("make_lib_delete_outputs")
proc make_lib_delete_outputs(lib) is
    local suffix = make_lib_get_shared_suffix()
    local lib_a   = format("lib%s.a", lib)
    local readonly lib0_file = lib_a & ".sa" % standalone
    local lib_so  = format("lib%s.%s", lib, suffix)
    local lib_sox = format("lib%s.%s.5", lib, suffix)
    local expfile = "lib" & lib & ".exp" % libfoo.exp

    DeleteFiles([lib_a, lib0_file, lib_so, lib_sox, expfile])
end
end

if not defined("make_lib")

proc make_lib(lib, options, objects, imported_libs, shared) is
    shared = AdjustShared(shared)
    local suffix = make_lib_get_shared_suffix()
    local soname_flag = make_lib_get_soname_flag()
    local lib_a   = format("lib%s.a", lib)
    local readonly lib0_file = lib_a & ".sa" % standalone
    local lib_so  = format("lib%s.%s", lib, suffix)
    local lib_sox = format("lib%s.%s.5", lib, suffix)
    local expfile = "lib" & lib & ".exp" % libfoo.exp
    local ret_code = 0

    make_lib_delete_outputs(lib)

    %
    % The historical way to build libraries on Unix is:
    %  ar cru libfoo.a 1.o 2.o
    %  or ar cr libfoo.a 1.o 2.o
    %  ranlib libfoo.a
    %
    % On all current systems:
    %  ar automatically does the ranlib operation
    %
    % And on systems, ranlib might not exist (Irix).
    %
    % Therefore, always run ar and ranlib, but ignore
    % the result of ranlib.
    %
    % This is very close to what the highly portable gcc Makefiles do,
    % except they omit the u flag.
    %

    % first build the non-shared library in the usual ar/ranlib way

    ret_code = try_exec("@ar", "cr", lib_a, objects)
    if not equal(ret_code, 0)
        make_lib_delete_outputs(lib)
        return ret_code
    end

    ret_code = try_exec("@ranlib", lib_a)

    if shared

        local soname_opt = "-Wl," & soname_flag & "," & lib_sox

        if IsInterix()

            % move libfoo.a to libfoo.a.sa; sa for standalone (or static)
            % libfoo.a is the import library for libfoo.so
            % libfoo.a.sa is a static library if the dependency is being avoided

            MoveFile(lib_a, lib0_file)
            soname_opt = ""
            expfile = "lib" & lib & ".exp" % libfoo.exp
            ret_code = try_exec(DLLTOOL,  "--dllname", lib_sox, "--kill-at", "--output-lib", "lib" & lib & ".a", "--export-all-symbols", lib0_file, "--output-exp", expfile)
            if not equal(ret_code, 0)
                make_lib_delete_outputs(lib)
                return ret_code
            end
        else
            expfile = ""
        end

        % build the shared library
        local pg = ""
        if M3_PROFILING
            pg = "-pg"
        end
        configure_linker()
        if IsInterix()
          ret_code = try_exec( "@" & SYSTEM_LD, pg, "-shared", soname_opt, "-o", lib_sox, "--whole-archive", lib0_file, "--no-whole-archive", imported_libs, expfile)
        else
          ret_code = try_exec( "@" & SYSTEM_LD, pg, "-shared", soname_opt, "-o", lib_sox, objects, imported_libs)
        end
        if not equal(ret_code, 0)
            make_lib_delete_outputs(lib)
            return ret_code
        end
    end

    local a = skip_lib(lib, shared)

    return 0
end

end


%-------------------------------------------------------------------
% "skip_lib" is called when the compiler decides it doesn't need to
% call "make_lib", but it wants to discover the names of the derived
% files that should be deleted or shipped.

if not defined("skip_lib")

proc skip_lib(lib, shared) is
    shared = AdjustShared(shared)
    local suffix = make_lib_get_shared_suffix()
    local lib_a   = format("lib%s.a", lib)
    local lib0_file = lib_a & ".sa" % standalone
    local lib_so  = format("lib%s.%s", lib, suffix)
    local lib_sox = format("lib%s.%s.5", lib, suffix)
    local expfile = "lib" & lib & ".exp" % libfoo.exp

    % Tell clean what to delete.
    deriveds("", [lib_a, lib0_file, lib_so, lib_sox, expfile])

    if shared
        % create the version aliases
        link_file(lib_sox, lib_so)

        % make sure the shared library stuff gets installed properly

        LibdExport(lib_sox)
        install_link_to_derived(lib_a, LIB_INSTALL)
        install_symbolic_link(lib_sox, LIB_INSTALL & "/" & lib_so)
        install_derived_link("../../../lib/" & lib_sox, lib_so)
        install_derived_link("../../../lib/" & lib_sox, lib_sox)
    else
        DeleteFiles([lib0_file, lib_so, lib_sox])
    end

    return 0
end

end

%------------------------------------------------------------------- linker ---
% "m3_link" is called to produce a final executable.

if not defined("m3_link")

proc m3_link(prog, options, objects, imported_libs, shared) is
    shared = AdjustShared(shared)
    imported_libs = ConvertLibsToStandalone(imported_libs, shared)
    local args = [ "-o", prog, options, objects, imported_libs ]
    if M3_PROFILING
        args += "-pg"
    end
    if defined("POSITION_INDEPENDENT_EXECUTABLE")
        args += POSITION_INDEPENDENT_EXECUTABLE
    end
    if not shared and defined("LINK_STATIC")
        args += LINK_STATIC
    end
    configure_linker()
    return try_exec("@" & SYSTEM_LD, args)
end

end

%------------------------------------------------------------ misc. options ---
% Note, most of these options can be set from the command line.  Otherwise,
% they can be set "permanently" here in the config file or in as needed
% in user's m3makefiles.

M3_COVERAGE_LIB = LIB_USE & "/report_coverage.o"
% --- library linked in programs compiled with "-Z" coverage option

M3_SPLIT_LIBNAMES = TRUE
% --- split library names and pass -L/-l arguments to the linker

if not defined("M3_SHARED_LIB_ARG")
  M3_SHARED_LIB_ARG = "-Wl,-R"
end
% --- pass "-R" flags to the linker too.

%M3_MAIN_IN_C = TRUE
% --- generate the Modula-3 main program as C code
