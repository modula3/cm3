% Copyright 1996-2000 Critical Mass, Inc. All rights reserved.
% See file COPYRIGHT-CMASS for details.
%

%-------------------------------------------------------------------
% defined by cm3, but not the other MxConfig users
if not defined("CR") CR = "\n" end
if not defined("EOL") EOL = "\n" end
if not defined("M3_PROFILING") M3_PROFILING = FALSE end
if not defined("SL") SL = "/" end
%-------------------------------------------------------------------

readonly TARGET_OS = "DARWIN"

% Darwin has no m3gdb support and -gstabs and -gstabs+ cause
% assembler errors on Mac OSX 10.10.4 Yosemite.
% Plain -g causes cm3cg to access violate attempting to generate Dwarf symbols.

m3back_debug = " "

if defined("HasCBackend")
  if HasCBackend()
    if not defined ("M3_BACKEND_MODE")
      M3_BACKEND_MODE = "3" % This should really be C.
    end
  end
end

proc FileExists(x) is
    return not stale(x, x)
end

IsX86 = equal(TARGET, "I386_DARWIN") or equal(TARGET, "AMD64_DARWIN")

proc configure_assembler() is
  if defined("SYSTEM_ASM")
    return
  end
  SYSTEM_ASM = "/usr/libexec/gcc/darwin/" & DarwinArch & "/as"

  % NOTE: Some versions of m3cg are incompatible with LLVM assembler that gcc -x assembler
  % might run. Workaround is to run as instead of gcc -x assembler.
  % See http://gcc.gnu.org/bugzilla/show_bug.cgi?id=67183
  % http://llvm.org/bugs/show_bug.cgi?id=24428

  % NOTE: Do all as versions accept -arch? It'd be nice, but I doubt it. i.e. old PowerPC
  % Does cm3cg record an architecture in the .s for as to dispatch on? Ditto.

  if not FileExists(SYSTEM_ASM)
    if IsX86
      configure_c_compiler ()
      SYSTEM_ASM = SYSTEM_CC_ASM & " -c -x assembler"
    else
      SYSTEM_ASM = "as"
    end
    %workaround and maybe faster:
    %SYSTEM_ASM = "as -arch " & DarwinArch & " -force_cpusubtype_ALL"
  end
  %SYSTEM_ASM = SYSTEM_CC_ASM & " -v -c -x assembler"
end

% TODO remove duplication (with cm3cfg.common, included later)
proc configure_c_compiler_common() is

  % Add these flags if they do not indicate errors.

  foreach a in [ "fno-reorder-blocks",
                 "funwind-tables" ]
    if not equal(try_exec("@" & SYSTEM_CC & " -" & a & " -c -x c /dev/null -o /dev/null 2>&1 | fgrep " & a & " >/dev/null"), 0)
      SYSTEM_CC = SYSTEM_CC & " -" & a
    end
  end
end

proc configure_c_compiler() is

  if defined("SYSTEM_CC")
    return
  end

  %
  % older compiler doesn't like -m32 or -arch
  %
  % gcc -c -m32 -x c /dev/null
  % cc1: error: invalid option ‘m32’
  %
  % fPIC is not usually needed here.
  % It is the default for Apple gcc and left
  % here in case user is using a self-built FSF gcc.
  %
  % g++ 1.c used to compile successfully as C++, on MacOSX 10.5.8.
  % On MacOS X 10.10.4 Yosemite it errors. -x c++ fixes it.
  % But do not use that with linking, otherwise all the object files are interpreted as C++.
  %
  % Clang assembler gives warnings for -fPIC, which appears meaningless (review for arm/arm64).
  %
  %SYSTEM_CC = "gcc -g -fPIC"
  SYSTEM_CC = "g++ -g -fPIC"
  SYSTEM_CC = SYSTEM_CC & " -Wall"
  SYSTEM_CC = SYSTEM_CC & " -Werror"
  SYSTEM_CC = SYSTEM_CC & " -Wno-return-type"
  SYSTEM_CC = SYSTEM_CC & " -Wno-missing-braces"
  %SYSTEM_CC = SYSTEM_CC & " -Wextra"
  %SYSTEM_CC = SYSTEM_CC & " -Wno-missing-field-initializers"
  %SYSTEM_CC = SYSTEM_CC & " -Wno-unused-parameter"
  % Usocket.c:31: warning: comparison of unsigned expression < 0 is always false
  SYSTEM_CC_ASM = "g++"
  %SYSTEM_CC_ASM = "gcc"
  local m = " -m" & {"32BITS":"32","64BITS":"64"}{WORD_SIZE}
  local arch = " -arch " & DarwinArch
  if not equal(try_exec("@" & SYSTEM_CC & m & " -c -x c /dev/null -o /dev/null 2>&1 | fgrep \"cc1: error: invalid option \\\`32'\" >/dev/null"), 0)
    SYSTEM_CC = SYSTEM_CC & m
    SYSTEM_CC_ASM = SYSTEM_CC_ASM & m
  end
  if not equal(try_exec("@" & SYSTEM_CC & arch & " -c -x c /dev/null -o /dev/null 2>&1 | fgrep \"cc1: error: unrecognized command line option \\\\\"-arch\\\\\"\" >/dev/null"), 0)
    SYSTEM_CC = SYSTEM_CC & arch
    SYSTEM_CC_ASM = SYSTEM_CC_ASM & arch
  end
  SYSTEM_CC_LD = SYSTEM_CC
  SYSTEM_CC = SYSTEM_CC & " -x c++"
  configure_c_compiler_common()
  %write("SYSTEM_CC is " & SYSTEM_CC)
end

if not defined("SYSTEM_LIBTOOL")
    readonly SYSTEM_LIBTOOL = "/usr/bin/libtool"
end

%------------------------------------------------ external system libraries ---
% SYSTEM_LIBS provides a mapping from Modula-3 names for the common
% external libraries to site-dependent information about how they
% are accessed.  If SYSTEM_LIBS{x} is defined it should be a list
% of linker arguments that are used when linking against that library.
% If SYSTEM_LIBS{x} is not defined, the Modula-3 system will assume
% that the library is not available.

OPENGL_FRAMEWORK = "/System/Library/Frameworks/OpenGL.framework"
LIBGL_DYLIB = OPENGL_FRAMEWORK & "/Versions/A/Libraries/libGL.dylib"

SYSTEM_LIBS = {
  "LIBC"       : [ "-lSystem" ],
  "LEX-YACC"   : [ "-ll" ],
  "FLEX-BISON" : [ "-lfl" ],
  "TCP"        : [ ]
% below: X11, ODBC, POSTGRES95, MOTIF. OPENGL
}

proc internal_configure_system_lib(name, known, args) is
  % This does not make sense to me August 8 2015 jaykrell
  % Do callers of configure_system_libs assume SYSTEM_CC is thereafter valid?
  configure_c_compiler() % why? http://modula3.elegosoft.com/cgi-bin/cvsweb.cgi/cm3/m3-sys/cminstall/src/config-no-install/Darwin.common.diff?r1=1.41;r2=1.42
  if SYSTEM_LIBS contains name
    return
  end
  if known
    SYSTEM_LIBS{name} = args
    return
  end
  configure_c_compiler() % This should suffice? August 8 2015 jaykrell
  if equal(try_exec("echo 'int main(){return 0;}' | " & SYSTEM_CC & " -x c - -o /dev/null 2>/dev/null", args), 0)
    %write("SYSTEM_LIBS{" & name & "} = " & args, EOL)
    SYSTEM_LIBS{name} = args
  end
  %error("2:" & name)
end

proc configure_system_libs() is

  % X11 is no longer provided by Apple.
  % 10.5.8 Leopard had it; 10.10.4 Yosemite does not.
  % OpenGL is similarly affected?
  % see http://xquartz.macosforge.org.

  if not equal(TARGET, "ARM64_DARWIN")

    internal_configure_system_lib(
      "ODBC",
      not equal(TARGET, "PPC64_DARWIN"),
      ["-liodbc", "-liodbcinst"])

    internal_configure_system_lib(
      "X11",
      not equal(TARGET, "PPC64_DARWIN"),
      ["-L/usr/X11R6/lib", "-lXaw", "-lXmu", "-lXext", "-lXt", "-lSM", "-lICE", "-lX11"])

    internal_configure_system_lib(
      "OPENGL",
      TRUE,
      [ "-Wl,-dylib_file," & LIBGL_DYLIB & ":" & LIBGL_DYLIB,
        "-L/usr/X11R6/lib", "-lGLU", "-lGL", "-lXext" ])
  end

  % Given the probing, why not enable these lines?

  % not present by default, but this is the default install location
  %internal_configure_system_lib("POSTGRES95", FALSE, ["-L/usr/local/pgsql/lib", "-lpq"])

  % not present by default
  %internal_configure_system_lib("MOTIF", FALSE, ["-lXm"])
end

% MacOSX 10.4 lacks a lot of PPC64 support, that 10.5 has.

proc HasTrestle() is
  return SYSTEM_LIBS contains "X11"
end

configure_system_libs()

% SYSTEM_LIBORDER defines the order in which SYSTEM_LIBS should be
% scanned by the linker.

SYSTEM_LIBORDER =
[
    "OPENGL",
%   "DECPEX",
%   "MOTIF",
    "X11",
    "TCP",
    "ODBC",
%   "POSTGRES95",
    "FLEX-BISON",
    "LEX-YACC",
    "LIBC"
]

%--------------------------------------------------------- library creation ---
% "make_lib" is called to combine a collection of object modules into
% a library.

proc make_lib (lib, options, objects, imported_libs, shared) is
  shared = AdjustShared(shared)
  local vmaj     = "5"
  local vmin     = "2"
  local version  = vmaj & "." & vmin
  local ret_code = 0
  local lib_a    = format ("lib%s.a", lib)
  local lib_so   = format ("lib%s.dylib", lib)
  local lib_sox  = format ("lib%s.%s.dylib", lib, vmaj)
  local lib_soxx = format ("lib%s.%s.dylib", lib, version)
  local lib_pn   = LIB_INSTALL & "/" & lib_soxx

  configure_c_compiler() % why? http://modula3.elegosoft.com/cgi-bin/cvsweb.cgi/cm3/m3-sys/cminstall/src/config-no-install/Darwin.common.diff?r1=1.41;r2=1.42

  % first, build the non-shared library
  local arch = ""
  if IsX86
      arch = " -arch_only " & DarwinArch & " "
  end
  ret_code = try_exec ("@" & SYSTEM_LIBTOOL, arch, "-static", "-o", lib_a, objects)
  if not equal (ret_code, 0) return ret_code end

  if shared
    configure_c_compiler()
    % build the shared library
    ret_code = try_exec (
        "@" & SYSTEM_CC_LD, "-dynamiclib",
        "-multiply_defined error",
        "-twolevel_namespace",
        "-compatibility_version", vmaj,
        "-current_version", version,

        % Since MacOS 10.5 (2007) rpath is the preferred mechanism for
        % locating shared libraries across PowerPC, Intel, and ARM.
        "-install_name", "@rpath/" & lib_sox,

        % allow user to run install_name_tool with maximum flexibility
        "-headerpad_max_install_names",

        %"-lgcc",
        "-o", lib_soxx,
        "-dead_strip",
        % "-dead_strip_dylibs", % requires 10.5
        objects,
        imported_libs
        )
    if not equal (ret_code, 0)
      delete_file (lib_a)
      return ret_code
    end

  end

  local a = skip_lib(lib, shared)

  return 0
end

%-------------------------------------------------------------------
% "skip_lib" is called when the compiler decides it doesn't need to
% call "make_lib", but it wants to discover the names of the derived
% files that should be deleted or shipped.

proc skip_lib (lib, shared) is
  shared = AdjustShared(shared)
  local vmaj     = "5"
  local vmin     = "2"
  local version  = vmaj & "." & vmin
  local lib_a    = format ("lib%s.a", lib)
  local lib_so   = format ("lib%s.dylib", lib)
  local lib_sox  = format ("lib%s.%s.dylib", lib, vmaj)
  local lib_soxx = format ("lib%s.%s.dylib", lib, version)

  % Tell clean what to delete.
  deriveds("", [lib_a, lib_so, lib_sox, lib_soxx])

  if shared
    % create the version aliases
    link_file(lib_soxx, lib_sox)
    link_file(lib_sox, lib_so)

    % make sure the shared library stuff gets installed properly
    LibdExport(lib_soxx)
    install_link_to_derived(lib_a, LIB_INSTALL)
    install_symbolic_link(lib_soxx, LIB_INSTALL & "/" & lib_so)
    install_symbolic_link(lib_soxx, LIB_INSTALL & "/" & lib_sox)
    install_derived_link("../../../lib/" & lib_soxx, lib_so)
    install_derived_link("../../../lib/" & lib_soxx, lib_sox)
    install_derived_link("../../../lib/" & lib_soxx, lib_soxx)

  else
    DeleteFiles([lib_so, lib_sox, lib_soxx])
  end

  return 0
end

%------------------------------------------------------------------- linker ---
% "m3_link" is called to produce a final executable.

proc m3_link (prog, options, objects, imported_libs, shared) is
  local args =
  [ "-o",
    prog,
    options,
    objects,
    imported_libs,
%   "-allow_stack_execute",
    "-multiply_defined suppress", % unfortunately needed for __cxa_atexit?
    "-bind_at_load",
    "-shared-libgcc",
    % "-pie", % requires 10.5
    "-dead_strip",
    % "-dead_strip_dylibs", % requires 10.5
    % allow user to run install_name_tool with maximum flexibility
    "-headerpad_max_install_names",
    % Give executable an rpath to search for shared libraries.
    "-Wl,-rpath," & LIB_USE ]
  if M3_PROFILING args += "-pg" end
  configure_c_compiler()
  return try_exec ("@" & SYSTEM_CC_LD, args)
end

%-------------------------------------------------------------------

include ("Unix.common")

%-------------------------------------------------------------------

M3_SHARED_LIB_ARG = ""
