(* Copyright 2020,2021 Eric Sessoms / MIT License *)

INTERFACE Crypto_Hash;
(* Common interface to message digests

Typical usage:

hash := Hash.New(algo);       (* Construct instance of desired algorithm  *)
WHILE moreData() DO           (* Feed message data into hash *)
  Hash.Update(hash, data)
END;
Hash.HexDigest(hash, digest)  (* Read resulting digest value *)

(* Reset allows re-use of the instance for a new calculation, without
allocating a new object. *)
Hash.Reset(hash)
*)


TYPE
  Algorithm = {MD5, SHA1, SHA224, SHA256};
  (* Names of currently implemented digest algorithms *)

  T = OBJECT METHODS
    (* Interface to digest algorithms

New digest algorithms must implement this interface to be usable by
this and related modules.  *)

    blockSize(): CARDINAL;
    (* Number of bytes consumed in update *)

    outputSize(): CARDINAL;
    (* Number of bytes generated by digest  *)

    reset();
    (* Reinitialize algorithm instance for use in new hash *)

    updateString(READONLY data: ARRAY OF CHAR);
    (* Hash message data *)

    digestString(VAR out: ARRAY OF CHAR);
    (* Generate hash of processed data *)
  END;


PROCEDURE New(algorithm: Algorithm): T;
  (* Construct instance of requested digest algorithm *)


PROCEDURE BlockSize(hash: T): CARDINAL;
  (* Number of bytes consumed in update *)


PROCEDURE OutputSize(hash: T): CARDINAL;
  (* Number of bytes generated by digest *)


PROCEDURE Reset(hash: T);
  (* Reinitialize algorithm instance for use in new hash *)


PROCEDURE UpdateString(hash: T; READONLY data: ARRAY OF CHAR);
  (* Hash message data *)


PROCEDURE Update(hash: T; data: TEXT);
  (* Hash message data *)


PROCEDURE DigestString(hash: T; VAR out: ARRAY OF CHAR);
  (* Generate hash of processed data

`out` must have space for `OutputSize` characters.

Note that `DigestString` is not a function, and destroys the state of
the hash in the process of generating the digest.  Two consecutive
calls to digest will produce different results, and the second one
will not be useful. *)


PROCEDURE Digest(hash: T; VAR out: TEXT);
  (* Generate hash of processed data

Destructive, see warnings about `DigestString`. *)


PROCEDURE HexDigest(hash: T; VAR out: TEXT);
  (* Represent digest as lowercase hexadecimal string

See warnings above for `DigestString`. *)


PROCEDURE ToHexString(data: TEXT): TEXT;
  (* Represent arbitrary data as lowercase hexadecimal string  *)


END Crypto_Hash.
