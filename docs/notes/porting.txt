Porting has been made much easier (and may become easier still).


This document is not necessarily written in a good order so try
to read the entire thing before proceeding.
Much of this is subject to change.
Work might become automatic and go away.
Files might move.


Our portability rests on some large pillars:
  Posix-compliance of target, including pthreads.
    Plus NT/Win32 targets are supported (so far just NT/x86)
    If pthreads aren't supported (djgpp), or don't work particularly well (OpenBSD),
      we have now have two very portable user thread implementations, and
      others are possible.
    In particular:
       getcontext/setcontext based
         But these are missing on OpenBSD and Darwin/amd64.
       sigaltstack based
         Very similar to getcontext/setcontext, but more expensive to
         create a thread. This is in use on OpenBSD by default, and
         is the user thread implementation on AMD64_DARWIN.
         See ThreadPosixC.c, it contains both get/setcontext and sigaltstack variants.
       sigstack might be the way to go on e.g. VMS, where pthreads don't get context.
       Lastly the old way of digging around in jmpbuf remains viable, but not portable,
       if desperate.


In the past, a large tedious error-prone part of porting was "rewriting /usr/include in Modula-3".
Mistakes here could be quite catastrophic -- introducing bugs into safe code via stack/heap corruption.
This task has been almost completely eliminated from the current tree.


In the past as well, there was a build ordering hassle where adding a new target to the compiler
would break building m3core and/or libm3, unless building was done in a more usual than
careful order. This has also been fixed.


There is still a little bit to learn and encode about new targets.


 -- section define "host" and "target" --

We speak of a "host" and a "target".


"Host" is an existing working fairly full featured machine that already can build and run Modula-3 programs,
including the Modula-3 compiler itself.


"Target" is the new system. For purposes of these instructions and convenience, it should also be a
fairly full featured machine, including a C compiler, Python interpreter, make.
We can target smaller "embedded" systems (phones), but that is not covered here.


 -- section high level --

At a high level, what we will do is:
 - add support to your native cm3 for targeting the new system (m3-sys/m3middle/src/Target.m3)
 - rebuild cm3 (scripts/python/upgrade.py)
 - build a cm3cg that targets the new system (cd m3-sys/m3cc; cm3 -DM3CC_TARGET=NEWTARGET)
 - add support to m3core and libm3 for the new system
 - do a build of m3core, libm3, and the pieces that make up cm3, BUT stopping
   at the output of assembly -- not running the assembler and linker
   (scripts/python/boot1.py NEWTARGET)
 - package up (tar/gzip) the assembly files, as well as some .c files
   (done by boot1.py, sitting in the current working directory)
 - copy that to the target system (scp or ftp)
 - unpackage (untar/gzip)
 - make
 - giving us cm3
 - use that cm3 to then build the entire system on the new target


 -- section lots of requirements and steps --

 - You will need to be comfortable with using a command line and not "just" a graphical user interface (GUI).

 - Chose a target.

 - Install it on a working machine.
   For a beginner, it will be easier if the new target runs in a virtual machine such as VMware or VirtualBox or Hyper-V.
   That implies and x86 or AMD64 target.
   There are emulators for other systems though they tend to be slow.

 - If the system does not support running cc or gcc on the system itself,
   your job is a little more difficult and these instructions might not apply.

 - Make sure you have a working cc or gcc for the system.
  
 NT: echo  int main() { printf( "hello\n "); } > a.c
     cl a.c
     .\1.exe
 sh: echo "int main() { printf(\"hello\n\"); }" > a.c
     cc a.c
     ./a.out

 If you can't do this on the system, stop.
 Well, ok, if the system supports this but you just don't have it fully setup, work on it.
 For example, on a Debian GNU/Linux system, try "sudo apt-get install build-essential".
 For non-GNU systems, you might need to buy the compiler, or download gcc binaries from somewhere (or cross-build them).
 On Mac OS X the development tools are not part of the default install but are readily available.
 You will also want a Bourne shell or preferably a make on the target system.

 - For convenience you will want a Python interpreter on the "host" system.
   And preferably on the "target" system.
   Python is not strictly speaking a requirement anywhere, but it definitely helps and parts
   of these instructions depend on it.

 - For convenience you will want a working cvs on the target system.
   Of course you need cvs on the host system.

 - You will need a convenient way to copy files to the system, such as scp or ftp or rsync or a USB flash disk..

 - Determine if gcc supports the target. If not, stop.
   If you really want to continue, you can:
     - investigate if llvm supports the target
     - investigate writing your own backend (such as we have for NT386)
     - investigate writing a backend that generates C (there is code around for this)

 - Determine if the target is Win32 or Posix. If neither, stop.
   If you really want to continue, you need to:

     - learn how to do file I/O on the system
        such as open/read/write/close, or possibly fopen/fread/fwrite/fclose
        also what the file path representations is, such c:\windows or /usr/include

     - networking
        socket, bind, connect, accept, etc.

     - threading
        and synchronization
        If your platform doesn't support pthreads, but includes setitimer, you
        can probably implement "user threads" via setjmp/longjmp or get/set/make/swapcontext

     - memory allocation -- malloc/free will probably do

   Basically you need to port m3core and libm3, esp. the parts in C.
   cd m3-libs/m3core
   bash: find . | grep \\.c$
   cmd: dir /s/b *.c
   cd m3-libs/libm3
   bash: find . | grep \\.c$
   cmd: dir /s/b *.c


 - make sure you have a full working "native" system and that you can rebuild
   it from source -- or at least cm3 and cm3cg, such as:
     scripts/python/do-cm3-std.py realclean
     scripts/python/upgrade.py
     scripts/python/do-cm3-std.py realclean skipgcc
     scripts/python/do-cm3-std.py buildship


 - Come up with a name for your platform, generally in the form of CPU_OS.
   "OS" is loosely defined as KERNEL + LIBC + cc + linker.
   Systems that don't map all of these one to one are not obvious how to name, and we haven't
     really settled on what to do. For example, on Solaris you might be using Sun's cc or GNU cc,
     but likely they use the same ABI and the .o files can be freely linked, which means
     it isn't really worth creating multiple platforms, but something might need to account for some differences.
   Some existing values of CPU include I386, AMD64, MIPS, MIPS32, MIPS64, SPARC, SPARC32, SPARC64, ARM, ALPHA, HPPA, HPPA64.
   Some existing values of OS include NT, SOLARIS, LINUX, FREEBSD, OPENBSD, NETBSD, CYGWIN, INTERIX.
   We have some existing "legacy" names like FreeBSD4, LINUXLIBC6, NT386, SOLgnu, SOLsun.
     Don't follow those examples.
   Generally a version should not be encoded in the platform name, as the code in the cm3 system to support the various
     versions would be identical anyway.


 - Look around the system for some platform names, especially ones ported to relatively recently, such as AMD64_LINUX.
   This will do a very good job of pointing to all the places you need to visit.
   I will try to cover them all below.

        Searching for 'AMD64_LINUX'...
        m3-sys/m3middle/src/Target.i3 -- critical
        m3-sys/m3middle/src/Target.m3 -- critical
        m3-libs/libm3/src/platforms.quake -- optional, you can just manage the config file instead
        m3-libs/m3core/src/platforms.quake -- optional, you can just manage the config file instead
        m3-libs/m3core/src/thread.quake -- optional, default is to only support pthreads
        m3-libs/m3core/src/float/m3makefile -- optional, currently all targets accept a default based on endian
        m3-libs/m3core/src/runtime/POSIX/m3makefile
        m3-libs/m3core/src/unix/m3makefile
        m3-libs/m3core/src/unix/Common/m3makefile
        m3-sys/cminstall/src/config/AMD64_LINUX
        m3-sys/m3cc/src/platforms.quake -- necessary for cross builds
        m3-sys/m3gdb/src/platforms.quake

 - We use an internal scripting language called "quake" to author, basically, pieces of makefiles.
   You will need to be somewhat comfortable with it.
   Look at these files:
    cd ROOT
    Unix: find . | grep platforms.quake
    NT: dir /s/b platforms.quake
    You will find some tables in these files.
    Make some good guesses for them.


 - cd m3-sys/cminstall/src/config
   Get a feel for some of the files here.
   Copy one of them and edit it appropriately.
   This includes:
     - determine the locations of some libraries on your system
     - determine what is a "good" set of switches to use with the C compiler, linker, and (usually) gcc backend


 - cd m3-sys/m3middle/src
   In m3-sys/m3middle/src/Target.i3, add to the enumeration Systems and the array SystemNames
   In m3-sys/m3middle/src/Target.m3, add to the PROCEDURE Init.
   scripts/config can help you determine some of the values, e.g. the size of the jump buffer used by setjmp/longjmp.

 - After you modify Target.i3, Target.m3, you will need to update your native compiler.
  "scripts/python/upgrade.py skipgcc" is good for that.

 - add support to m3core and libm3
   This consists of a few small pieces.
     - big endian or little endian?
     - src/unix/OS-target/Usysdep.i3
        This file should be shrinking as time progresses.
        scripts/config can help you here
     - src/unix/Common/*.c
     - more generally all .c files, esp. if they contain any #ifdefs

 A fair amount of m3core deals with user threads. You can ignore this and only support
 pthreads, at your decision. Many newer targets do this.

 - Look in scripts/sysinfo.sh and scripts/regression/defs.sh for use of uname.
   We won't be using these, but go ahead and update them.

 - Look in scripts/python/pylib.py for platform names, in the function def Boot():
   This is basically unfortunately duplicated from cminstall/src/config.
   This part is used to construct the Makefile (or Bourne script) we use on the target to build cm3.

 - Make sure the function _GetAllTargets in scripts/python/pylib.py includes your target in its list.

 - cd m3-sys/m3cc
   cm3 -DM3CC_TARGET=NEWTARGET

   Iterate until this succeeds.

 - scripts/python/boot1.py NEWTARGET

   Iterate until this succeeds.

 - This will produce in the current directory something like cm3-boot-NEWTARGET-1.tar.gz.

 - Copy cm3-boot-NEWTARGET-1.tar.gz to the new target.

 - Login to the new target.

 - gzip -cd cm3-boot-NEWTARGET-1.tar.gz | tar xf -
   cd cm3-boot-NEWTARGET-1
   make
   # or if you don't have make, try ./make.sh

   Iterate until this succeeds.

 - Now you have a cm3 that might run on the new target.
   Just try running it.
   ./cm3

   If this says "unable to find cm3.cfg", then it has worked as far as it should have.
   If it crashes or fails an assertion or something, debug.
   Iterate until you get "unable to find cm3.cfg".

 - Once you have a cm3 that runs on the target system, you can consider submitting your diffs so far.
   The checkin comment should be like "port enough to NEWTARGET such that can build and run cm3"
    and NOT "full port to NEWTARGET".

   If you don't commit at this point, you will need to get some/all of your edits so far
   to the new system. boot1.py does have provision for this.
   It packages up a hard coded list of files -- ones I had found I tended to edit in the past
     when porting. If you already have the source checked out from cvs on the target,
     you can run ./updatesource.sh from the "boot archive" to update with what
     you had working on the host system.

   If you do commit at this point, cvs -z3 upd on the target.

 - At this point you will try to build the system on the target.
 Something like:
  mkdir -p /cm3/bin
  mv cm3 /cm3/bin
  PATH=/cm3/bin:$PATH
  export PATH
  cp $CM3_ROOT/m3-sys/cminstall/src/config/cm3.cfg /cm3/bin
  This cm3.cfg delegates to $CM3_ROOT/m3-sys/cminstall/src/config/TARGET.
  cd scripts/python
  ./do-pkg.py m3cc buildship
  ./do-pkg.py m3core libm3 buildship
  ./upgrade.py
  ./do-cm3-std.py skipgcc realclean
  ./do-cm3-std.py skipgcc buildship

  This is a lot and could easily fail part way through.
  Iterate until it succeeds.
